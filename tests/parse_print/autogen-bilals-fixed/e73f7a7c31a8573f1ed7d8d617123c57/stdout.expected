language Essence 1.3

find var1: mset (minSize 0, maxSize 5, minOccur 2, maxOccur 3) of int(0..3, 2)
find var2: int(2..5, 3)
such that
    true,
    function([0, 4; int(4..5)] --> [false, false, false; int(9, 7..8)],
             ([] : `matrix indexed by [int] of int`) --> [false, true; int(3, 0)])
    subsetEq
    function([0, 0; int(5, 4)] --> [true, true, false, false; int(3..6)],
             [4, 1, 3, 1, 1; int(0..1, 12, 6, 9)] --> [true; int(0)],
             [5, 0, 1; int(8, 5, 7)] --> [false, true, true, true, true; int(9..10, 12, 13, 1)])
    -> (true <-> function(2 --> false, 5 --> true) subsetEq function(1 --> true, 5 --> false, 4 --> false)),
    true,
    false \/ apart({true}, (partition() : `partition from bool`)),
    image(function(tuple (1) --> [false, false, true, false; int(1, 4..6)],
                   tuple (3) --> [true, true, true, true, true; int(9, 10..11, 14, 4)]),
          tuple (var2))
        [toInt(!true)],
    ({} : `set of function set of int --> function bool --> bool`) supsetEq
    {function({3} --> function(true --> true), {4} --> function(false --> false, false --> true),
              {4, 5} --> function(false --> false, false --> true, true --> true, true --> false, true --> false),
              {1, 0, 4} --> function(true --> false, true --> true, true --> false, false --> true)),
     function({3} --> function(false --> false, false --> true), {1} --> function(false --> false, false --> false)),
     function(({} : `set of int`) --> function(true --> true),
              {1, 5, 5} --> function(false --> true, false --> false, true --> true, true --> false, false --> false),
              {4, 5} --> function(true --> true, true --> false), {3, 0} --> (function() : `function bool --> bool`))},
    false,
    false
