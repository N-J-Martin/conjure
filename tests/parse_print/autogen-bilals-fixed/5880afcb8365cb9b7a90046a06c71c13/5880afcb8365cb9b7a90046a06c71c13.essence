language Essence 1.3

find var1:
        set (minSize 1) of
            function (maxSize 4, total, bijective) int(4, 2..3) --> int(4, 1)
find var2:
        partition (minNumParts 1 , maxNumParts 4, partSize 1) from
            set (maxSize 5) of int(2, 1..2)
such that
    inverse(function(([4, 2; int(1..2)], mset(true)) --> {{true, false}, {false}},
                     ([1; int(0..0)], mset(false, true, true)) --> ({} : `set of set of bool`),
                     ([4; int(2..2)], mset(false, true, false)) --> {{false, true}, {true}}),
            function({{false, true, false}, {true, false}} --> ([3, 0, 1; int(4..5, 3..3)],
                                                                mset(true, true, true)),
                     {{true, false}} --> ([4, 0, 5, 0, 3; int(0..1, 7, 13..14)], mset(false)),
                     {{true, true}, {false}, {false, true, false}} --> ([4; int(1..1)],
                                                                        mset(false, false)),
                     {{false}} --> ([5, 2, 0, 1, 1; int(7, 8..9, 14, 3..3)], mset(true, true)),
                     {{true, false}, {true}} --> ([5; int(2..2)], mset(true, true, false)))),
    or([l_1 | l_1 : bool]),
    false,
    true,
    true,
    false,
    true
