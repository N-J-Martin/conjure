language Essence 1.3

find var1: mset (minSize 2, minOccur 1 , maxOccur 5) of bool
such that
    !(relation((true, true), (false, true), (true, false), (false, true),
               (true, true))
      union (relation() : `relation of (bool * bool)`)
      in
      {relation((true, true), (false, false), (false, false)),
       (relation() : `relation of (bool * bool)`)}),
    image(function(function(true --> true, false --> false) --> true <-> true),
          function(false < false --> true = true, true >= true --> !true,
                   false < true --> true > true, true = true --> false != false))
    ->
    (partition({false, false, false}, {false, true, false},
               {false, false, false, true}, {true, true, false, true, true}, {false, true})
     !=
     partition({false}, {false, true, false, true, true}, {true, false, true, false},
               {false, true, true, true}, {false, false, true, false, true}))
    != apart({false, true, true}, (partition() : `partition from bool`)),
    apart(({} : `set of (relation of (bool * bool), partition from bool)`),
          partition({(relation((true, true), (false, true), (true, true), (false, true)),
                      (partition() : `partition from bool`)),
                     (relation((false, true), (true, true)), partition({true, false, false, true})),
                     (relation((false, true), (false, false), (false, true), (true, false),
                               (true, false)),
                      partition({true, true}, {true, false}, {true, true, false, true, true})),
                     (relation((false, false)),
                      partition({true, true, false, false}, {false, true, false, true, false},
                                {true})),
                     (relation((false, true), (false, true), (true, true), (true, false)),
                      partition({true}, {true, true}, {false, true, true}, {false, true}))},
                    {(relation((false, false), (false, true), (false, false)),
                      partition({true, false, false, true}, {true, true, true, false})),
                     ((relation() : `relation of (bool * bool)`),
                      partition({false, true}, {true, true, false, false, false})),
                     (relation((false, true), (true, false), (true, false)),
                      partition({false, true, false, true}, {false}, {false, false, true},
                                {true, false, true, true, true}))},
                    {(relation((true, false), (false, true), (true, true), (false, true),
                               (true, true)),
                      partition({false, true, true}, {false, false, true},
                                {true, false, true, false, false})),
                     (relation((false, true), (true, true), (true, false), (false, false),
                               (false, false)),
                      partition({false, true, true, false, true}, {true, true, true, true, false},
                                {true}, {true, true})),
                     (relation((false, false)), partition({false, true, false, false}, {true})),
                     (relation((true, false), (false, false), (false, false), (true, true),
                               (false, true)),
                      partition({true, false, false, true, false}, {false}, {false},
                                {true, true, false}, {true, false}))})),
    allDiff(hist(var1)) <->
    relation((function(false --> false, true --> true),
              (function() : `function bool --> bool`), [false, false; int(0, 3..3)]),
             (function(true --> true),
              function(true --> true, false --> false, false --> false),
              [false, false, false, false, true; int(4..5, 2, 15, 8..8)]),
             (function(true --> true, true --> false, true --> false),
              function(false --> true, false --> true, true --> false),
              [true, true; int(1, 0..0)]))
    !=
    relation((function(true --> true), function(true --> true, false --> false),
              [true, true, false, false, false; int(15, 0, 6, 12, 10..10)]))
