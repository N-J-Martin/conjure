language Essence 1.3

find var1: partition (minNumParts 1, maxNumParts 1, partSize 4, regular) from mset (minSize 0, maxOccur 4) of int(4, 2)
find var2: (partition (numParts 0, maxPartSize 5) from bool, function (minSize 4, injective) int(4, 4) --> int(4, 2..4))
such that
    false,
    true,
    true,
    together(({} : `set of mset of mset of int`),
             partition({mset(mset(5, 2, 1), mset(1)), mset(mset(2, 5, 2), mset(0, 3)),
                        mset(mset(1, 1, 4), mset(0, 0, 1)), mset(mset(2, 2, 4))},
                       {mset(mset(4, 3, 3), mset(5, 1), mset(5, 5)), mset(mset(4, 0))}, {mset(mset(1, 0))})),
    mset(((5, true, false, false), partition({5, 2, 3, 2, 1}, {1}, {0, 0, 1, 3}, {2, 4, 5}, {4, 4, 5}),
          function(false --> 1, false --> 3, true --> 2, false --> 5, true --> 4)),
         ((5, true, true, false), partition({0}, {3, 2, 5}, {2, 3, 3, 5}, {5, 3, 0, 2, 3}),
          function(false --> 3, true --> 2)),
         ((2, true, false, true), partition({4, 4, 3, 4}, {1, 3, 3, 2}), function(false --> 1)))
    supset
    mset(((4, true, false, true), partition({3}, {4, 0, 3}, {5, 4, 1, 5, 4}, {1, 4, 4, 3}),
          function(false --> 0, false --> 1)))
