language Essence 1.3

find var1: set of bool
find var2: int(5)
such that
    and([toInt(q_3) = |({} : `set of int`)|
             | q_3 <- var1,
               q_3 \/
               function((false, -7) --> function(true --> -3), (false, -7) --> function(false --> 8, false --> 7),
                        (true, -9) --> function(true --> 0), (true, 0) --> function(false --> 5))
               =
               function((true, 7) --> function(true --> 7), (true, -6) --> function(true --> 1),
                        (true, -9) --> function(true --> -3, false --> 3),
                        (true, -10) --> function(false --> -3, true --> 8))]),
    |var1| != min(({} : `set of int`) union ({} : `set of int`)),
    false,
    or([((-6, false), toInt(true)) != ((7, true), 10 / -4) | q_4 : int(5), q_4 >= -7 ** var2 * -1]),
    var1 subset var1 /\ false,
    or([true | q_5 <- var1]),
    and([var2 != var2 -> var2 <= var2 | q_6 : set of bool])
