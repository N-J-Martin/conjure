language Essence 1.3

find var1: bool
find var2: bool
find var3: set of int(1)
such that
    and([true | q_4 : set of int(1), |q_4| = |q_4|]),
    true <-> true,
    or([(tuple (q_45), (-9, true)) = (tuple (toInt(false)), (5, var1))
            | q_45 <- var3, sum([min(mset(toInt(true))) | q_62 <- var3]) > q_45]),
    mset(mset(true, true, true = true), mset(true <-> true), toMSet({true}), mset(-10 != -5, true -> true, var1),
         (mset() : `mset of bool`))
    != mset(mset(true), mset(true), mset(true, false), mset(true)) union (mset() : `mset of mset of bool`)
    /\ false,
    or([true | q_90 : set of int(1), |q_90| < -2]),
    and([true | q_108 : set of int(1), {toInt(var1), |mset(2, -9)|} intersect {2, toInt(true)} - var3 subset q_108]),
    or([|var3| = toInt(7 != 0 /\ 0 = -1)
            | q_128 : set of int(1), |toMSet({false <-> false, var2, true != false, false = true})| != |q_128|])
