language Essence 1.3

find var1: bool
find var2: bool
find var3: set of (bool, bool)
find var4: (bool, int(-5..2, -3), (bool, int(-4, -2..4)), bool)
find var5: partition from int(-2..5, 3..5)
find var6: bool
such that
    and([true | q_7 <- var3]),
    and([(false, false) = (false, true) ->
         function(-4 --> -9, 3 --> -2) = function(4 --> 5, -5 --> 10)
             | q_8 <- var3]),
    true,
    true,
    mset([partition({2, -10}), partition({-10}), partition({6, 10}),
          partition({-8, 3}), partition({-2}, {0}), var5, var5, var5, var5; int(1..5,
                                                                                -3..4)],
         [var5; int(3..3)],
         [partition({4}), partition({-5}), partition({7}),
          partition({8}, {-5}); int(-4..-1)],
         [var5, partition({7}); int(2, -5)], [partition({4}); int(1)])
    != mset([partition({-1}); int(3)]),
    false
