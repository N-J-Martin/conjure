language Essence 1.3

find var1: partition from set of int(5, 3)
find var2: int(-4..3)
find var3: (int(0..2, -5), bool)
find var4: partition from bool
find var5: relation of (tuple (bool))
find var6: (bool, function int(-5..0, 3) --> bool, int(0..2, 3), int(3..5))
find var7: int(1)
such that
    and([false | q_8 : int(-4..3), |partition({partition({({} : `set of int`), {3, -4}, {-7, 3}})})| != q_8]),
    false,
    and([((false <-> true) = false -> (true <-> -9 = -7)) \/
         (partition({false}, {true}), function(true --> 10, true --> -9), function(7 --> true)) =
         (partition({false}), function(false --> 6, false --> 3), function(-6 --> true))
             | q_9 : int(-4..3), q_9 >= -6]),
    and([true | q_10 : int(-4..3)]),
    |partition({({true, true}, function(-2 --> 1, -10 --> -10), tuple (-2)),
                (({} : `set of bool`), function(4 --> 9), tuple (-10)),
                (({} : `set of bool`), function(7 --> 3), tuple (10))})|
    = -10
