Generating models for set_comprehension.essence
Generated models: model000001.eprime
Saved under: conjure-output
Savile Row: model000001.eprime
language ESSENCE' 1.0

find s_ExplicitVarSizeWithMarkerR2_Marker: int(0..8)
find s_ExplicitVarSizeWithMarkerR2_Values_Occurrence: matrix indexed by [int(1..8), int(1..3)] of bool
branching on [s_ExplicitVarSizeWithMarkerR2_Marker, s_ExplicitVarSizeWithMarkerR2_Values_Occurrence]
such that
    flatten([[toInt(q8 <= s_ExplicitVarSizeWithMarkerR2_Marker) *
              catchUndef(-toInt(s_ExplicitVarSizeWithMarkerR2_Values_Occurrence[q8, q10]), 0)
                  | q10 : int(1..3)]
                 | q8 : int(1..8)])
    <=lex
    flatten([[toInt(q9 <= s_ExplicitVarSizeWithMarkerR2_Marker) *
              catchUndef(-toInt(s_ExplicitVarSizeWithMarkerR2_Values_Occurrence[q9, q11]), 0)
                  | q11 : int(1..3)]
                 | q9 : int(1..8)]),
    and([q1 + 1 <= s_ExplicitVarSizeWithMarkerR2_Marker ->
         [-toInt(s_ExplicitVarSizeWithMarkerR2_Values_Occurrence[q1, q5]) | q5 : int(1..3)] <lex
         [-toInt(s_ExplicitVarSizeWithMarkerR2_Values_Occurrence[q1 + 1, q6]) | q6 : int(1..3)]
             | q1 : int(1..7)]),
    and([q2 > s_ExplicitVarSizeWithMarkerR2_Marker ->
         and([s_ExplicitVarSizeWithMarkerR2_Values_Occurrence[q2, q7] = false | q7 : int(1..3)])
             | q2 : int(1..8)]),
    2 <= s_ExplicitVarSizeWithMarkerR2_Marker,
    and([q3 <= s_ExplicitVarSizeWithMarkerR2_Marker ->
         2 <= sum([toInt(s_ExplicitVarSizeWithMarkerR2_Values_Occurrence[q3, q4]) | q4 : int(1..3)])
             | q3 : int(1..8)])

language Essence 1.3

letting s be {{1, 3}, {2, 3}}
$ Visualisation for s
$ 1 3
$ 2 3

