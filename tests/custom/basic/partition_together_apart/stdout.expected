Generating models for partition_together_apart.essence
Generated models: model_1_1.eprime
Saved under: conjure-output
Savile Row: model_1_1.eprime
Running minion for domain filtering.
Running solver: minion
Validating solution: conjure-output/model_1_1-solution000001.solution
Copying solution to: partition_together_apart.solution
File: conjure-output/model_1_1.eprime
language ESSENCE' 1.0

find a: bool
find b_Occurrence: matrix indexed by [int(1..6)] of bool
find c_Occurrence: matrix indexed by [int(1..6)] of bool
find d: bool
find e: bool
find e1: bool
find e2: bool
branching on [a, b_Occurrence, c_Occurrence, d, e, e1, e2]
such that
    a,
    sum([toInt(b_Occurrence[q3]) | q3 : int(1..6)]) = 6,
    sum([toInt(b_Occurrence[q6]) | q6 : int(1..6)]) <= 6,
    and([b_Occurrence[q4] -> or([1 = q4, 2 = q4, 3 = q4, 4 = q4, 5 = q4, 6 = q4; int(1..6)]) | q4 : int(1..6)]),
    6 <= sum([toInt(b_Occurrence[q8]) | q8 : int(1..6)]),
    b_Occurrence[1],
    b_Occurrence[2],
    b_Occurrence[3],
    b_Occurrence[4],
    b_Occurrence[5],
    b_Occurrence[6],
    sum([toInt(c_Occurrence[q9]) | q9 : int(1..6)]) = 3,
    sum([toInt(c_Occurrence[q12]) | q12 : int(1..6)]) <= 3,
    and([c_Occurrence[q10] -> or([4 = q10, 5 = q10, 6 = q10; int(1..3)]) | q10 : int(1..6)]),
    3 <= sum([toInt(c_Occurrence[q14]) | q14 : int(1..6)]),
    c_Occurrence[4],
    c_Occurrence[5],
    c_Occurrence[6],
    d,
    e = false,
    e1 = false,
    e2 = false

--------------------

File: conjure-output/model_1_1-solution000001.solution
language Essence 1.3

letting a be true
letting b be {1, 2, 3, 4, 5, 6}
letting c be {4, 5, 6}
letting d be true
letting e be false
letting e1 be false
letting e2 be false
--------------------

