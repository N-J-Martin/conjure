 ========== 1 ==========
language ESSENCE' 1.0

given n: int
given fin1: int
given G_ExplicitR3_Explicit: matrix indexed by [int(1..fin1), int(1..2)] of int(1..n)
find f_Function1DPartial_Flags: matrix indexed by [int(1..n)] of bool
find f_Function1DPartial_Values: matrix indexed by [int(1..n)] of int(1..n)
find c: int(1..n)
find conjure_aux1_Occurrence: matrix indexed by [int(1..n)] of bool
branching on [f_Function1DPartial_Flags, f_Function1DPartial_Values, c]
minimising c
such that
    and([and([f_Function1DPartial_Values[G_ExplicitR3_Explicit[q4, 1]] !=
              f_Function1DPartial_Values[G_ExplicitR3_Explicit[q4, 2]],
              f_Function1DPartial_Flags[G_ExplicitR3_Explicit[q4, 1]],
              f_Function1DPartial_Flags[G_ExplicitR3_Explicit[q4, 2]];
                  int(1..3)])
             | q4 : int(1..fin1)]),
    and([conjure_aux1_Occurrence[f_Function1DPartial_Values[u]] /\ f_Function1DPartial_Flags[u] | u : int(1..n)]),
    and([conjure_aux1_Occurrence[q5] ->
         or([q5 = f_Function1DPartial_Values[u] /\ f_Function1DPartial_Flags[u] | u : int(1..n)])
             | q5 : int(1..n)]),
    c = sum([toInt(conjure_aux1_Occurrence[q7]) | q7 : int(1..n)]),
    and([f_Function1DPartial_Flags[q1] = false -> f_Function1DPartial_Values[q1] = 1 | q1 : int(1..n)])

$ Conjure's
$ {"finds": [{"Name": "f"}, {"Name": "c"}],
$  "givens": [{"Name": "n"}, {"Name": "G"}],
$  "enumGivens": [],
$  "enumLettings": [],


 ========== 2 ==========
language ESSENCE' 1.0

given n: int
given fin1: int
given G_ExplicitR3_Explicit: matrix indexed by [int(1..fin1), int(1..2)] of int(1..n)
find f_Function1DPartial_Flags: matrix indexed by [int(1..n)] of bool
find f_Function1DPartial_Values: matrix indexed by [int(1..n)] of int(1..n)
find S_Occurrence: matrix indexed by [int(1..n)] of bool
find conjure_aux1_Occurrence: matrix indexed by [int(1..n)] of bool
branching on [f_Function1DPartial_Flags, f_Function1DPartial_Values, S_Occurrence]
minimising sum([toInt(S_Occurrence[q10]) | q10 : int(1..n)])
such that
    and([and([f_Function1DPartial_Values[G_ExplicitR3_Explicit[q5, 1]] !=
              f_Function1DPartial_Values[G_ExplicitR3_Explicit[q5, 2]],
              f_Function1DPartial_Flags[G_ExplicitR3_Explicit[q5, 1]],
              f_Function1DPartial_Flags[G_ExplicitR3_Explicit[q5, 2]];
                  int(1..3)])
             | q5 : int(1..fin1)]),
    and([conjure_aux1_Occurrence[f_Function1DPartial_Values[u]] /\ f_Function1DPartial_Flags[u] | u : int(1..n)]),
    and([conjure_aux1_Occurrence[q6] ->
         or([q6 = f_Function1DPartial_Values[u] /\ f_Function1DPartial_Flags[u] | u : int(1..n)])
             | q6 : int(1..n)]),
    and([S_Occurrence[q8] = conjure_aux1_Occurrence[q8] | q8 : int(1..n)]),
    and([f_Function1DPartial_Flags[q1] = false -> f_Function1DPartial_Values[q1] = 1 | q1 : int(1..n)])

$ Conjure's
$ {"finds": [{"Name": "f"}, {"Name": "S"}],
$  "givens": [{"Name": "n"}, {"Name": "G"}],
$  "enumGivens": [],
$  "enumLettings": [],


 ========== 3 ==========
Error:
    In a 'such that' statement: c = |toSet([image(f, u) | u : int(1..n)])|
    Error:
        When type checking: c = |toSet([image(f, u) | u : int(1..n)])|
        Cannot unify the types of the following.
        lhs        : c
        type of lhs: colours
        rhs        : |toSet([image(f, u) | u : int(1..n)])|
        type of rhs: int
