language ESSENCE' 1.0

find x_s_Occurrence: matrix indexed by [int(1..5)] of bool
find x_v: matrix indexed by [int(0..1)] of int(1..2)
find y_s_Occurrence: matrix indexed by [int(1..5)] of bool
find y_v: matrix indexed by [int(0..1)] of int(1..2)
branching on [x_s_Occurrence, x_v, y_s_Occurrence, y_v]
such that
    and([x_s_Occurrence[q7] -> y_s_Occurrence[q7] | q7 : int(1..5)]),
    or([x_s_Occurrence[q6] != y_s_Occurrence[q6] | q6 : int(1..5)]) \/
    or([x_s_Occurrence[q6] != y_s_Occurrence[q6] | q6 : int(1..5)]),
    2 <= sum([toInt(y_s_Occurrence[q1]) | q1 : int(1..5)]),
    sum([toInt(y_s_Occurrence[q1]) | q1 : int(1..5)]) <= 3,
    2 <= sum([toInt(x_s_Occurrence[q3]) | q3 : int(1..5)]),
    sum([toInt(x_s_Occurrence[q3]) | q3 : int(1..5)]) <= 3
, dominance_relation(and([x_s_Occurrence[q5] -> fromSolution(x_s_Occurrence)[q5] | q5 : int(1..5)]) ->
                     x_v[1] > fromSolution(x_v)[1])

$ Conjure's
$ {"finds": [{"Name": "x"}, {"Name": "y"}], "givens": [], "enumGivens": [], "enumLettings": [], "lettings": [],
$  "unnameds": [], "strategyQ": {"PickFirst": []}, "strategyA": {"Compact": []},
$  "trailCompact":
$      [[1, 1, 1], [1, 1, 1], [1, 1, 4], [1, 1, 1], [1, 1, 1], [1, 1, 4], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
