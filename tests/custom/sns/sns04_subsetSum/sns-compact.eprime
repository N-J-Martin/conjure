language ESSENCE' 1.0

given s: int
given fin1: int
given fin2: int
given fin3: int
given nums_Explicit: matrix indexed by [int(1..fin1)] of int(fin2..fin3)
letting let1 be fin1
letting let2 be [nums_Explicit[q9] | q9 : int(1..fin1)]
find x_ExplicitVarSizeWithMarker_Marker: int(0..let1)
find incumbent_x_ExplicitVarSizeWithMarker_Marker: int(0..let1)
find x_ExplicitVarSizeWithMarker_Values: matrix indexed by [int(1..let1)] of int(let2)
find incumbent_x_ExplicitVarSizeWithMarker_Values: matrix indexed by [int(1..let1)] of int(let2)
SNSGroup hasX : [x_ExplicitVarSizeWithMarker_Marker, x_ExplicitVarSizeWithMarker_Values]
find removeElem_activation: bool
find removeElem_nSize: int(1)
SNSNeighbourhood removeElem : (removeElem_nSize, removeElem_activation, hasX, [])
find addElem_activation: bool
find addElem_nSize: int(1)
SNSNeighbourhood addElem : (addElem_nSize, addElem_activation, hasX, [])
find findDoubleAdd_k: int([nums_Explicit[q41] | q41 : int(1..fin1)])
find findDoubleAdd_activation: bool
find findDoubleAdd_nSize: int(1)
SNSNeighbourhood findDoubleAdd : (findDoubleAdd_nSize, findDoubleAdd_activation, hasX, [findDoubleAdd_k])
SNSIncumbentMapping([x_ExplicitVarSizeWithMarker_Marker, x_ExplicitVarSizeWithMarker_Values],
                    [incumbent_x_ExplicitVarSizeWithMarker_Marker, incumbent_x_ExplicitVarSizeWithMarker_Values])
such that
    and([q47 <= x_ExplicitVarSizeWithMarker_Marker ->
         or([nums_Explicit[q49] = x_ExplicitVarSizeWithMarker_Values[q47] | q49 : int(1..fin1)])
             | q47 : int(1..let1)]),
    s =
    sum([toInt(q10 <= x_ExplicitVarSizeWithMarker_Marker) * catchUndef(x_ExplicitVarSizeWithMarker_Values[q10], 0)
             | q10 : int(1..let1)]),
    removeElem_activation ->
    or([q11 <= x_ExplicitVarSizeWithMarker_Marker /\
        (and([q13 <= incumbent_x_ExplicitVarSizeWithMarker_Marker ->
              or([q15 <= x_ExplicitVarSizeWithMarker_Marker /\
                  !(x_ExplicitVarSizeWithMarker_Values[q11] = x_ExplicitVarSizeWithMarker_Values[q15])
                  /\ x_ExplicitVarSizeWithMarker_Values[q15] = incumbent_x_ExplicitVarSizeWithMarker_Values[q13]
                      | q15 : int(1..let1)])
                  | q13 : int(1..let1)])
         /\
         and([q19 <= x_ExplicitVarSizeWithMarker_Marker /\
              !(x_ExplicitVarSizeWithMarker_Values[q11] = x_ExplicitVarSizeWithMarker_Values[q19])
              ->
              or([q21 <= incumbent_x_ExplicitVarSizeWithMarker_Marker /\
                  incumbent_x_ExplicitVarSizeWithMarker_Values[q21] = x_ExplicitVarSizeWithMarker_Values[q19]
                      | q21 : int(1..let1)])
                  | q19 : int(1..let1)]))
            | q11 : int(1..let1)]),
    !removeElem_activation -> and([removeElem_nSize = 1; int(1)]),
    addElem_activation ->
    or([q24 <= x_ExplicitVarSizeWithMarker_Marker /\
        (and([q26 <= incumbent_x_ExplicitVarSizeWithMarker_Marker ->
              or([q28 <= x_ExplicitVarSizeWithMarker_Marker /\
                  x_ExplicitVarSizeWithMarker_Values[q28] = incumbent_x_ExplicitVarSizeWithMarker_Values[q26]
                      | q28 : int(1..let1)])
              \/
              !or([q31 <= x_ExplicitVarSizeWithMarker_Marker /\
                   x_ExplicitVarSizeWithMarker_Values[q31] = x_ExplicitVarSizeWithMarker_Values[q24]
                       | q31 : int(1..let1)])
              /\ x_ExplicitVarSizeWithMarker_Values[q24] = incumbent_x_ExplicitVarSizeWithMarker_Values[q26]
                  | q26 : int(1..let1)])
         /\
         (and([q33 <= x_ExplicitVarSizeWithMarker_Marker ->
               or([q35 <= incumbent_x_ExplicitVarSizeWithMarker_Marker /\
                   incumbent_x_ExplicitVarSizeWithMarker_Values[q35] = x_ExplicitVarSizeWithMarker_Values[q33]
                       | q35 : int(1..let1)])
                   | q33 : int(1..let1)])
          /\
          (!or([q40 <= x_ExplicitVarSizeWithMarker_Marker /\
                x_ExplicitVarSizeWithMarker_Values[q40] = x_ExplicitVarSizeWithMarker_Values[q24]
                    | q40 : int(1..let1)])
           ->
           or([q38 <= incumbent_x_ExplicitVarSizeWithMarker_Marker /\
               incumbent_x_ExplicitVarSizeWithMarker_Values[q38] = x_ExplicitVarSizeWithMarker_Values[q24]
                   | q38 : int(1..let1)]))))
            | q24 : int(1..let1)]),
    !addElem_activation -> and([addElem_nSize = 1; int(1)]),
    findDoubleAdd_activation ->
    or([q43 <= x_ExplicitVarSizeWithMarker_Marker /\ x_ExplicitVarSizeWithMarker_Values[q43] = findDoubleAdd_k
            | q43 : int(1..let1)]),
    findDoubleAdd_activation ->
    or([q45 <= incumbent_x_ExplicitVarSizeWithMarker_Marker /\
        incumbent_x_ExplicitVarSizeWithMarker_Values[q45] = 2 * findDoubleAdd_k
            | q45 : int(1..let1)]),
    !findDoubleAdd_activation ->
    findDoubleAdd_nSize = 1 /\ findDoubleAdd_k = min([nums_Explicit[q41] | q41 : int(1..fin1)]),
    and([and([q5 <= x_ExplicitVarSizeWithMarker_Marker /\ q6 <= x_ExplicitVarSizeWithMarker_Marker ->
              x_ExplicitVarSizeWithMarker_Values[q5] != x_ExplicitVarSizeWithMarker_Values[q6]
                  | q6 : int(q5 + 1..let1)])
             | q5 : int(1..let1)]),
    and([q7 > x_ExplicitVarSizeWithMarker_Marker -> x_ExplicitVarSizeWithMarker_Values[q7] = min(let2)
             | q7 : int(1..let1)]),
    1 <= x_ExplicitVarSizeWithMarker_Marker,
    x_ExplicitVarSizeWithMarker_Marker <= let1

