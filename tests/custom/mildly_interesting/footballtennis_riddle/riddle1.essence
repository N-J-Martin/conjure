
$ instance

letting PLAYER be new type enum {Hazard, Modric, Mbappe}
letting nbGamesPerPlayer be function (Hazard --> 10, Modric --> 14, Mbappe --> 18)

$ to parameterise, use the following definitions
$ given PLAYER new type enum
$ given nbGamesPerPlayer : function (total) PLAYER --> int

$ model

letting nbGames be sum([ nb | (player, nb) <- nbGamesPerPlayer ]) / 2

find sides : sequence (size nbGames) of set (size 2) of PLAYER
find winner : sequence (size nbGames) of PLAYER
find loser : sequence (size nbGames) of PLAYER

$ a game is composed of a winner and a loser
such that
    forAll (game, players) in sides .
        {winner(game), loser(game)} = sides(game)

$ winner stays on, loser waits
such that
    forAll (game, players) in sides . game < nbGames ->
         winner(game) in sides(game+1) /\
        !(loser(game) in sides(game+1))

$ totals
such that
    forAll p : PLAYER .
         nbGamesPerPlayer(p) = sum([ 1 | (game, players) <- sides, p in players ])


$ first riddle, from: https://twitter.com/pschaus/status/1018855508277714945
such that loser(2) = Hazard       $ SAT
$ such that loser(2) = Modric       $ UNSAT
$ such that loser(2) = Mbappe       $ UNSAT
