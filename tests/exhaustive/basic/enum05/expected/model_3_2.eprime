language ESSENCE' 1.0

find x_ExplicitVarSizeWithMarker_Marker: int(0..2)
find x_ExplicitVarSizeWithMarker_Values: matrix indexed by [int(1..2)] of int(1..2)
find x_ExplicitVarSizeWithDummy: matrix indexed by [int(1..2)] of int(1..3)
branching on [x_ExplicitVarSizeWithDummy, x_ExplicitVarSizeWithMarker_Marker, x_ExplicitVarSizeWithMarker_Values]
such that
    or([q23 <= x_ExplicitVarSizeWithMarker_Marker /\ x_ExplicitVarSizeWithMarker_Values[q23] = 1 | q23 : int(1..2)]),
    2 <= x_ExplicitVarSizeWithMarker_Marker ->
    x_ExplicitVarSizeWithMarker_Values[1] < x_ExplicitVarSizeWithMarker_Values[2],
    and([q2 > x_ExplicitVarSizeWithMarker_Marker -> x_ExplicitVarSizeWithMarker_Values[q2] = 1 | q2 : int(1..2)]),
    x_ExplicitVarSizeWithDummy[1] < x_ExplicitVarSizeWithDummy[2] \/ x_ExplicitVarSizeWithDummy[1] = 3,
    x_ExplicitVarSizeWithDummy[1] = 3 -> x_ExplicitVarSizeWithDummy[2] = 3,
    sum([toInt(x_ExplicitVarSizeWithDummy[q9] != 3) | q9 : int(1..2)]) = x_ExplicitVarSizeWithMarker_Marker,
    sum([toInt(x_ExplicitVarSizeWithDummy[q15] != 3) | q15 : int(1..2)]) <= x_ExplicitVarSizeWithMarker_Marker,
    and([x_ExplicitVarSizeWithDummy[q11] != 3 ->
         or([q13 <= x_ExplicitVarSizeWithMarker_Marker /\
             x_ExplicitVarSizeWithMarker_Values[q13] = x_ExplicitVarSizeWithDummy[q11]
                 | q13 : int(1..2)])
             | q11 : int(1..2)]),
    x_ExplicitVarSizeWithMarker_Marker <= sum([toInt(x_ExplicitVarSizeWithDummy[q18] != 3) | q18 : int(1..2)]),
    and([q19 <= x_ExplicitVarSizeWithMarker_Marker ->
         or([x_ExplicitVarSizeWithDummy[q21] != 3 /\
             x_ExplicitVarSizeWithDummy[q21] = x_ExplicitVarSizeWithMarker_Values[q19]
                 | q21 : int(1..2)])
             | q19 : int(1..2)])

