language ESSENCE' 1.0

find s_ExplicitVarSizeWithDummy: matrix indexed by [int(1..4)] of int(1..5)
find s_Occurrence: matrix indexed by [int(1..4)] of bool
letting let1 be -100
find x: int(-100..100)
find conjure_aux1: int(-25..4)
branching on [s_Occurrence, s_ExplicitVarSizeWithDummy, x]
such that
    and([and([s_ExplicitVarSizeWithDummy[q6] != 5, s_ExplicitVarSizeWithDummy[q7] != 5,
              s_ExplicitVarSizeWithDummy[q6] != s_ExplicitVarSizeWithDummy[q7],
              allDiff([s_ExplicitVarSizeWithDummy[q6] + s_ExplicitVarSizeWithDummy[q7],
                       s_ExplicitVarSizeWithDummy[q6] * s_ExplicitVarSizeWithDummy[q7],
                       s_ExplicitVarSizeWithDummy[q6] / s_ExplicitVarSizeWithDummy[q7];
                           int(1..3)]),
              (s_ExplicitVarSizeWithDummy[q6] - s_ExplicitVarSizeWithDummy[q7]) % 2 = 0;
                  int(1..5)])
         ->
         min([s_ExplicitVarSizeWithDummy[q6] + s_ExplicitVarSizeWithDummy[q7],
              s_ExplicitVarSizeWithDummy[q6] - s_ExplicitVarSizeWithDummy[q7],
              s_ExplicitVarSizeWithDummy[q6] * s_ExplicitVarSizeWithDummy[q7],
              s_ExplicitVarSizeWithDummy[q6] / s_ExplicitVarSizeWithDummy[q7];
                  int(1..4)])
         <= conjure_aux1
             | q6 : int(1..4), q7 : int(1..4)]),
    sum([toInt(and([s_ExplicitVarSizeWithDummy[q6] != 5, s_ExplicitVarSizeWithDummy[q7] != 5,
                    s_ExplicitVarSizeWithDummy[q6] != s_ExplicitVarSizeWithDummy[q7],
                    allDiff([s_ExplicitVarSizeWithDummy[q6] + s_ExplicitVarSizeWithDummy[q7],
                             s_ExplicitVarSizeWithDummy[q6] * s_ExplicitVarSizeWithDummy[q7],
                             s_ExplicitVarSizeWithDummy[q6] / s_ExplicitVarSizeWithDummy[q7];
                                 int(1..3)]),
                    (s_ExplicitVarSizeWithDummy[q6] - s_ExplicitVarSizeWithDummy[q7]) % 2 = 0;
                        int(1..5)]))
             | q6 : int(1..4), q7 : int(1..4)])
    > 0
    ->
    or([and([s_ExplicitVarSizeWithDummy[q6] != 5, s_ExplicitVarSizeWithDummy[q7] != 5,
             s_ExplicitVarSizeWithDummy[q6] != s_ExplicitVarSizeWithDummy[q7],
             allDiff([s_ExplicitVarSizeWithDummy[q6] + s_ExplicitVarSizeWithDummy[q7],
                      s_ExplicitVarSizeWithDummy[q6] * s_ExplicitVarSizeWithDummy[q7],
                      s_ExplicitVarSizeWithDummy[q6] / s_ExplicitVarSizeWithDummy[q7];
                          int(1..3)]),
             (s_ExplicitVarSizeWithDummy[q6] - s_ExplicitVarSizeWithDummy[q7]) % 2 = 0;
                 int(1..5)])
        /\
        min([s_ExplicitVarSizeWithDummy[q6] + s_ExplicitVarSizeWithDummy[q7],
             s_ExplicitVarSizeWithDummy[q6] - s_ExplicitVarSizeWithDummy[q7],
             s_ExplicitVarSizeWithDummy[q6] * s_ExplicitVarSizeWithDummy[q7],
             s_ExplicitVarSizeWithDummy[q6] / s_ExplicitVarSizeWithDummy[q7];
                 int(1..4)])
        = conjure_aux1
            | q6 : int(1..4), q7 : int(1..4)]),
    sum([toInt(and([s_ExplicitVarSizeWithDummy[q6] != 5, s_ExplicitVarSizeWithDummy[q7] != 5,
                    s_ExplicitVarSizeWithDummy[q6] != s_ExplicitVarSizeWithDummy[q7],
                    allDiff([s_ExplicitVarSizeWithDummy[q6] + s_ExplicitVarSizeWithDummy[q7],
                             s_ExplicitVarSizeWithDummy[q6] * s_ExplicitVarSizeWithDummy[q7],
                             s_ExplicitVarSizeWithDummy[q6] / s_ExplicitVarSizeWithDummy[q7];
                                 int(1..3)]),
                    (s_ExplicitVarSizeWithDummy[q6] - s_ExplicitVarSizeWithDummy[q7]) % 2 = 0;
                        int(1..5)]))
             | q6 : int(1..4), q7 : int(1..4)])
    = 0
    -> conjure_aux1 = -25,
    x = conjure_aux1,
    sum([toInt(and([s_ExplicitVarSizeWithDummy[q6] != 5, s_ExplicitVarSizeWithDummy[q7] != 5,
                    s_ExplicitVarSizeWithDummy[q6] != s_ExplicitVarSizeWithDummy[q7],
                    allDiff([s_ExplicitVarSizeWithDummy[q6] + s_ExplicitVarSizeWithDummy[q7],
                             s_ExplicitVarSizeWithDummy[q6] * s_ExplicitVarSizeWithDummy[q7],
                             s_ExplicitVarSizeWithDummy[q6] / s_ExplicitVarSizeWithDummy[q7];
                                 int(1..3)]),
                    (s_ExplicitVarSizeWithDummy[q6] - s_ExplicitVarSizeWithDummy[q7]) % 2 = 0;
                        int(1..5)]))
             | q6 : int(1..4), q7 : int(1..4)])
    > 0,
    and([s_ExplicitVarSizeWithDummy[q1] < s_ExplicitVarSizeWithDummy[q1 + 1] \/ s_ExplicitVarSizeWithDummy[q1] = 5
             | q1 : int(1..3)]),
    and([s_ExplicitVarSizeWithDummy[q2] = 5 -> s_ExplicitVarSizeWithDummy[q2 + 1] = 5 | q2 : int(1..3)]),
    sum([toInt(s_Occurrence[q29]) | q29 : int(1..4)]) =
    sum([toInt(s_ExplicitVarSizeWithDummy[q31] != 5) | q31 : int(1..4)]),
    sum([toInt(s_Occurrence[q35]) | q35 : int(1..4)]) <=
    sum([toInt(s_ExplicitVarSizeWithDummy[q37] != 5) | q37 : int(1..4)]),
    and([s_Occurrence[q32] ->
         or([s_ExplicitVarSizeWithDummy[q34] != 5 /\ s_ExplicitVarSizeWithDummy[q34] = q32 | q34 : int(1..4)])
             | q32 : int(1..4)]),
    sum([toInt(s_ExplicitVarSizeWithDummy[q41] != 5) | q41 : int(1..4)]) <=
    sum([toInt(s_Occurrence[q42]) | q42 : int(1..4)]),
    and([s_ExplicitVarSizeWithDummy[q39] != 5 -> s_Occurrence[s_ExplicitVarSizeWithDummy[q39]] | q39 : int(1..4)])

