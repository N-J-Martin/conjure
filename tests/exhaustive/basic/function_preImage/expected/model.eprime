language ESSENCE' 1.0

find f_Function1DPartial_Flags: matrix indexed by [int(1..3)] of bool
find f_Function1DPartial_Values: matrix indexed by [int(1..3)] of int(1..3)
branching on [f_Function1DPartial_Flags, f_Function1DPartial_Values]
such that
<<<<<<< HEAD
    2 = sum([toInt(f_Function1DPartial_Flags[q6] /\ f_Function1DPartial_Values[q6] = 2) | q6 : int(1..3)]),
    2 <= sum([toInt(f_Function1DPartial_Flags[q10] /\ f_Function1DPartial_Values[q10] = 2) | q10 : int(1..3)]),
    or([f_Function1DPartial_Flags[q14] /\ f_Function1DPartial_Values[q14] = 2 /\ q14 = 1 | q14 : int(1..3)]),
    or([f_Function1DPartial_Flags[q17] /\ f_Function1DPartial_Values[q17] = 2 /\ q17 = 2 | q17 : int(1..3)]),
    sum([toInt(f_Function1DPartial_Flags[q21] /\ f_Function1DPartial_Values[q21] = 2) | q21 : int(1..3)]) <= 2,
    and([f_Function1DPartial_Flags[q23] /\ f_Function1DPartial_Values[q23] = 2 -> 1 = q23 \/ 2 = q23
             | q23 : int(1..3)]),
=======
    or([f_Function1DPartial_Flags[q7] /\ f_Function1DPartial_Values[q7] = 2 /\ q7 = 1 | q7 : int(1..3)]),
    or([f_Function1DPartial_Flags[q10] /\ f_Function1DPartial_Values[q10] = 2 /\ q10 = 2 | q10 : int(1..3)]),
    and([f_Function1DPartial_Flags[q13] /\ f_Function1DPartial_Values[q13] = 2 -> 1 = q13 \/ 2 = q13
             | q13 : int(1..3)]),
>>>>>>> master
    and([f_Function1DPartial_Flags[q1] = false -> f_Function1DPartial_Values[q1] = 1 | q1 : int(1..3)])

