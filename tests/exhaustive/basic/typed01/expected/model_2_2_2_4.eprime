language ESSENCE' 1.0

find x_ExplicitVarSizeWithDummy: matrix indexed by [int(1)] of int(1, 2)
find y_ExplicitVarSizeWithDummy: matrix indexed by [int(1)] of int(1, 2)
find y_ExplicitVarSizeWithFlags_Flags: matrix indexed by [int(1)] of bool
find y_ExplicitVarSizeWithFlags_Values: matrix indexed by [int(1)] of int(1)
branching on
    [x_ExplicitVarSizeWithDummy, y_ExplicitVarSizeWithFlags_Flags, y_ExplicitVarSizeWithFlags_Values,
     y_ExplicitVarSizeWithDummy]
such that
    toInt(x_ExplicitVarSizeWithDummy[1] != 2 /\
          (y_ExplicitVarSizeWithDummy[1] != 2 /\ y_ExplicitVarSizeWithDummy[1] = x_ExplicitVarSizeWithDummy[1]))
    = 0,
    toInt(x_ExplicitVarSizeWithDummy[1] != 2 /\
          (y_ExplicitVarSizeWithDummy[1] != 2 /\ y_ExplicitVarSizeWithDummy[1] = x_ExplicitVarSizeWithDummy[1]))
    <= 0,
    x_ExplicitVarSizeWithDummy[1] != 2 /\
    (y_ExplicitVarSizeWithDummy[1] != 2 /\ y_ExplicitVarSizeWithDummy[1] = x_ExplicitVarSizeWithDummy[1])
    -> false,
    0 <=
    toInt(x_ExplicitVarSizeWithDummy[1] != 2 /\
          (y_ExplicitVarSizeWithDummy[1] != 2 /\ y_ExplicitVarSizeWithDummy[1] = x_ExplicitVarSizeWithDummy[1])),
    y_ExplicitVarSizeWithFlags_Flags[1] = false -> y_ExplicitVarSizeWithFlags_Values[1] = 1,
    toInt(y_ExplicitVarSizeWithFlags_Flags[1]) = toInt(y_ExplicitVarSizeWithDummy[1] != 2),
    toInt(y_ExplicitVarSizeWithFlags_Flags[1]) <= toInt(y_ExplicitVarSizeWithDummy[1] != 2),
    y_ExplicitVarSizeWithFlags_Flags[1] ->
    y_ExplicitVarSizeWithDummy[1] != 2 /\ y_ExplicitVarSizeWithDummy[1] = y_ExplicitVarSizeWithFlags_Values[1],
    toInt(y_ExplicitVarSizeWithDummy[1] != 2) <= toInt(y_ExplicitVarSizeWithFlags_Flags[1]),
    y_ExplicitVarSizeWithDummy[1] != 2 ->
    y_ExplicitVarSizeWithFlags_Flags[1] /\ y_ExplicitVarSizeWithFlags_Values[1] = y_ExplicitVarSizeWithDummy[1]

