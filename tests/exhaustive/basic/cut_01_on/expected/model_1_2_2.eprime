language ESSENCE' 1.0

find x_Occurrence: matrix indexed by [int(1..3)] of bool
find x_ExplicitVarSizeWithDummy: matrix indexed by [int(1..3)] of int(1..4)
find cut1: bool
find cut2: bool
branching on [cut1, cut2, x_ExplicitVarSizeWithDummy, x_Occurrence]
such that
<<<<<<< HEAD
    !cut1 <-> 2 <= sum([toInt(x_Occurrence[q21]) | q21 : int(1..3)]) /\ (x_Occurrence[1] /\ x_Occurrence[2]),
    !cut2 <-> or([x_ExplicitVarSizeWithDummy[q24] != 4 /\ x_ExplicitVarSizeWithDummy[q24] = 1 | q24 : int(1..3)]),
=======
    !cut1 <-> x_Occurrence[1] /\ x_Occurrence[2],
    !cut2 <-> or([x_ExplicitVarSizeWithDummy[q13] != 4 /\ x_ExplicitVarSizeWithDummy[q13] = 1 | q13 : int(1..3)]),
>>>>>>> master
    and([x_ExplicitVarSizeWithDummy[q2] < x_ExplicitVarSizeWithDummy[q2 + 1] \/ x_ExplicitVarSizeWithDummy[q2] = 4
             | q2 : int(1..2)]),
    and([x_ExplicitVarSizeWithDummy[q3] = 4 -> x_ExplicitVarSizeWithDummy[q3 + 1] = 4 | q3 : int(1..2)]),
    sum([toInt(x_ExplicitVarSizeWithDummy[q7] != 4) | q7 : int(1..3)]) =
    sum([toInt(x_Occurrence[q8]) | q8 : int(1..3)]),
    sum([toInt(x_ExplicitVarSizeWithDummy[q12] != 4) | q12 : int(1..3)]) <=
    sum([toInt(x_Occurrence[q13]) | q13 : int(1..3)]),
    and([x_ExplicitVarSizeWithDummy[q10] != 4 -> x_Occurrence[x_ExplicitVarSizeWithDummy[q10]] | q10 : int(1..3)]),
    sum([toInt(x_Occurrence[q17]) | q17 : int(1..3)]) <=
    sum([toInt(x_ExplicitVarSizeWithDummy[q19] != 4) | q19 : int(1..3)]),
    and([x_Occurrence[q14] ->
         or([x_ExplicitVarSizeWithDummy[q16] != 4 /\ x_ExplicitVarSizeWithDummy[q16] = q14 | q16 : int(1..3)])
             | q14 : int(1..3)])

