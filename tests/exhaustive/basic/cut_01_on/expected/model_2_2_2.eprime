language ESSENCE' 1.0

find x_ExplicitVarSizeWithDummy: matrix indexed by [int(1..3)] of int(1..4)
find cut1: bool
find cut2: bool
branching on [cut1, cut2, x_ExplicitVarSizeWithDummy]
such that
    !cut1 <->
<<<<<<< HEAD
    2 <= sum([toInt(x_ExplicitVarSizeWithDummy[q7] != 4) | q7 : int(1..3)]) /\
    (or([x_ExplicitVarSizeWithDummy[q10] != 4 /\ x_ExplicitVarSizeWithDummy[q10] = 1 | q10 : int(1..3)]) /\
     or([x_ExplicitVarSizeWithDummy[q12] != 4 /\ x_ExplicitVarSizeWithDummy[q12] = 2 | q12 : int(1..3)])),
    !cut2 <-> or([x_ExplicitVarSizeWithDummy[q14] != 4 /\ x_ExplicitVarSizeWithDummy[q14] = 1 | q14 : int(1..3)]),
=======
    or([x_ExplicitVarSizeWithDummy[q7] != 4 /\ x_ExplicitVarSizeWithDummy[q7] = 1 | q7 : int(1..3)]) /\
    or([x_ExplicitVarSizeWithDummy[q9] != 4 /\ x_ExplicitVarSizeWithDummy[q9] = 2 | q9 : int(1..3)]),
    !cut2 <-> or([x_ExplicitVarSizeWithDummy[q11] != 4 /\ x_ExplicitVarSizeWithDummy[q11] = 1 | q11 : int(1..3)]),
>>>>>>> master
    and([x_ExplicitVarSizeWithDummy[q1] < x_ExplicitVarSizeWithDummy[q1 + 1] \/ x_ExplicitVarSizeWithDummy[q1] = 4
             | q1 : int(1..2)]),
    and([x_ExplicitVarSizeWithDummy[q2] = 4 -> x_ExplicitVarSizeWithDummy[q2 + 1] = 4 | q2 : int(1..2)])

