language ESSENCE' 1.0

find s_ExplicitVarSizeWithDummy: matrix indexed by [int(1..2)] of int(1..3)
find s_Occurrence: matrix indexed by [int(1..2)] of bool
branching on [s_Occurrence, s_ExplicitVarSizeWithDummy]
such that
    s_Occurrence[sum([toInt(s_ExplicitVarSizeWithDummy[q7] != 3) | q7 : int(1..2)])],
    s_ExplicitVarSizeWithDummy[1] < s_ExplicitVarSizeWithDummy[2] \/ s_ExplicitVarSizeWithDummy[1] = 3,
    s_ExplicitVarSizeWithDummy[1] = 3 -> s_ExplicitVarSizeWithDummy[2] = 3,
    sum([toInt(s_Occurrence[q8]) | q8 : int(1..2)]) =
    sum([toInt(s_ExplicitVarSizeWithDummy[q10] != 3) | q10 : int(1..2)]),
    sum([toInt(s_Occurrence[q14]) | q14 : int(1..2)]) <=
    sum([toInt(s_ExplicitVarSizeWithDummy[q16] != 3) | q16 : int(1..2)]),
    and([s_Occurrence[q11] ->
         or([s_ExplicitVarSizeWithDummy[q13] != 3 /\ s_ExplicitVarSizeWithDummy[q13] = q11 | q13 : int(1..2)])
             | q11 : int(1..2)]),
    sum([toInt(s_ExplicitVarSizeWithDummy[q20] != 3) | q20 : int(1..2)]) <=
    sum([toInt(s_Occurrence[q21]) | q21 : int(1..2)]),
    and([s_ExplicitVarSizeWithDummy[q18] != 3 -> s_Occurrence[s_ExplicitVarSizeWithDummy[q18]] | q18 : int(1..2)])

