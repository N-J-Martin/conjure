language ESSENCE' 1.0

find s_ExplicitVarSizeWithMarker_Marker: int(0..2)
find s_ExplicitVarSizeWithMarker_Values: matrix indexed by [int(1..2)] of int(1..2)
find s_ExplicitVarSizeWithDummy: matrix indexed by [int(1..2)] of int(1..3)
branching on [s_ExplicitVarSizeWithDummy, s_ExplicitVarSizeWithMarker_Marker, s_ExplicitVarSizeWithMarker_Values]
such that
    or([s_ExplicitVarSizeWithDummy[q23] != 3 /\ s_ExplicitVarSizeWithDummy[q23] = s_ExplicitVarSizeWithMarker_Marker
            | q23 : int(1..2)]),
    2 <= s_ExplicitVarSizeWithMarker_Marker ->
    s_ExplicitVarSizeWithMarker_Values[1] < s_ExplicitVarSizeWithMarker_Values[2],
    and([q2 > s_ExplicitVarSizeWithMarker_Marker -> s_ExplicitVarSizeWithMarker_Values[q2] = 1 | q2 : int(1..2)]),
    s_ExplicitVarSizeWithDummy[1] < s_ExplicitVarSizeWithDummy[2] \/ s_ExplicitVarSizeWithDummy[1] = 3,
    s_ExplicitVarSizeWithDummy[1] = 3 -> s_ExplicitVarSizeWithDummy[2] = 3,
    sum([toInt(s_ExplicitVarSizeWithDummy[q9] != 3) | q9 : int(1..2)]) = s_ExplicitVarSizeWithMarker_Marker,
    sum([toInt(s_ExplicitVarSizeWithDummy[q15] != 3) | q15 : int(1..2)]) <= s_ExplicitVarSizeWithMarker_Marker,
    and([s_ExplicitVarSizeWithDummy[q11] != 3 ->
         or([q13 <= s_ExplicitVarSizeWithMarker_Marker /\
             s_ExplicitVarSizeWithMarker_Values[q13] = s_ExplicitVarSizeWithDummy[q11]
                 | q13 : int(1..2)])
             | q11 : int(1..2)]),
    s_ExplicitVarSizeWithMarker_Marker <= sum([toInt(s_ExplicitVarSizeWithDummy[q18] != 3) | q18 : int(1..2)]),
    and([q19 <= s_ExplicitVarSizeWithMarker_Marker ->
         or([s_ExplicitVarSizeWithDummy[q21] != 3 /\
             s_ExplicitVarSizeWithDummy[q21] = s_ExplicitVarSizeWithMarker_Values[q19]
                 | q21 : int(1..2)])
             | q19 : int(1..2)])

