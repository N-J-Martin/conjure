language ESSENCE' 1.0

find x_MOccurrence: matrix indexed by [int(1..2)] of int(0..4)
find x_ExplicitWithFlags_Flags: matrix indexed by [int(1..4)] of int(0..4)
find x_ExplicitWithFlags_Values: matrix indexed by [int(1..4)] of int(1..2)
branching on [x_ExplicitWithFlags_Flags, x_ExplicitWithFlags_Values, x_MOccurrence]
such that
    or([x_MOccurrence[q14] > 0 /\ q14 = 1 | q14 : int(1..2)]),
    sum([x_MOccurrence[q1] | q1 : int(1..2)]) <= 4,
    and([x_ExplicitWithFlags_Flags[q2 + 1] > 0 ->
         [x_ExplicitWithFlags_Values[q2]; int(1)] <lex [x_ExplicitWithFlags_Values[q2 + 1]; int(1)]
             | q2 : int(1..3)]),
    and([x_ExplicitWithFlags_Flags[q3] = 0 -> x_ExplicitWithFlags_Values[q3] = 1 | q3 : int(1..4)]),
    and([x_ExplicitWithFlags_Flags[q4 + 1] > 0 -> x_ExplicitWithFlags_Flags[q4] > 0 | q4 : int(1..3)]),
    sum([x_ExplicitWithFlags_Flags[q6] | q6 : int(1..4)]) <= 4,
    and([x_ExplicitWithFlags_Flags[q9] > 0 ->
         sum([toInt(x_ExplicitWithFlags_Values[q10] = x_ExplicitWithFlags_Values[q9]) *
              catchUndef(x_ExplicitWithFlags_Flags[q10], 0)
                  | q10 : int(1..4)])
         = x_MOccurrence[x_ExplicitWithFlags_Values[q9]]
             | q9 : int(1..4)]),
    and([x_MOccurrence[q11] > 0 ->
         sum([toInt(x_ExplicitWithFlags_Values[q12] = q11) * catchUndef(x_ExplicitWithFlags_Flags[q12], 0)
                  | q12 : int(1..4)])
         = x_MOccurrence[q11]
             | q11 : int(1..2)])

