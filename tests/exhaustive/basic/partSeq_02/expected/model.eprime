language ESSENCE' 1.0

find x_PartitionSequenceAsSet_ExplicitR14_ExplicitBounded_Length: matrix indexed by [int(1..2)] of int(0..6)
find x_PartitionSequenceAsSet_ExplicitR14_ExplicitBounded_Values: matrix indexed by [int(1..2), int(1..6)] of int(1..6)
such that
    alldifferent_except([toInt(q13 <= x_PartitionSequenceAsSet_ExplicitR14_ExplicitBounded_Length[q12]) *
                         catchUndef(x_PartitionSequenceAsSet_ExplicitR14_ExplicitBounded_Values[q12, q13], 0)
                             | q12 : int(1..2), q13 : int(1..6)],
                        0),
    and([x_PartitionSequenceAsSet_ExplicitR14_ExplicitBounded_Length[q14] =
         x_PartitionSequenceAsSet_ExplicitR14_ExplicitBounded_Length[q15]
             | q14 : int(1..2), q15 : int(1..2)]),
    and([x_PartitionSequenceAsSet_ExplicitR14_ExplicitBounded_Length[q16] >= 1 | q16 : int(1..2)]),
    x_PartitionSequenceAsSet_ExplicitR14_ExplicitBounded_Length[1] <
    x_PartitionSequenceAsSet_ExplicitR14_ExplicitBounded_Length[2]
    \/
    x_PartitionSequenceAsSet_ExplicitR14_ExplicitBounded_Length[1] =
    x_PartitionSequenceAsSet_ExplicitR14_ExplicitBounded_Length[2]
    /\
    x_PartitionSequenceAsSet_ExplicitR14_ExplicitBounded_Values[1, ..] <lex
    x_PartitionSequenceAsSet_ExplicitR14_ExplicitBounded_Values[2, ..],
    and([and([q8 > x_PartitionSequenceAsSet_ExplicitR14_ExplicitBounded_Length[q7] ->
              x_PartitionSequenceAsSet_ExplicitR14_ExplicitBounded_Values[q7, q8] = 1
                  | q8 : int(1..6)])
             | q7 : int(1..2)]),
    and([x_PartitionSequenceAsSet_ExplicitR14_ExplicitBounded_Length[q7] <= 6 | q7 : int(1..2)]),
    6 = sum([x_PartitionSequenceAsSet_ExplicitR14_ExplicitBounded_Length[q11] | q11 : int(1..2)])

