language ESSENCE' 1.0

find x_FunctionNDPartial_Flags: matrix indexed by [int(1..2), int(1..2)] of bool
find x_FunctionNDPartial_Values: matrix indexed by [int(1..2), int(1..2)] of int(1..3)
branching on [x_FunctionNDPartial_Flags, x_FunctionNDPartial_Values]
such that
    and([x_FunctionNDPartial_Flags[q8_1, q8_2] ->
         or([x_FunctionNDPartial_Flags[q11_1, q11_2] /\ x_FunctionNDPartial_Values[q11_1, q11_2] = q8_2
                 | q11_1 : int(1..2), q11_2 : int(1..2)])
             | q8_1 : int(1..2), q8_2 : int(1..2), or([1 = q8_1 /\ q7_2 = q8_2 | q7_2 : int(1..2)])]),
    and([x_FunctionNDPartial_Flags[q1_1, q1_2] /\ x_FunctionNDPartial_Flags[q2_1, q2_2] ->
         x_FunctionNDPartial_Values[q1_1, q1_2] != x_FunctionNDPartial_Values[q2_1, q2_2]
             | q1_1 : int(1..2), q1_2 : int(1..2), q2_1 : int(1..2), q2_2 : int(1..2),
               q1_1 < q2_1 \/ q1_1 = q2_1 /\ q1_2 < q2_2]),
    and([x_FunctionNDPartial_Flags[q3_1, q3_2] = false -> x_FunctionNDPartial_Values[q3_1, q3_2] = 1
             | q3_1 : int(1..2), q3_2 : int(1..2)])

