language ESSENCE' 1.0

find conjure_aux1: int(1)
find s_ExplicitVarSizeWithDummy: matrix indexed by [int(1..4)] of int(1..5)
find s_Occurrence: matrix indexed by [int(1..4)] of bool
find conjure_aux2: int(1..5)
branching on [conjure_aux1, s_Occurrence, s_ExplicitVarSizeWithDummy]
such that
    and([s_ExplicitVarSizeWithDummy[q7] != 5 -> s_ExplicitVarSizeWithDummy[q7] >= conjure_aux2 | q7 : int(1..4)]),
    sum([toInt(s_ExplicitVarSizeWithDummy[q7] != 5) | q7 : int(1..4)]) > 0 ->
    or([s_ExplicitVarSizeWithDummy[q7] != 5 /\ s_ExplicitVarSizeWithDummy[q7] = conjure_aux2 | q7 : int(1..4)]),
    sum([toInt(s_ExplicitVarSizeWithDummy[q7] != 5) | q7 : int(1..4)]) = 0 -> conjure_aux2 = 1,
    conjure_aux2 = 3,
    sum([toInt(s_ExplicitVarSizeWithDummy[q7] != 5) | q7 : int(1..4)]) > 0,
    and([s_ExplicitVarSizeWithDummy[q1] < s_ExplicitVarSizeWithDummy[q1 + 1] \/ s_ExplicitVarSizeWithDummy[q1] = 5
             | q1 : int(1..3)]),
    and([s_ExplicitVarSizeWithDummy[q2] = 5 -> s_ExplicitVarSizeWithDummy[q2 + 1] = 5 | q2 : int(1..3)]),
    sum([toInt(s_Occurrence[q8]) | q8 : int(1..4)]) =
    sum([toInt(s_ExplicitVarSizeWithDummy[q10] != 5) | q10 : int(1..4)]),
    sum([toInt(s_Occurrence[q14]) | q14 : int(1..4)]) <=
    sum([toInt(s_ExplicitVarSizeWithDummy[q16] != 5) | q16 : int(1..4)]),
    and([s_Occurrence[q11] ->
         or([s_ExplicitVarSizeWithDummy[q13] != 5 /\ s_ExplicitVarSizeWithDummy[q13] = q11 | q13 : int(1..4)])
             | q11 : int(1..4)]),
    sum([toInt(s_ExplicitVarSizeWithDummy[q20] != 5) | q20 : int(1..4)]) <=
    sum([toInt(s_Occurrence[q21]) | q21 : int(1..4)]),
    and([s_ExplicitVarSizeWithDummy[q18] != 5 -> s_Occurrence[s_ExplicitVarSizeWithDummy[q18]] | q18 : int(1..4)])

