language ESSENCE' 1.0

find conjure_aux1: int(1)
find s_Occurrence: matrix indexed by [int(1..4)] of bool
find s_ExplicitVarSizeWithMarker_Marker: int(0..4)
find s_ExplicitVarSizeWithMarker_Values: matrix indexed by [int(1..4)] of int(1..4)
find conjure_aux2: int(1..4)
branching on [conjure_aux1, s_ExplicitVarSizeWithMarker_Marker, s_ExplicitVarSizeWithMarker_Values, s_Occurrence]
such that
    and([s_Occurrence[q13] -> q13 >= conjure_aux2 | q13 : int(1..4)]),
    sum([toInt(s_Occurrence[q13]) | q13 : int(1..4)]) > 0 ->
    or([s_Occurrence[q13] /\ q13 = conjure_aux2 | q13 : int(1..4)]),
    sum([toInt(s_Occurrence[q13]) | q13 : int(1..4)]) = 0 -> conjure_aux2 = 1,
    conjure_aux2 = 3,
    sum([toInt(s_Occurrence[q13]) | q13 : int(1..4)]) > 0,
    and([q2 + 1 <= s_ExplicitVarSizeWithMarker_Marker ->
         s_ExplicitVarSizeWithMarker_Values[q2] < s_ExplicitVarSizeWithMarker_Values[q2 + 1]
             | q2 : int(1..3)]),
    and([q3 > s_ExplicitVarSizeWithMarker_Marker -> s_ExplicitVarSizeWithMarker_Values[q3] = 1 | q3 : int(1..4)]),
    s_ExplicitVarSizeWithMarker_Marker = sum([toInt(s_Occurrence[q5]) | q5 : int(1..4)]),
    s_ExplicitVarSizeWithMarker_Marker <= sum([toInt(s_Occurrence[q7]) | q7 : int(1..4)]),
    and([q8 <= s_ExplicitVarSizeWithMarker_Marker -> s_Occurrence[s_ExplicitVarSizeWithMarker_Values[q8]]
             | q8 : int(1..4)]),
    sum([toInt(s_Occurrence[q12]) | q12 : int(1..4)]) <= s_ExplicitVarSizeWithMarker_Marker,
    and([s_Occurrence[q9] ->
         or([q11 <= s_ExplicitVarSizeWithMarker_Marker /\ s_ExplicitVarSizeWithMarker_Values[q11] = q9
                 | q11 : int(1..4)])
             | q9 : int(1..4)])

