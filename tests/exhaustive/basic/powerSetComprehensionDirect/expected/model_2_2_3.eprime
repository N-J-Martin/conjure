language ESSENCE' 1.0

given n: int
given a: int
given b: int
find x_ExplicitVarSizeWithDummy: matrix indexed by [int(1..1 + (b - a))] of int(a..b + 1)
such that
    and([and([or([x_ExplicitVarSizeWithDummy[q11] != b + 1 /\
                  x_ExplicitVarSizeWithDummy[q11] = t_ExplicitVarSizeWithMarker_Values[q9]
                      | q11 : int(1..1 + (b - a))])
                  | q9 : int(1..1 + (b - a)), q9 <= t_ExplicitVarSizeWithMarker_Marker])
         ->
         sum([t_ExplicitVarSizeWithMarker_Values[q12]
                  | q12 : int(1..1 + (b - a)), q12 <= t_ExplicitVarSizeWithMarker_Marker])
         <= 6
             | t_ExplicitVarSizeWithMarker_Marker : int(0..1 + (b - a)),
               t_ExplicitVarSizeWithMarker_Values : matrix indexed by [int(1..1 + (b - a))] of int(a..b),
               and([q5 + 1 <= t_ExplicitVarSizeWithMarker_Marker ->
                    t_ExplicitVarSizeWithMarker_Values[q5] < t_ExplicitVarSizeWithMarker_Values[q5 + 1]
                        | q5 : int(1..1 + (b - a) - 1)]),
               and([q6 > t_ExplicitVarSizeWithMarker_Marker -> t_ExplicitVarSizeWithMarker_Values[q6] = a
                        | q6 : int(1..1 + (b - a))])]),
    and([x_ExplicitVarSizeWithDummy[q1] < x_ExplicitVarSizeWithDummy[q1 + 1] \/ x_ExplicitVarSizeWithDummy[q1] = b + 1
             | q1 : int(1..1 + (b - a) - 1)]),
    and([x_ExplicitVarSizeWithDummy[q2] = b + 1 -> x_ExplicitVarSizeWithDummy[q2 + 1] = b + 1
             | q2 : int(1..1 + (b - a) - 1)]),
    n <= sum([toInt(x_ExplicitVarSizeWithDummy[q3] != b + 1) | q3 : int(1..1 + (b - a))])

