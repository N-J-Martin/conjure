$ only hard constraints are considered
$ no nurses' skills
$ no history
$ no forbidden patterns, no minimum demand

$ NOTE: this model is not correct
$ REASON: since roster is a function (days, shifts) --> nurses, this won't allow more than one nurse assigned to the same shift of the same day. This means that if the minimum demand asks for 2 or more nurses for a particular day and shift, then we can't satisfy it.

given nNurses, nDays : int(1..)
given shifts new type enum

letting days be domain int(1..nDays)
letting nurses be domain int(1..nNurses)
letting nShifts be |`shifts`|

given forbiddenPatterns : set of tuple (shifts, shifts)
given minimumDemand : function (total) (days, shifts) --> int(0..nNurses)

where
    forAll d : days .
        (sum s : shifts . minimumDemand((d,s))) <= nNurses
 	
find roster: function (days, shifts) --> nurses

$ constraint 1 (Single assignment per day): A nurse can be assigned to at most one shift per day
such that 
	forAll nurse : nurses . 
		forAll day : days . 
			(sum ((d,_),n) in roster . toInt(n=nurse /\ d=day)) <= 1             
