{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE RankNTypes #-}

module Conjure.RepresentationsTest ( tests ) where

-- conjure
import Conjure.Prelude
import Conjure.Language.Definition
import Conjure.Language.Type
import Conjure.Language.Domain
import Conjure.Language.Pretty
import Conjure.Process.Enumerate ( EnumerateDomainNoIO(..) )
import Conjure.Representations ( downC, up, downC1, up1 )

-- tasty
import Test.Tasty
import Test.Tasty.HUnit ( Assertion, testCase, assertFailure, (@?=) )
-- import Test.Tasty.QuickCheck as QC
-- import Test.Tasty.SmallCheck as SC


tests :: TestTree
tests = testGroup "representations"

    [ testCase "bool #1" $
        let
            highDomain = DomainBool
            highConstant = ConstantBool False
            low = [("x", highDomain, highConstant)]
        in  testCases "x" highDomain highConstant (const Nothing) low low

    , testCase "bool #2" $
        let
            highDomain = DomainBool
            highConstant = ConstantBool True
            low = [("x", highDomain, highConstant)]
        in  testCases "x" highDomain highConstant (const Nothing) low low

    , testCase "int #1" $
        let
            highDomain = intDomain 1 4
<<<<<<< HEAD
            highConstant = ConstantInt Nothing 3
||||||| merged common ancestors
            highConstant = ConstantInt 3
=======
            highConstant = (ConstantInt NoTag) 3
>>>>>>> taggedints
            low = [("x", highDomain, highConstant)]
        in  testCases "x" highDomain highConstant (const Nothing) low low

    , testCase "matrix of bool" $
        let
            highDomain = DomainMatrix (intDomain 1 3) DomainBool
            highConstant = ConstantAbstract $ AbsLitMatrix (intDomain 1 3) [ConstantBool False, ConstantBool False, ConstantBool True]
            low = [("x", highDomain, highConstant)]
        in  testCases "x" highDomain highConstant (const Nothing) low low

    , testCase "matrix of int" $
        let
            highDomain = DomainMatrix (intDomain 1 3) (intDomain 1 5)
<<<<<<< HEAD
            highConstant = ConstantAbstract $ AbsLitMatrix (intDomain 1 3) [ConstantInt Nothing 2, ConstantInt Nothing 3, ConstantInt Nothing 5]
||||||| merged common ancestors
            highConstant = ConstantAbstract $ AbsLitMatrix (intDomain 1 3) [ConstantInt 2, ConstantInt 3, ConstantInt 5]
=======
            highConstant = ConstantAbstract $ AbsLitMatrix (intDomain 1 3) [(ConstantInt NoTag) 2, (ConstantInt NoTag) 3, (ConstantInt NoTag) 5]
>>>>>>> taggedints
            low = [("x", highDomain, highConstant)]
        in  testCases "x" highDomain highConstant (const Nothing) low low

    , testCase "matrix 2d of bool" $
        let
            highDomain =
                DomainMatrix (intDomain 1 3) (DomainMatrix (intDomain 1 2) DomainBool)
            highConstant =
                ConstantAbstract $ AbsLitMatrix (intDomain 1 3)
                    [ ConstantAbstract $ AbsLitMatrix (intDomain 1 2) [ConstantBool False, ConstantBool True ]
                    , ConstantAbstract $ AbsLitMatrix (intDomain 1 2) [ConstantBool True , ConstantBool False]
                    , ConstantAbstract $ AbsLitMatrix (intDomain 1 2) [ConstantBool True , ConstantBool True ]
                    ]
            low = [("x", highDomain, highConstant)]
        in  testCases "x" highDomain highConstant (const Nothing) low low

    , testCase "matrix 2d of int" $
        let
            highDomain =
                DomainMatrix (intDomain 1 3) (DomainMatrix (intDomain 1 2) (intDomain 0 9))
            highConstant =
                ConstantAbstract $ AbsLitMatrix (intDomain 1 3)
<<<<<<< HEAD
                    [ ConstantAbstract $ AbsLitMatrix (intDomain 1 2) [ConstantInt Nothing 3, ConstantInt Nothing 7]
                    , ConstantAbstract $ AbsLitMatrix (intDomain 1 2) [ConstantInt Nothing 2, ConstantInt Nothing 8]
                    , ConstantAbstract $ AbsLitMatrix (intDomain 1 2) [ConstantInt Nothing 0, ConstantInt Nothing 1]
||||||| merged common ancestors
                    [ ConstantAbstract $ AbsLitMatrix (intDomain 1 2) [ConstantInt 3, ConstantInt 7]
                    , ConstantAbstract $ AbsLitMatrix (intDomain 1 2) [ConstantInt 2, ConstantInt 8]
                    , ConstantAbstract $ AbsLitMatrix (intDomain 1 2) [ConstantInt 0, ConstantInt 1]
=======
                    [ ConstantAbstract $ AbsLitMatrix (intDomain 1 2) [(ConstantInt NoTag) 3, (ConstantInt NoTag) 7]
                    , ConstantAbstract $ AbsLitMatrix (intDomain 1 2) [(ConstantInt NoTag) 2, (ConstantInt NoTag) 8]
                    , ConstantAbstract $ AbsLitMatrix (intDomain 1 2) [(ConstantInt NoTag) 0, (ConstantInt NoTag) 1]
>>>>>>> taggedints
                    ]
            low = [("x", highDomain, highConstant)]
        in  testCases "x" highDomain highConstant (const Nothing) low low

    , testCase "(bool, int)" $
        let
            highDomain = DomainTuple [DomainBool, intDomain 1 3]
<<<<<<< HEAD
            highConstant = ConstantAbstract $ AbsLitTuple [ConstantBool False, ConstantInt Nothing 2]
||||||| merged common ancestors
            highConstant = ConstantAbstract $ AbsLitTuple [ConstantBool False, ConstantInt 2]
=======
            highConstant = ConstantAbstract $ AbsLitTuple [ConstantBool False, (ConstantInt NoTag) 2]
>>>>>>> taggedints
            low = [ ( "x_1", DomainBool   , ConstantBool False )
<<<<<<< HEAD
                  , ( "x_2", intDomain 1 3, ConstantInt Nothing 2      )
||||||| merged common ancestors
                  , ( "x_2", intDomain 1 3, ConstantInt 2      )
=======
                  , ( "x_2", intDomain 1 3, (ConstantInt NoTag) 2      )
>>>>>>> taggedints
                  ]
        in  testCases "x" highDomain highConstant Just low low

    , testCase "(bool, int, bool)" $
        let
            highDomain = DomainTuple [DomainBool, intDomain 1 3, DomainBool]
<<<<<<< HEAD
            highConstant = ConstantAbstract $ AbsLitTuple [ConstantBool False, ConstantInt Nothing 2, ConstantBool True]
||||||| merged common ancestors
            highConstant = ConstantAbstract $ AbsLitTuple [ConstantBool False, ConstantInt 2, ConstantBool True]
=======
            highConstant = ConstantAbstract $ AbsLitTuple [ConstantBool False, (ConstantInt NoTag) 2, ConstantBool True]
>>>>>>> taggedints
            low = [ ( "x_1", DomainBool   , ConstantBool False )
<<<<<<< HEAD
                  , ( "x_2", intDomain 1 3, ConstantInt Nothing 2      )
||||||| merged common ancestors
                  , ( "x_2", intDomain 1 3, ConstantInt 2      )
=======
                  , ( "x_2", intDomain 1 3, (ConstantInt NoTag) 2      )
>>>>>>> taggedints
                  , ( "x_3", DomainBool   , ConstantBool True  )
                  ]
        in  testCases "x" highDomain highConstant Just low low

    , testCase "((bool, int), bool)" $
        let
            highDomain = DomainTuple [DomainTuple [DomainBool, intDomain 1 3], DomainBool]
<<<<<<< HEAD
            highConstant = ConstantAbstract $ AbsLitTuple [ConstantAbstract $ AbsLitTuple [ConstantBool False, ConstantInt Nothing 2], ConstantBool True]
            mid = [ ( "x_1", DomainTuple [DomainBool, intDomain 1 3], ConstantAbstract $ AbsLitTuple [ConstantBool False, ConstantInt Nothing 2] )
||||||| merged common ancestors
            highConstant = ConstantAbstract $ AbsLitTuple [ConstantAbstract $ AbsLitTuple [ConstantBool False, ConstantInt 2], ConstantBool True]
            mid = [ ( "x_1", DomainTuple [DomainBool, intDomain 1 3], ConstantAbstract $ AbsLitTuple [ConstantBool False, ConstantInt 2] )
=======
            highConstant = ConstantAbstract $ AbsLitTuple [ConstantAbstract $ AbsLitTuple [ConstantBool False, (ConstantInt NoTag) 2], ConstantBool True]
            mid = [ ( "x_1", DomainTuple [DomainBool, intDomain 1 3], ConstantAbstract $ AbsLitTuple [ConstantBool False, (ConstantInt NoTag) 2] )
>>>>>>> taggedints
                  , ( "x_2", DomainBool, ConstantBool True )
                  ]
            low = [ ( "x_1_1", DomainBool   , ConstantBool False )
<<<<<<< HEAD
                  , ( "x_1_2", intDomain 1 3, ConstantInt Nothing 2      )
||||||| merged common ancestors
                  , ( "x_1_2", intDomain 1 3, ConstantInt 2      )
=======
                  , ( "x_1_2", intDomain 1 3, (ConstantInt NoTag) 2      )
>>>>>>> taggedints
                  , ( "x_2"  , DomainBool   , ConstantBool True  )
                  ]
        in  testCases "x" highDomain highConstant Just mid low

    , testCase "(bool, (int, bool))" $
        let
            highDomain = DomainTuple [DomainBool, DomainTuple [intDomain 1 3, DomainBool]]
<<<<<<< HEAD
            highConstant = ConstantAbstract $ AbsLitTuple [ConstantBool False, ConstantAbstract $ AbsLitTuple [ConstantInt Nothing 2, ConstantBool True]]
||||||| merged common ancestors
            highConstant = ConstantAbstract $ AbsLitTuple [ConstantBool False, ConstantAbstract $ AbsLitTuple [ConstantInt 2, ConstantBool True]]
=======
            highConstant = ConstantAbstract $ AbsLitTuple [ConstantBool False, ConstantAbstract $ AbsLitTuple [(ConstantInt NoTag) 2, ConstantBool True]]
>>>>>>> taggedints
            mid = [ ( "x_1", DomainBool, ConstantBool False )
<<<<<<< HEAD
                  , ( "x_2", DomainTuple [intDomain 1 3, DomainBool], ConstantAbstract $ AbsLitTuple [ConstantInt Nothing 2, ConstantBool True] )
||||||| merged common ancestors
                  , ( "x_2", DomainTuple [intDomain 1 3, DomainBool], ConstantAbstract $ AbsLitTuple [ConstantInt 2, ConstantBool True] )
=======
                  , ( "x_2", DomainTuple [intDomain 1 3, DomainBool], ConstantAbstract $ AbsLitTuple [(ConstantInt NoTag) 2, ConstantBool True] )
>>>>>>> taggedints
                  ]
            low = [ ( "x_1"  , DomainBool   , ConstantBool False )
<<<<<<< HEAD
                  , ( "x_2_1", intDomain 1 3, ConstantInt Nothing 2      )
||||||| merged common ancestors
                  , ( "x_2_1", intDomain 1 3, ConstantInt 2      )
=======
                  , ( "x_2_1", intDomain 1 3, (ConstantInt NoTag) 2      )
>>>>>>> taggedints
                  , ( "x_2_2", DomainBool   , ConstantBool True  )
                  ]
        in  testCases "x" highDomain highConstant Just mid low

    , testCase "(bool, int, bool, int)" $
        let
            highDomain = DomainTuple [DomainBool, intDomain 1 3, DomainBool, intDomain 2 5]
<<<<<<< HEAD
            highConstant = ConstantAbstract $ AbsLitTuple [ConstantBool False, ConstantInt Nothing 2, ConstantBool True, ConstantInt Nothing 4]
||||||| merged common ancestors
            highConstant = ConstantAbstract $ AbsLitTuple [ConstantBool False, ConstantInt 2, ConstantBool True, ConstantInt 4]
=======
            highConstant = ConstantAbstract $ AbsLitTuple [ConstantBool False, (ConstantInt NoTag) 2, ConstantBool True, (ConstantInt NoTag) 4]
>>>>>>> taggedints
            low = [ ( "x_1", DomainBool   , ConstantBool False )
<<<<<<< HEAD
                  , ( "x_2", intDomain 1 3, ConstantInt Nothing 2      )
||||||| merged common ancestors
                  , ( "x_2", intDomain 1 3, ConstantInt 2      )
=======
                  , ( "x_2", intDomain 1 3, (ConstantInt NoTag) 2      )
>>>>>>> taggedints
                  , ( "x_3", DomainBool   , ConstantBool True  )
<<<<<<< HEAD
                  , ( "x_4", intDomain 2 5, ConstantInt Nothing 4      )
||||||| merged common ancestors
                  , ( "x_4", intDomain 2 5, ConstantInt 4      )
=======
                  , ( "x_4", intDomain 2 5, (ConstantInt NoTag) 4      )
>>>>>>> taggedints
                  ]
        in  testCases "x" highDomain highConstant Just low low

    , testCase "((bool, int), (bool, int))" $
        let
            highDomain = DomainTuple [DomainTuple [DomainBool, intDomain 1 3], DomainTuple [DomainBool, intDomain 2 5]]
<<<<<<< HEAD
            highConstant = ConstantAbstract $ AbsLitTuple [ConstantAbstract $ AbsLitTuple [ConstantBool False, ConstantInt Nothing 2], ConstantAbstract $ AbsLitTuple [ConstantBool True, ConstantInt Nothing 4]]
            mid = [ ( "x_1", DomainTuple [DomainBool, intDomain 1 3], ConstantAbstract $ AbsLitTuple [ConstantBool False, ConstantInt Nothing 2] )
                  , ( "x_2", DomainTuple [DomainBool, intDomain 2 5], ConstantAbstract $ AbsLitTuple [ConstantBool True , ConstantInt Nothing 4] )
||||||| merged common ancestors
            highConstant = ConstantAbstract $ AbsLitTuple [ConstantAbstract $ AbsLitTuple [ConstantBool False, ConstantInt 2], ConstantAbstract $ AbsLitTuple [ConstantBool True, ConstantInt 4]]
            mid = [ ( "x_1", DomainTuple [DomainBool, intDomain 1 3], ConstantAbstract $ AbsLitTuple [ConstantBool False, ConstantInt 2] )
                  , ( "x_2", DomainTuple [DomainBool, intDomain 2 5], ConstantAbstract $ AbsLitTuple [ConstantBool True , ConstantInt 4] )
=======
            highConstant = ConstantAbstract $ AbsLitTuple [ConstantAbstract $ AbsLitTuple [ConstantBool False, (ConstantInt NoTag) 2], ConstantAbstract $ AbsLitTuple [ConstantBool True, (ConstantInt NoTag) 4]]
            mid = [ ( "x_1", DomainTuple [DomainBool, intDomain 1 3], ConstantAbstract $ AbsLitTuple [ConstantBool False, (ConstantInt NoTag) 2] )
                  , ( "x_2", DomainTuple [DomainBool, intDomain 2 5], ConstantAbstract $ AbsLitTuple [ConstantBool True , (ConstantInt NoTag) 4] )
>>>>>>> taggedints
                  ]
            low = [ ( "x_1_1", DomainBool   , ConstantBool False )
<<<<<<< HEAD
                  , ( "x_1_2", intDomain 1 3, ConstantInt Nothing 2      )
||||||| merged common ancestors
                  , ( "x_1_2", intDomain 1 3, ConstantInt 2      )
=======
                  , ( "x_1_2", intDomain 1 3, (ConstantInt NoTag) 2      )
>>>>>>> taggedints
                  , ( "x_2_1", DomainBool   , ConstantBool True  )
<<<<<<< HEAD
                  , ( "x_2_2", intDomain 2 5, ConstantInt Nothing 4      )
||||||| merged common ancestors
                  , ( "x_2_2", intDomain 2 5, ConstantInt 4      )
=======
                  , ( "x_2_2", intDomain 2 5, (ConstantInt NoTag) 4      )
>>>>>>> taggedints
                  ]
        in  testCases "x" highDomain highConstant Just mid low

    , testCase "(bool, (int, (bool, int)))" $
        let
            highDomain = DomainTuple [DomainBool, DomainTuple [intDomain 1 3, DomainTuple [DomainBool, intDomain 2 5]]]
<<<<<<< HEAD
            highConstant = ConstantAbstract $ AbsLitTuple [ConstantBool False, ConstantAbstract $ AbsLitTuple [ConstantInt Nothing 2, ConstantAbstract $ AbsLitTuple [ConstantBool True, ConstantInt Nothing 4]]]
||||||| merged common ancestors
            highConstant = ConstantAbstract $ AbsLitTuple [ConstantBool False, ConstantAbstract $ AbsLitTuple [ConstantInt 2, ConstantAbstract $ AbsLitTuple [ConstantBool True, ConstantInt 4]]]
=======
            highConstant = ConstantAbstract $ AbsLitTuple [ConstantBool False, ConstantAbstract $ AbsLitTuple [(ConstantInt NoTag) 2, ConstantAbstract $ AbsLitTuple [ConstantBool True, (ConstantInt NoTag) 4]]]
>>>>>>> taggedints
            mid = [ ( "x_1", DomainBool   , ConstantBool False )
                  , ( "x_2", DomainTuple [intDomain 1 3, DomainTuple [DomainBool, intDomain 2 5]]
<<<<<<< HEAD
                           , ConstantAbstract $ AbsLitTuple [ConstantInt Nothing 2, ConstantAbstract $ AbsLitTuple [ConstantBool True, ConstantInt Nothing 4]] )
||||||| merged common ancestors
                           , ConstantAbstract $ AbsLitTuple [ConstantInt 2, ConstantAbstract $ AbsLitTuple [ConstantBool True, ConstantInt 4]] )
=======
                           , ConstantAbstract $ AbsLitTuple [(ConstantInt NoTag) 2, ConstantAbstract $ AbsLitTuple [ConstantBool True, (ConstantInt NoTag) 4]] )
>>>>>>> taggedints
                  ]
            low = [ ( "x_1"    , DomainBool   , ConstantBool False )
<<<<<<< HEAD
                  , ( "x_2_1"  , intDomain 1 3, ConstantInt Nothing 2      )
||||||| merged common ancestors
                  , ( "x_2_1"  , intDomain 1 3, ConstantInt 2      )
=======
                  , ( "x_2_1"  , intDomain 1 3, (ConstantInt NoTag) 2      )
>>>>>>> taggedints
                  , ( "x_2_2_1", DomainBool   , ConstantBool True  )
<<<<<<< HEAD
                  , ( "x_2_2_2", intDomain 2 5, ConstantInt Nothing 4      )
||||||| merged common ancestors
                  , ( "x_2_2_2", intDomain 2 5, ConstantInt 4      )
=======
                  , ( "x_2_2_2", intDomain 2 5, (ConstantInt NoTag) 4      )
>>>>>>> taggedints
                  ]
        in  testCases "x" highDomain highConstant Just mid low

    , testCase "(bool, (int, bool), int)" $
        let
            highDomain = DomainTuple [DomainBool, DomainTuple [intDomain 1 3, DomainBool], intDomain 2 5]
<<<<<<< HEAD
            highConstant = ConstantAbstract $ AbsLitTuple [ConstantBool False, ConstantAbstract $ AbsLitTuple [ConstantInt Nothing 2, ConstantBool True], ConstantInt Nothing 4]
||||||| merged common ancestors
            highConstant = ConstantAbstract $ AbsLitTuple [ConstantBool False, ConstantAbstract $ AbsLitTuple [ConstantInt 2, ConstantBool True], ConstantInt 4]
=======
            highConstant = ConstantAbstract $ AbsLitTuple [ConstantBool False, ConstantAbstract $ AbsLitTuple [(ConstantInt NoTag) 2, ConstantBool True], (ConstantInt NoTag) 4]
>>>>>>> taggedints
            mid = [ ( "x_1", DomainBool   , ConstantBool False )
<<<<<<< HEAD
                  , ( "x_2", DomainTuple [intDomain 1 3, DomainBool], ConstantAbstract $ AbsLitTuple [ConstantInt Nothing 2, ConstantBool True] )
                  , ( "x_3", intDomain 2 5, ConstantInt Nothing 4 )
||||||| merged common ancestors
                  , ( "x_2", DomainTuple [intDomain 1 3, DomainBool], ConstantAbstract $ AbsLitTuple [ConstantInt 2, ConstantBool True] )
                  , ( "x_3", intDomain 2 5, ConstantInt 4 )
=======
                  , ( "x_2", DomainTuple [intDomain 1 3, DomainBool], ConstantAbstract $ AbsLitTuple [(ConstantInt NoTag) 2, ConstantBool True] )
                  , ( "x_3", intDomain 2 5, (ConstantInt NoTag) 4 )
>>>>>>> taggedints
                  ]
            low = [ ( "x_1"  , DomainBool   , ConstantBool False )
<<<<<<< HEAD
                  , ( "x_2_1", intDomain 1 3, ConstantInt Nothing 2      )
||||||| merged common ancestors
                  , ( "x_2_1", intDomain 1 3, ConstantInt 2      )
=======
                  , ( "x_2_1", intDomain 1 3, (ConstantInt NoTag) 2      )
>>>>>>> taggedints
                  , ( "x_2_2", DomainBool   , ConstantBool True  )
<<<<<<< HEAD
                  , ( "x_3"  , intDomain 2 5, ConstantInt Nothing 4      )
||||||| merged common ancestors
                  , ( "x_3"  , intDomain 2 5, ConstantInt 4      )
=======
                  , ( "x_3"  , intDomain 2 5, (ConstantInt NoTag) 4      )
>>>>>>> taggedints
                  ]
        in  testCases "x" highDomain highConstant Just mid low

    , testCase "(((bool, int), bool), int)" $
        let
            highDomain = DomainTuple [DomainTuple [ DomainTuple [DomainBool, intDomain 1 3], DomainBool], intDomain 2 5]
<<<<<<< HEAD
            highConstant = ConstantAbstract $ AbsLitTuple [ConstantAbstract $ AbsLitTuple [ ConstantAbstract $ AbsLitTuple [ConstantBool False, ConstantInt Nothing 2], ConstantBool True], ConstantInt Nothing 4]
||||||| merged common ancestors
            highConstant = ConstantAbstract $ AbsLitTuple [ConstantAbstract $ AbsLitTuple [ ConstantAbstract $ AbsLitTuple [ConstantBool False, ConstantInt 2], ConstantBool True], ConstantInt 4]
=======
            highConstant = ConstantAbstract $ AbsLitTuple [ConstantAbstract $ AbsLitTuple [ ConstantAbstract $ AbsLitTuple [ConstantBool False, (ConstantInt NoTag) 2], ConstantBool True], (ConstantInt NoTag) 4]
>>>>>>> taggedints
            mid = [ ( "x_1", DomainTuple [ DomainTuple [DomainBool, intDomain 1 3], DomainBool]
<<<<<<< HEAD
                           , ConstantAbstract $ AbsLitTuple [ ConstantAbstract $ AbsLitTuple [ConstantBool False, ConstantInt Nothing 2], ConstantBool True] )
                  , ( "x_2", intDomain 2 5, ConstantInt Nothing 4 )
||||||| merged common ancestors
                           , ConstantAbstract $ AbsLitTuple [ ConstantAbstract $ AbsLitTuple [ConstantBool False, ConstantInt 2], ConstantBool True] )
                  , ( "x_2", intDomain 2 5, ConstantInt 4 )
=======
                           , ConstantAbstract $ AbsLitTuple [ ConstantAbstract $ AbsLitTuple [ConstantBool False, (ConstantInt NoTag) 2], ConstantBool True] )
                  , ( "x_2", intDomain 2 5, (ConstantInt NoTag) 4 )
>>>>>>> taggedints
                  ]
            low = [ ( "x_1_1_1", DomainBool   , ConstantBool False )
<<<<<<< HEAD
                  , ( "x_1_1_2", intDomain 1 3, ConstantInt Nothing 2      )
||||||| merged common ancestors
                  , ( "x_1_1_2", intDomain 1 3, ConstantInt 2      )
=======
                  , ( "x_1_1_2", intDomain 1 3, (ConstantInt NoTag) 2      )
>>>>>>> taggedints
                  , ( "x_1_2"  , DomainBool   , ConstantBool True  )
<<<<<<< HEAD
                  , ( "x_2"    , intDomain 2 5, ConstantInt Nothing 4      )
||||||| merged common ancestors
                  , ( "x_2"    , intDomain 2 5, ConstantInt 4      )
=======
                  , ( "x_2"    , intDomain 2 5, (ConstantInt NoTag) 4      )
>>>>>>> taggedints
                  ]
        in  testCases "x" highDomain highConstant Just mid low

    , testCase "matrix of (bool, int)" $
        let
            highDomain =
                DomainMatrix (intDomain 1 3) (DomainTuple [DomainBool, intDomain 0 9])
            highConstant =
                ConstantAbstract $ AbsLitMatrix (intDomain 1 3)
<<<<<<< HEAD
                    [ ConstantAbstract $ AbsLitTuple [ConstantBool False, ConstantInt Nothing 0]
                    , ConstantAbstract $ AbsLitTuple [ConstantBool True , ConstantInt Nothing 3]
                    , ConstantAbstract $ AbsLitTuple [ConstantBool False, ConstantInt Nothing 4]
||||||| merged common ancestors
                    [ ConstantAbstract $ AbsLitTuple [ConstantBool False, ConstantInt 0]
                    , ConstantAbstract $ AbsLitTuple [ConstantBool True , ConstantInt 3]
                    , ConstantAbstract $ AbsLitTuple [ConstantBool False, ConstantInt 4]
=======
                    [ ConstantAbstract $ AbsLitTuple [ConstantBool False, (ConstantInt NoTag) 0]
                    , ConstantAbstract $ AbsLitTuple [ConstantBool True , (ConstantInt NoTag) 3]
                    , ConstantAbstract $ AbsLitTuple [ConstantBool False, (ConstantInt NoTag) 4]
>>>>>>> taggedints
                    ]
            low = [ ( "x_1", DomainMatrix (intDomain 1 3) DomainBool
                           , ConstantAbstract $ AbsLitMatrix (intDomain 1 3) [ConstantBool False, ConstantBool True, ConstantBool False] )
                  , ( "x_2", DomainMatrix (intDomain 1 3) (intDomain 0 9)
<<<<<<< HEAD
                           , ConstantAbstract $ AbsLitMatrix (intDomain 1 3) [ConstantInt Nothing 0, ConstantInt Nothing 3, ConstantInt Nothing 4] )
||||||| merged common ancestors
                           , ConstantAbstract $ AbsLitMatrix (intDomain 1 3) [ConstantInt 0, ConstantInt 3, ConstantInt 4] )
=======
                           , ConstantAbstract $ AbsLitMatrix (intDomain 1 3) [(ConstantInt NoTag) 0, (ConstantInt NoTag) 3, (ConstantInt NoTag) 4] )
>>>>>>> taggedints
                  ]
        in  testCases "x" highDomain highConstant Just low low

    , testCase "matrix of (bool, int, bool)" $
        let
            highDomain = DomainMatrix (intDomain 1 3) (DomainTuple [DomainBool, intDomain 1 3, DomainBool])
            highConstant =
                ConstantAbstract $ AbsLitMatrix (intDomain 1 3)
<<<<<<< HEAD
                    [ ConstantAbstract $ AbsLitTuple [ConstantBool False, ConstantInt Nothing 2, ConstantBool True]
                    , ConstantAbstract $ AbsLitTuple [ConstantBool False, ConstantInt Nothing 3, ConstantBool False]
                    , ConstantAbstract $ AbsLitTuple [ConstantBool False, ConstantInt Nothing 4, ConstantBool False]
||||||| merged common ancestors
                    [ ConstantAbstract $ AbsLitTuple [ConstantBool False, ConstantInt 2, ConstantBool True]
                    , ConstantAbstract $ AbsLitTuple [ConstantBool False, ConstantInt 3, ConstantBool False]
                    , ConstantAbstract $ AbsLitTuple [ConstantBool False, ConstantInt 4, ConstantBool False]
=======
                    [ ConstantAbstract $ AbsLitTuple [ConstantBool False, (ConstantInt NoTag) 2, ConstantBool True]
                    , ConstantAbstract $ AbsLitTuple [ConstantBool False, (ConstantInt NoTag) 3, ConstantBool False]
                    , ConstantAbstract $ AbsLitTuple [ConstantBool False, (ConstantInt NoTag) 4, ConstantBool False]
>>>>>>> taggedints
                    ]
            low = [ ( "x_1", DomainMatrix (intDomain 1 3) DomainBool     , ConstantAbstract $ AbsLitMatrix (intDomain 1 3) [ConstantBool False, ConstantBool False, ConstantBool False] )
<<<<<<< HEAD
                  , ( "x_2", DomainMatrix (intDomain 1 3) (intDomain 1 3), ConstantAbstract $ AbsLitMatrix (intDomain 1 3) [ConstantInt Nothing 2     , ConstantInt Nothing 3     , ConstantInt Nothing 4     ] )
||||||| merged common ancestors
                  , ( "x_2", DomainMatrix (intDomain 1 3) (intDomain 1 3), ConstantAbstract $ AbsLitMatrix (intDomain 1 3) [ConstantInt 2     , ConstantInt 3     , ConstantInt 4     ] )
=======
                  , ( "x_2", DomainMatrix (intDomain 1 3) (intDomain 1 3), ConstantAbstract $ AbsLitMatrix (intDomain 1 3) [(ConstantInt NoTag) 2     , (ConstantInt NoTag) 3     , (ConstantInt NoTag) 4     ] )
>>>>>>> taggedints
                  , ( "x_3", DomainMatrix (intDomain 1 3) DomainBool     , ConstantAbstract $ AbsLitMatrix (intDomain 1 3) [ConstantBool True , ConstantBool False, ConstantBool False] )
                  ]
        in  testCases "x" highDomain highConstant Just low low

    , testCase "matrix of ((bool, int), bool)" $
        let
            highDomain = DomainMatrix (intDomain 1 3) (DomainTuple [DomainTuple [DomainBool, intDomain 1 3], DomainBool])
            highConstant =
                ConstantAbstract $ AbsLitMatrix (intDomain 1 3)
<<<<<<< HEAD
                    [ ConstantAbstract $ AbsLitTuple [ConstantAbstract $ AbsLitTuple [ConstantBool False, ConstantInt Nothing 2], ConstantBool True]
                    , ConstantAbstract $ AbsLitTuple [ConstantAbstract $ AbsLitTuple [ConstantBool False, ConstantInt Nothing 3], ConstantBool False]
                    , ConstantAbstract $ AbsLitTuple [ConstantAbstract $ AbsLitTuple [ConstantBool True , ConstantInt Nothing 4], ConstantBool False]
||||||| merged common ancestors
                    [ ConstantAbstract $ AbsLitTuple [ConstantAbstract $ AbsLitTuple [ConstantBool False, ConstantInt 2], ConstantBool True]
                    , ConstantAbstract $ AbsLitTuple [ConstantAbstract $ AbsLitTuple [ConstantBool False, ConstantInt 3], ConstantBool False]
                    , ConstantAbstract $ AbsLitTuple [ConstantAbstract $ AbsLitTuple [ConstantBool True , ConstantInt 4], ConstantBool False]
=======
                    [ ConstantAbstract $ AbsLitTuple [ConstantAbstract $ AbsLitTuple [ConstantBool False, (ConstantInt NoTag) 2], ConstantBool True]
                    , ConstantAbstract $ AbsLitTuple [ConstantAbstract $ AbsLitTuple [ConstantBool False, (ConstantInt NoTag) 3], ConstantBool False]
                    , ConstantAbstract $ AbsLitTuple [ConstantAbstract $ AbsLitTuple [ConstantBool True , (ConstantInt NoTag) 4], ConstantBool False]
>>>>>>> taggedints
                    ]
            mid = [ ( "x_1", DomainMatrix   (intDomain 1 3) (DomainTuple [DomainBool, intDomain 1 3])
                           , ConstantAbstract $ AbsLitMatrix (intDomain 1 3)
<<<<<<< HEAD
                                [ ConstantAbstract $ AbsLitTuple [ConstantBool False, ConstantInt Nothing 2]
                                , ConstantAbstract $ AbsLitTuple [ConstantBool False, ConstantInt Nothing 3]
                                , ConstantAbstract $ AbsLitTuple [ConstantBool True , ConstantInt Nothing 4]
||||||| merged common ancestors
                                [ ConstantAbstract $ AbsLitTuple [ConstantBool False, ConstantInt 2]
                                , ConstantAbstract $ AbsLitTuple [ConstantBool False, ConstantInt 3]
                                , ConstantAbstract $ AbsLitTuple [ConstantBool True , ConstantInt 4]
=======
                                [ ConstantAbstract $ AbsLitTuple [ConstantBool False, (ConstantInt NoTag) 2]
                                , ConstantAbstract $ AbsLitTuple [ConstantBool False, (ConstantInt NoTag) 3]
                                , ConstantAbstract $ AbsLitTuple [ConstantBool True , (ConstantInt NoTag) 4]
>>>>>>> taggedints
                                ] )
                  , ( "x_2", DomainMatrix   (intDomain 1 3) DomainBool
                           , ConstantAbstract $ AbsLitMatrix (intDomain 1 3) [ConstantBool True , ConstantBool False, ConstantBool False] )
                  ]
            low = [ ( "x_1_1", DomainMatrix (intDomain 1 3) DomainBool     , ConstantAbstract $ AbsLitMatrix (intDomain 1 3) [ConstantBool False, ConstantBool False, ConstantBool True ] )
<<<<<<< HEAD
                  , ( "x_1_2", DomainMatrix (intDomain 1 3) (intDomain 1 3), ConstantAbstract $ AbsLitMatrix (intDomain 1 3) [ConstantInt Nothing 2     , ConstantInt Nothing 3     , ConstantInt Nothing 4     ] )
||||||| merged common ancestors
                  , ( "x_1_2", DomainMatrix (intDomain 1 3) (intDomain 1 3), ConstantAbstract $ AbsLitMatrix (intDomain 1 3) [ConstantInt 2     , ConstantInt 3     , ConstantInt 4     ] )
=======
                  , ( "x_1_2", DomainMatrix (intDomain 1 3) (intDomain 1 3), ConstantAbstract $ AbsLitMatrix (intDomain 1 3) [(ConstantInt NoTag) 2     , (ConstantInt NoTag) 3     , (ConstantInt NoTag) 4     ] )
>>>>>>> taggedints
                  , ( "x_2"  , DomainMatrix (intDomain 1 3) DomainBool     , ConstantAbstract $ AbsLitMatrix (intDomain 1 3) [ConstantBool True , ConstantBool False, ConstantBool False] )
                  ]
        in  testCases "x" highDomain highConstant Just mid low

    , testCase "matrix of (bool, (int, bool))" $
        let
            highDomain = DomainMatrix (intDomain 1 3) (DomainTuple [DomainBool, DomainTuple [intDomain 0 9, DomainBool]])
            highConstant =
                ConstantAbstract $ AbsLitMatrix (intDomain 1 3)
<<<<<<< HEAD
                    [ ConstantAbstract $ AbsLitTuple [ConstantBool False, ConstantAbstract $ AbsLitTuple [ConstantInt Nothing 0, ConstantBool True]]
                    , ConstantAbstract $ AbsLitTuple [ConstantBool True , ConstantAbstract $ AbsLitTuple [ConstantInt Nothing 3, ConstantBool False]]
                    , ConstantAbstract $ AbsLitTuple [ConstantBool False, ConstantAbstract $ AbsLitTuple [ConstantInt Nothing 4, ConstantBool True]]
||||||| merged common ancestors
                    [ ConstantAbstract $ AbsLitTuple [ConstantBool False, ConstantAbstract $ AbsLitTuple [ConstantInt 0, ConstantBool True]]
                    , ConstantAbstract $ AbsLitTuple [ConstantBool True , ConstantAbstract $ AbsLitTuple [ConstantInt 3, ConstantBool False]]
                    , ConstantAbstract $ AbsLitTuple [ConstantBool False, ConstantAbstract $ AbsLitTuple [ConstantInt 4, ConstantBool True]]
=======
                    [ ConstantAbstract $ AbsLitTuple [ConstantBool False, ConstantAbstract $ AbsLitTuple [(ConstantInt NoTag) 0, ConstantBool True]]
                    , ConstantAbstract $ AbsLitTuple [ConstantBool True , ConstantAbstract $ AbsLitTuple [(ConstantInt NoTag) 3, ConstantBool False]]
                    , ConstantAbstract $ AbsLitTuple [ConstantBool False, ConstantAbstract $ AbsLitTuple [(ConstantInt NoTag) 4, ConstantBool True]]
>>>>>>> taggedints
                    ]
            mid = [ ( "x_1", DomainMatrix (intDomain 1 3) DomainBool
                           , ConstantAbstract $ AbsLitMatrix (intDomain 1 3) [ConstantBool False, ConstantBool True, ConstantBool False] )
                  , ( "x_2", DomainMatrix (intDomain 1 3) (DomainTuple [intDomain 0 9, DomainBool])
                           , ConstantAbstract $ AbsLitMatrix (intDomain 1 3)
<<<<<<< HEAD
                               [ ConstantAbstract $ AbsLitTuple [ConstantInt Nothing 0, ConstantBool True]
                               , ConstantAbstract $ AbsLitTuple [ConstantInt Nothing 3, ConstantBool False]
                               , ConstantAbstract $ AbsLitTuple [ConstantInt Nothing 4, ConstantBool True]
||||||| merged common ancestors
                               [ ConstantAbstract $ AbsLitTuple [ConstantInt 0, ConstantBool True]
                               , ConstantAbstract $ AbsLitTuple [ConstantInt 3, ConstantBool False]
                               , ConstantAbstract $ AbsLitTuple [ConstantInt 4, ConstantBool True]
=======
                               [ ConstantAbstract $ AbsLitTuple [(ConstantInt NoTag) 0, ConstantBool True]
                               , ConstantAbstract $ AbsLitTuple [(ConstantInt NoTag) 3, ConstantBool False]
                               , ConstantAbstract $ AbsLitTuple [(ConstantInt NoTag) 4, ConstantBool True]
>>>>>>> taggedints
                               ] )
                  ]
            low = [ ( "x_1"  , DomainMatrix (intDomain 1 3) DomainBool
                             , ConstantAbstract $ AbsLitMatrix (intDomain 1 3) [ConstantBool False, ConstantBool True, ConstantBool False] )
                  , ( "x_2_1", DomainMatrix (intDomain 1 3) (intDomain 0 9)
<<<<<<< HEAD
                             , ConstantAbstract $ AbsLitMatrix (intDomain 1 3) [ConstantInt Nothing 0, ConstantInt Nothing 3, ConstantInt Nothing 4] )
||||||| merged common ancestors
                             , ConstantAbstract $ AbsLitMatrix (intDomain 1 3) [ConstantInt 0, ConstantInt 3, ConstantInt 4] )
=======
                             , ConstantAbstract $ AbsLitMatrix (intDomain 1 3) [(ConstantInt NoTag) 0, (ConstantInt NoTag) 3, (ConstantInt NoTag) 4] )
>>>>>>> taggedints
                  , ( "x_2_2", DomainMatrix (intDomain 1 3) DomainBool
                             , ConstantAbstract $ AbsLitMatrix (intDomain 1 3) [ConstantBool True, ConstantBool False, ConstantBool True] )
                  ]
        in  testCases "x" highDomain highConstant Just mid low

    , testCase "matrix of (bool, int, bool, int)" $
        let
            highDomain = DomainMatrix (intDomain 1 3) (DomainTuple [DomainBool, intDomain 1 3, DomainBool, intDomain 2 5])
            highConstant =
                ConstantAbstract $ AbsLitMatrix (intDomain 1 3)
<<<<<<< HEAD
                    [ ConstantAbstract $ AbsLitTuple [ConstantBool False, ConstantInt Nothing 2, ConstantBool True , ConstantInt Nothing 4]
                    , ConstantAbstract $ AbsLitTuple [ConstantBool False, ConstantInt Nothing 3, ConstantBool False, ConstantInt Nothing 6]
                    , ConstantAbstract $ AbsLitTuple [ConstantBool True , ConstantInt Nothing 4, ConstantBool False, ConstantInt Nothing 8]
||||||| merged common ancestors
                    [ ConstantAbstract $ AbsLitTuple [ConstantBool False, ConstantInt 2, ConstantBool True , ConstantInt 4]
                    , ConstantAbstract $ AbsLitTuple [ConstantBool False, ConstantInt 3, ConstantBool False, ConstantInt 6]
                    , ConstantAbstract $ AbsLitTuple [ConstantBool True , ConstantInt 4, ConstantBool False, ConstantInt 8]
=======
                    [ ConstantAbstract $ AbsLitTuple [ConstantBool False, (ConstantInt NoTag) 2, ConstantBool True , (ConstantInt NoTag) 4]
                    , ConstantAbstract $ AbsLitTuple [ConstantBool False, (ConstantInt NoTag) 3, ConstantBool False, (ConstantInt NoTag) 6]
                    , ConstantAbstract $ AbsLitTuple [ConstantBool True , (ConstantInt NoTag) 4, ConstantBool False, (ConstantInt NoTag) 8]
>>>>>>> taggedints
                    ]
            low = [ ( "x_1", DomainMatrix (intDomain 1 3) DomainBool , ConstantAbstract $ AbsLitMatrix (intDomain 1 3) [ConstantBool False, ConstantBool False, ConstantBool True ] )
<<<<<<< HEAD
                  , ( "x_2", DomainMatrix (intDomain 1 3) (intDomain 1 3), ConstantAbstract $ AbsLitMatrix (intDomain 1 3) [ConstantInt Nothing 2     , ConstantInt Nothing 3     , ConstantInt Nothing 4     ] )
||||||| merged common ancestors
                  , ( "x_2", DomainMatrix (intDomain 1 3) (intDomain 1 3), ConstantAbstract $ AbsLitMatrix (intDomain 1 3) [ConstantInt 2     , ConstantInt 3     , ConstantInt 4     ] )
=======
                  , ( "x_2", DomainMatrix (intDomain 1 3) (intDomain 1 3), ConstantAbstract $ AbsLitMatrix (intDomain 1 3) [(ConstantInt NoTag) 2     , (ConstantInt NoTag) 3     , (ConstantInt NoTag) 4     ] )
>>>>>>> taggedints
                  , ( "x_3", DomainMatrix (intDomain 1 3) DomainBool     , ConstantAbstract $ AbsLitMatrix (intDomain 1 3) [ConstantBool True , ConstantBool False, ConstantBool False] )
<<<<<<< HEAD
                  , ( "x_4", DomainMatrix (intDomain 1 3) (intDomain 2 5), ConstantAbstract $ AbsLitMatrix (intDomain 1 3) [ConstantInt Nothing 4     , ConstantInt Nothing 6     , ConstantInt Nothing 8     ] )
||||||| merged common ancestors
                  , ( "x_4", DomainMatrix (intDomain 1 3) (intDomain 2 5), ConstantAbstract $ AbsLitMatrix (intDomain 1 3) [ConstantInt 4     , ConstantInt 6     , ConstantInt 8     ] )
=======
                  , ( "x_4", DomainMatrix (intDomain 1 3) (intDomain 2 5), ConstantAbstract $ AbsLitMatrix (intDomain 1 3) [(ConstantInt NoTag) 4     , (ConstantInt NoTag) 6     , (ConstantInt NoTag) 8     ] )
>>>>>>> taggedints
                  ]
        in  testCases "x" highDomain highConstant Just low low

    , testCase "matrix of ((bool, int), (bool, int))" $
        let
            highDomain = DomainMatrix (intDomain 1 3) (DomainTuple [DomainTuple [DomainBool, intDomain 1 3], DomainTuple [DomainBool, intDomain 2 5]])
            highConstant =
                ConstantAbstract $ AbsLitMatrix (intDomain 1 3)
<<<<<<< HEAD
                    [ ConstantAbstract $ AbsLitTuple [ConstantAbstract $ AbsLitTuple [ConstantBool False, ConstantInt Nothing 2], ConstantAbstract $ AbsLitTuple [ConstantBool True , ConstantInt Nothing 4]]
                    , ConstantAbstract $ AbsLitTuple [ConstantAbstract $ AbsLitTuple [ConstantBool False, ConstantInt Nothing 3], ConstantAbstract $ AbsLitTuple [ConstantBool False, ConstantInt Nothing 6]]
                    , ConstantAbstract $ AbsLitTuple [ConstantAbstract $ AbsLitTuple [ConstantBool True , ConstantInt Nothing 4], ConstantAbstract $ AbsLitTuple [ConstantBool False, ConstantInt Nothing 8]]
||||||| merged common ancestors
                    [ ConstantAbstract $ AbsLitTuple [ConstantAbstract $ AbsLitTuple [ConstantBool False, ConstantInt 2], ConstantAbstract $ AbsLitTuple [ConstantBool True , ConstantInt 4]]
                    , ConstantAbstract $ AbsLitTuple [ConstantAbstract $ AbsLitTuple [ConstantBool False, ConstantInt 3], ConstantAbstract $ AbsLitTuple [ConstantBool False, ConstantInt 6]]
                    , ConstantAbstract $ AbsLitTuple [ConstantAbstract $ AbsLitTuple [ConstantBool True , ConstantInt 4], ConstantAbstract $ AbsLitTuple [ConstantBool False, ConstantInt 8]]
=======
                    [ ConstantAbstract $ AbsLitTuple [ConstantAbstract $ AbsLitTuple [ConstantBool False, (ConstantInt NoTag) 2], ConstantAbstract $ AbsLitTuple [ConstantBool True , (ConstantInt NoTag) 4]]
                    , ConstantAbstract $ AbsLitTuple [ConstantAbstract $ AbsLitTuple [ConstantBool False, (ConstantInt NoTag) 3], ConstantAbstract $ AbsLitTuple [ConstantBool False, (ConstantInt NoTag) 6]]
                    , ConstantAbstract $ AbsLitTuple [ConstantAbstract $ AbsLitTuple [ConstantBool True , (ConstantInt NoTag) 4], ConstantAbstract $ AbsLitTuple [ConstantBool False, (ConstantInt NoTag) 8]]
>>>>>>> taggedints
                    ]
            mid = [ ( "x_1"
                    , DomainMatrix (intDomain 1 3) (DomainTuple [DomainBool, intDomain 1 3])
                    , ConstantAbstract $ AbsLitMatrix (intDomain 1 3)
<<<<<<< HEAD
                        [ ConstantAbstract $ AbsLitTuple [ConstantBool False, ConstantInt Nothing 2]
                        , ConstantAbstract $ AbsLitTuple [ConstantBool False, ConstantInt Nothing 3]
                        , ConstantAbstract $ AbsLitTuple [ConstantBool True , ConstantInt Nothing 4]
||||||| merged common ancestors
                        [ ConstantAbstract $ AbsLitTuple [ConstantBool False, ConstantInt 2]
                        , ConstantAbstract $ AbsLitTuple [ConstantBool False, ConstantInt 3]
                        , ConstantAbstract $ AbsLitTuple [ConstantBool True , ConstantInt 4]
=======
                        [ ConstantAbstract $ AbsLitTuple [ConstantBool False, (ConstantInt NoTag) 2]
                        , ConstantAbstract $ AbsLitTuple [ConstantBool False, (ConstantInt NoTag) 3]
                        , ConstantAbstract $ AbsLitTuple [ConstantBool True , (ConstantInt NoTag) 4]
>>>>>>> taggedints
                        ] )
                  , ( "x_2"
                    , DomainMatrix (intDomain 1 3) (DomainTuple [DomainBool, intDomain 2 5])
                    , ConstantAbstract $ AbsLitMatrix (intDomain 1 3)
<<<<<<< HEAD
                        [ ConstantAbstract $ AbsLitTuple [ConstantBool True , ConstantInt Nothing 4]
                        , ConstantAbstract $ AbsLitTuple [ConstantBool False, ConstantInt Nothing 6]
                        , ConstantAbstract $ AbsLitTuple [ConstantBool False, ConstantInt Nothing 8]
||||||| merged common ancestors
                        [ ConstantAbstract $ AbsLitTuple [ConstantBool True , ConstantInt 4]
                        , ConstantAbstract $ AbsLitTuple [ConstantBool False, ConstantInt 6]
                        , ConstantAbstract $ AbsLitTuple [ConstantBool False, ConstantInt 8]
=======
                        [ ConstantAbstract $ AbsLitTuple [ConstantBool True , (ConstantInt NoTag) 4]
                        , ConstantAbstract $ AbsLitTuple [ConstantBool False, (ConstantInt NoTag) 6]
                        , ConstantAbstract $ AbsLitTuple [ConstantBool False, (ConstantInt NoTag) 8]
>>>>>>> taggedints
                        ] )
                  ]
            low = [ ( "x_1_1", DomainMatrix   (intDomain 1 3) DomainBool
                             , ConstantAbstract $ AbsLitMatrix (intDomain 1 3) [ConstantBool False, ConstantBool False, ConstantBool True ] )
                  , ( "x_1_2", DomainMatrix   (intDomain 1 3) (intDomain 1 3)
<<<<<<< HEAD
                             , ConstantAbstract $ AbsLitMatrix (intDomain 1 3) [ConstantInt Nothing 2     , ConstantInt Nothing 3     , ConstantInt Nothing 4     ] )
||||||| merged common ancestors
                             , ConstantAbstract $ AbsLitMatrix (intDomain 1 3) [ConstantInt 2     , ConstantInt 3     , ConstantInt 4     ] )
=======
                             , ConstantAbstract $ AbsLitMatrix (intDomain 1 3) [(ConstantInt NoTag) 2     , (ConstantInt NoTag) 3     , (ConstantInt NoTag) 4     ] )
>>>>>>> taggedints
                  , ( "x_2_1", DomainMatrix   (intDomain 1 3) DomainBool
                             , ConstantAbstract $ AbsLitMatrix (intDomain 1 3) [ConstantBool True , ConstantBool False, ConstantBool False] )
                  , ( "x_2_2", DomainMatrix   (intDomain 1 3) (intDomain 2 5)
<<<<<<< HEAD
                             , ConstantAbstract $ AbsLitMatrix (intDomain 1 3) [ConstantInt Nothing 4     , ConstantInt Nothing 6     , ConstantInt Nothing 8     ] )
||||||| merged common ancestors
                             , ConstantAbstract $ AbsLitMatrix (intDomain 1 3) [ConstantInt 4     , ConstantInt 6     , ConstantInt 8     ] )
=======
                             , ConstantAbstract $ AbsLitMatrix (intDomain 1 3) [(ConstantInt NoTag) 4     , (ConstantInt NoTag) 6     , (ConstantInt NoTag) 8     ] )
>>>>>>> taggedints
                  ]
        in  testCases "x" highDomain highConstant Just mid low

    , testCase "matrix of (bool, (int, (bool, int)))" $
        let
            highDomain = DomainMatrix (intDomain 1 3) (DomainTuple [DomainBool, DomainTuple [intDomain 1 3, DomainTuple [DomainBool, intDomain 2 5]]])
            highConstant =
                ConstantAbstract $ AbsLitMatrix (intDomain 1 3)
<<<<<<< HEAD
                    [ ConstantAbstract $ AbsLitTuple [ConstantBool False, ConstantAbstract $ AbsLitTuple [ConstantInt Nothing 2, ConstantAbstract $ AbsLitTuple [ConstantBool True , ConstantInt Nothing 4]]]
                    , ConstantAbstract $ AbsLitTuple [ConstantBool False, ConstantAbstract $ AbsLitTuple [ConstantInt Nothing 3, ConstantAbstract $ AbsLitTuple [ConstantBool False, ConstantInt Nothing 6]]]
                    , ConstantAbstract $ AbsLitTuple [ConstantBool True , ConstantAbstract $ AbsLitTuple [ConstantInt Nothing 4, ConstantAbstract $ AbsLitTuple [ConstantBool False, ConstantInt Nothing 8]]]
||||||| merged common ancestors
                    [ ConstantAbstract $ AbsLitTuple [ConstantBool False, ConstantAbstract $ AbsLitTuple [ConstantInt 2, ConstantAbstract $ AbsLitTuple [ConstantBool True , ConstantInt 4]]]
                    , ConstantAbstract $ AbsLitTuple [ConstantBool False, ConstantAbstract $ AbsLitTuple [ConstantInt 3, ConstantAbstract $ AbsLitTuple [ConstantBool False, ConstantInt 6]]]
                    , ConstantAbstract $ AbsLitTuple [ConstantBool True , ConstantAbstract $ AbsLitTuple [ConstantInt 4, ConstantAbstract $ AbsLitTuple [ConstantBool False, ConstantInt 8]]]
=======
                    [ ConstantAbstract $ AbsLitTuple [ConstantBool False, ConstantAbstract $ AbsLitTuple [(ConstantInt NoTag) 2, ConstantAbstract $ AbsLitTuple [ConstantBool True , (ConstantInt NoTag) 4]]]
                    , ConstantAbstract $ AbsLitTuple [ConstantBool False, ConstantAbstract $ AbsLitTuple [(ConstantInt NoTag) 3, ConstantAbstract $ AbsLitTuple [ConstantBool False, (ConstantInt NoTag) 6]]]
                    , ConstantAbstract $ AbsLitTuple [ConstantBool True , ConstantAbstract $ AbsLitTuple [(ConstantInt NoTag) 4, ConstantAbstract $ AbsLitTuple [ConstantBool False, (ConstantInt NoTag) 8]]]
>>>>>>> taggedints
                    ]
            mid = [ ( "x_1", DomainMatrix   (intDomain 1 3) DomainBool
                           , ConstantAbstract $ AbsLitMatrix (intDomain 1 3) [ConstantBool False, ConstantBool False, ConstantBool True] )
                  , ( "x_2", DomainMatrix   (intDomain 1 3) (DomainTuple [intDomain 1 3, DomainTuple [DomainBool, intDomain 2 5]])
                           , ConstantAbstract $ AbsLitMatrix (intDomain 1 3)
<<<<<<< HEAD
                               [ ConstantAbstract $ AbsLitTuple [ConstantInt Nothing 2, ConstantAbstract $ AbsLitTuple [ConstantBool True , ConstantInt Nothing 4]]
                               , ConstantAbstract $ AbsLitTuple [ConstantInt Nothing 3, ConstantAbstract $ AbsLitTuple [ConstantBool False, ConstantInt Nothing 6]]
                               , ConstantAbstract $ AbsLitTuple [ConstantInt Nothing 4, ConstantAbstract $ AbsLitTuple [ConstantBool False, ConstantInt Nothing 8]]
||||||| merged common ancestors
                               [ ConstantAbstract $ AbsLitTuple [ConstantInt 2, ConstantAbstract $ AbsLitTuple [ConstantBool True , ConstantInt 4]]
                               , ConstantAbstract $ AbsLitTuple [ConstantInt 3, ConstantAbstract $ AbsLitTuple [ConstantBool False, ConstantInt 6]]
                               , ConstantAbstract $ AbsLitTuple [ConstantInt 4, ConstantAbstract $ AbsLitTuple [ConstantBool False, ConstantInt 8]]
=======
                               [ ConstantAbstract $ AbsLitTuple [(ConstantInt NoTag) 2, ConstantAbstract $ AbsLitTuple [ConstantBool True , (ConstantInt NoTag) 4]]
                               , ConstantAbstract $ AbsLitTuple [(ConstantInt NoTag) 3, ConstantAbstract $ AbsLitTuple [ConstantBool False, (ConstantInt NoTag) 6]]
                               , ConstantAbstract $ AbsLitTuple [(ConstantInt NoTag) 4, ConstantAbstract $ AbsLitTuple [ConstantBool False, (ConstantInt NoTag) 8]]
>>>>>>> taggedints
                               ] )
                  ]
            low = [ ( "x_1"    , DomainMatrix (intDomain 1 3) DomainBool     , ConstantAbstract $ AbsLitMatrix (intDomain 1 3) [ConstantBool False, ConstantBool False, ConstantBool True ])
<<<<<<< HEAD
                  , ( "x_2_1"  , DomainMatrix (intDomain 1 3) (intDomain 1 3), ConstantAbstract $ AbsLitMatrix (intDomain 1 3) [ConstantInt Nothing 2     , ConstantInt Nothing 3     , ConstantInt Nothing 4     ])
||||||| merged common ancestors
                  , ( "x_2_1"  , DomainMatrix (intDomain 1 3) (intDomain 1 3), ConstantAbstract $ AbsLitMatrix (intDomain 1 3) [ConstantInt 2     , ConstantInt 3     , ConstantInt 4     ])
=======
                  , ( "x_2_1"  , DomainMatrix (intDomain 1 3) (intDomain 1 3), ConstantAbstract $ AbsLitMatrix (intDomain 1 3) [(ConstantInt NoTag) 2     , (ConstantInt NoTag) 3     , (ConstantInt NoTag) 4     ])
>>>>>>> taggedints
                  , ( "x_2_2_1", DomainMatrix (intDomain 1 3) DomainBool     , ConstantAbstract $ AbsLitMatrix (intDomain 1 3) [ConstantBool True , ConstantBool False, ConstantBool False])
<<<<<<< HEAD
                  , ( "x_2_2_2", DomainMatrix (intDomain 1 3) (intDomain 2 5), ConstantAbstract $ AbsLitMatrix (intDomain 1 3) [ConstantInt Nothing 4     , ConstantInt Nothing 6     , ConstantInt Nothing 8     ])
||||||| merged common ancestors
                  , ( "x_2_2_2", DomainMatrix (intDomain 1 3) (intDomain 2 5), ConstantAbstract $ AbsLitMatrix (intDomain 1 3) [ConstantInt 4     , ConstantInt 6     , ConstantInt 8     ])
=======
                  , ( "x_2_2_2", DomainMatrix (intDomain 1 3) (intDomain 2 5), ConstantAbstract $ AbsLitMatrix (intDomain 1 3) [(ConstantInt NoTag) 4     , (ConstantInt NoTag) 6     , (ConstantInt NoTag) 8     ])
>>>>>>> taggedints
                  ]
        in  testCases "x" highDomain highConstant Just mid low

    , testCase "matrix of (bool, (int, bool), int)" $
        let
            highDomain = DomainMatrix (intDomain 1 3) (DomainTuple [DomainBool, DomainTuple [intDomain 1 3, DomainBool], intDomain 2 5])
            highConstant =
                ConstantAbstract $ AbsLitMatrix (intDomain 1 3)
<<<<<<< HEAD
                    [ ConstantAbstract $ AbsLitTuple [ConstantBool False, ConstantAbstract $ AbsLitTuple [ConstantInt Nothing 2, ConstantBool True ], ConstantInt Nothing 4]
                    , ConstantAbstract $ AbsLitTuple [ConstantBool False, ConstantAbstract $ AbsLitTuple [ConstantInt Nothing 3, ConstantBool False], ConstantInt Nothing 6]
                    , ConstantAbstract $ AbsLitTuple [ConstantBool True , ConstantAbstract $ AbsLitTuple [ConstantInt Nothing 4, ConstantBool False], ConstantInt Nothing 8]
||||||| merged common ancestors
                    [ ConstantAbstract $ AbsLitTuple [ConstantBool False, ConstantAbstract $ AbsLitTuple [ConstantInt 2, ConstantBool True ], ConstantInt 4]
                    , ConstantAbstract $ AbsLitTuple [ConstantBool False, ConstantAbstract $ AbsLitTuple [ConstantInt 3, ConstantBool False], ConstantInt 6]
                    , ConstantAbstract $ AbsLitTuple [ConstantBool True , ConstantAbstract $ AbsLitTuple [ConstantInt 4, ConstantBool False], ConstantInt 8]
=======
                    [ ConstantAbstract $ AbsLitTuple [ConstantBool False, ConstantAbstract $ AbsLitTuple [(ConstantInt NoTag) 2, ConstantBool True ], (ConstantInt NoTag) 4]
                    , ConstantAbstract $ AbsLitTuple [ConstantBool False, ConstantAbstract $ AbsLitTuple [(ConstantInt NoTag) 3, ConstantBool False], (ConstantInt NoTag) 6]
                    , ConstantAbstract $ AbsLitTuple [ConstantBool True , ConstantAbstract $ AbsLitTuple [(ConstantInt NoTag) 4, ConstantBool False], (ConstantInt NoTag) 8]
>>>>>>> taggedints
                    ]
            mid = [ ( "x_1", DomainMatrix   (intDomain 1 3) DomainBool
                           , ConstantAbstract $ AbsLitMatrix (intDomain 1 3) [ConstantBool False, ConstantBool False, ConstantBool True] )
                  , ( "x_2", DomainMatrix   (intDomain 1 3) (DomainTuple [intDomain 1 3, DomainBool])
                           , ConstantAbstract $ AbsLitMatrix (intDomain 1 3)
<<<<<<< HEAD
                               [ ConstantAbstract $ AbsLitTuple [ConstantInt Nothing 2, ConstantBool True ]
                               , ConstantAbstract $ AbsLitTuple [ConstantInt Nothing 3, ConstantBool False]
                               , ConstantAbstract $ AbsLitTuple [ConstantInt Nothing 4, ConstantBool False]
||||||| merged common ancestors
                               [ ConstantAbstract $ AbsLitTuple [ConstantInt 2, ConstantBool True ]
                               , ConstantAbstract $ AbsLitTuple [ConstantInt 3, ConstantBool False]
                               , ConstantAbstract $ AbsLitTuple [ConstantInt 4, ConstantBool False]
=======
                               [ ConstantAbstract $ AbsLitTuple [(ConstantInt NoTag) 2, ConstantBool True ]
                               , ConstantAbstract $ AbsLitTuple [(ConstantInt NoTag) 3, ConstantBool False]
                               , ConstantAbstract $ AbsLitTuple [(ConstantInt NoTag) 4, ConstantBool False]
>>>>>>> taggedints
                               ] )
                  , ( "x_3", DomainMatrix   (intDomain 1 3) (intDomain 2 5)
<<<<<<< HEAD
                           , ConstantAbstract $ AbsLitMatrix (intDomain 1 3) [ConstantInt Nothing 4, ConstantInt Nothing 6, ConstantInt Nothing 8]
||||||| merged common ancestors
                           , ConstantAbstract $ AbsLitMatrix (intDomain 1 3) [ConstantInt 4, ConstantInt 6, ConstantInt 8]
=======
                           , ConstantAbstract $ AbsLitMatrix (intDomain 1 3) [(ConstantInt NoTag) 4, (ConstantInt NoTag) 6, (ConstantInt NoTag) 8]
>>>>>>> taggedints
                           )
                  ]
            low = [ ( "x_1"  , DomainMatrix (intDomain 1 3) DomainBool     , ConstantAbstract $ AbsLitMatrix (intDomain 1 3) [ConstantBool False, ConstantBool False, ConstantBool True ])
<<<<<<< HEAD
                  , ( "x_2_1", DomainMatrix (intDomain 1 3) (intDomain 1 3), ConstantAbstract $ AbsLitMatrix (intDomain 1 3) [ConstantInt Nothing 2     , ConstantInt Nothing 3     , ConstantInt Nothing 4     ])
||||||| merged common ancestors
                  , ( "x_2_1", DomainMatrix (intDomain 1 3) (intDomain 1 3), ConstantAbstract $ AbsLitMatrix (intDomain 1 3) [ConstantInt 2     , ConstantInt 3     , ConstantInt 4     ])
=======
                  , ( "x_2_1", DomainMatrix (intDomain 1 3) (intDomain 1 3), ConstantAbstract $ AbsLitMatrix (intDomain 1 3) [(ConstantInt NoTag) 2     , (ConstantInt NoTag) 3     , (ConstantInt NoTag) 4     ])
>>>>>>> taggedints
                  , ( "x_2_2", DomainMatrix (intDomain 1 3) DomainBool     , ConstantAbstract $ AbsLitMatrix (intDomain 1 3) [ConstantBool True , ConstantBool False, ConstantBool False])
<<<<<<< HEAD
                  , ( "x_3"  , DomainMatrix (intDomain 1 3) (intDomain 2 5), ConstantAbstract $ AbsLitMatrix (intDomain 1 3) [ConstantInt Nothing 4     , ConstantInt Nothing 6     , ConstantInt Nothing 8     ])
||||||| merged common ancestors
                  , ( "x_3"  , DomainMatrix (intDomain 1 3) (intDomain 2 5), ConstantAbstract $ AbsLitMatrix (intDomain 1 3) [ConstantInt 4     , ConstantInt 6     , ConstantInt 8     ])
=======
                  , ( "x_3"  , DomainMatrix (intDomain 1 3) (intDomain 2 5), ConstantAbstract $ AbsLitMatrix (intDomain 1 3) [(ConstantInt NoTag) 4     , (ConstantInt NoTag) 6     , (ConstantInt NoTag) 8     ])
>>>>>>> taggedints
                  ]
        in  testCases "x" highDomain highConstant Just mid low

    , testCase "matrix of (((bool, int), bool), int)" $
        let
            highDomain = DomainMatrix (intDomain 1 3) (DomainTuple [DomainTuple [DomainTuple [DomainBool, intDomain 1 3], DomainBool], intDomain 2 5])
            highConstant =
                ConstantAbstract $ AbsLitMatrix (intDomain 1 3)
<<<<<<< HEAD
                    [ ConstantAbstract $ AbsLitTuple [ConstantAbstract $ AbsLitTuple [ConstantAbstract $ AbsLitTuple [ConstantBool False, ConstantInt Nothing 2], ConstantBool True ], ConstantInt Nothing 4]
                    , ConstantAbstract $ AbsLitTuple [ConstantAbstract $ AbsLitTuple [ConstantAbstract $ AbsLitTuple [ConstantBool False, ConstantInt Nothing 3], ConstantBool False], ConstantInt Nothing 6]
                    , ConstantAbstract $ AbsLitTuple [ConstantAbstract $ AbsLitTuple [ConstantAbstract $ AbsLitTuple [ConstantBool True , ConstantInt Nothing 4], ConstantBool False], ConstantInt Nothing 8]
||||||| merged common ancestors
                    [ ConstantAbstract $ AbsLitTuple [ConstantAbstract $ AbsLitTuple [ConstantAbstract $ AbsLitTuple [ConstantBool False, ConstantInt 2], ConstantBool True ], ConstantInt 4]
                    , ConstantAbstract $ AbsLitTuple [ConstantAbstract $ AbsLitTuple [ConstantAbstract $ AbsLitTuple [ConstantBool False, ConstantInt 3], ConstantBool False], ConstantInt 6]
                    , ConstantAbstract $ AbsLitTuple [ConstantAbstract $ AbsLitTuple [ConstantAbstract $ AbsLitTuple [ConstantBool True , ConstantInt 4], ConstantBool False], ConstantInt 8]
=======
                    [ ConstantAbstract $ AbsLitTuple [ConstantAbstract $ AbsLitTuple [ConstantAbstract $ AbsLitTuple [ConstantBool False, (ConstantInt NoTag) 2], ConstantBool True ], (ConstantInt NoTag) 4]
                    , ConstantAbstract $ AbsLitTuple [ConstantAbstract $ AbsLitTuple [ConstantAbstract $ AbsLitTuple [ConstantBool False, (ConstantInt NoTag) 3], ConstantBool False], (ConstantInt NoTag) 6]
                    , ConstantAbstract $ AbsLitTuple [ConstantAbstract $ AbsLitTuple [ConstantAbstract $ AbsLitTuple [ConstantBool True , (ConstantInt NoTag) 4], ConstantBool False], (ConstantInt NoTag) 8]
>>>>>>> taggedints
                    ]
            mid = [ ( "x_1", DomainMatrix   (intDomain 1 3) (DomainTuple [DomainTuple [DomainBool,intDomain 1 3],DomainBool])
                           , ConstantAbstract $ AbsLitMatrix (intDomain 1 3)
<<<<<<< HEAD
                               [ ConstantAbstract $ AbsLitTuple [ConstantAbstract $ AbsLitTuple [ConstantBool False, ConstantInt Nothing 2], ConstantBool True ]
                               , ConstantAbstract $ AbsLitTuple [ConstantAbstract $ AbsLitTuple [ConstantBool False, ConstantInt Nothing 3], ConstantBool False]
                               , ConstantAbstract $ AbsLitTuple [ConstantAbstract $ AbsLitTuple [ConstantBool True , ConstantInt Nothing 4], ConstantBool False]
||||||| merged common ancestors
                               [ ConstantAbstract $ AbsLitTuple [ConstantAbstract $ AbsLitTuple [ConstantBool False, ConstantInt 2], ConstantBool True ]
                               , ConstantAbstract $ AbsLitTuple [ConstantAbstract $ AbsLitTuple [ConstantBool False, ConstantInt 3], ConstantBool False]
                               , ConstantAbstract $ AbsLitTuple [ConstantAbstract $ AbsLitTuple [ConstantBool True , ConstantInt 4], ConstantBool False]
=======
                               [ ConstantAbstract $ AbsLitTuple [ConstantAbstract $ AbsLitTuple [ConstantBool False, (ConstantInt NoTag) 2], ConstantBool True ]
                               , ConstantAbstract $ AbsLitTuple [ConstantAbstract $ AbsLitTuple [ConstantBool False, (ConstantInt NoTag) 3], ConstantBool False]
                               , ConstantAbstract $ AbsLitTuple [ConstantAbstract $ AbsLitTuple [ConstantBool True , (ConstantInt NoTag) 4], ConstantBool False]
>>>>>>> taggedints
                               ])
                  , ( "x_2", DomainMatrix   (intDomain 1 3) (intDomain 2 5)
<<<<<<< HEAD
                           , ConstantAbstract $ AbsLitMatrix (intDomain 1 3) [ConstantInt Nothing 4, ConstantInt Nothing 6, ConstantInt Nothing 8]
||||||| merged common ancestors
                           , ConstantAbstract $ AbsLitMatrix (intDomain 1 3) [ConstantInt 4, ConstantInt 6, ConstantInt 8]
=======
                           , ConstantAbstract $ AbsLitMatrix (intDomain 1 3) [(ConstantInt NoTag) 4, (ConstantInt NoTag) 6, (ConstantInt NoTag) 8]
>>>>>>> taggedints
                           )
                  ]
            low = [ ( "x_1_1_1", DomainMatrix (intDomain 1 3) DomainBool     , ConstantAbstract $ AbsLitMatrix (intDomain 1 3) [ConstantBool False, ConstantBool False, ConstantBool True ])
<<<<<<< HEAD
                  , ( "x_1_1_2", DomainMatrix (intDomain 1 3) (intDomain 1 3), ConstantAbstract $ AbsLitMatrix (intDomain 1 3) [ConstantInt Nothing 2     , ConstantInt Nothing 3     , ConstantInt Nothing 4     ])
||||||| merged common ancestors
                  , ( "x_1_1_2", DomainMatrix (intDomain 1 3) (intDomain 1 3), ConstantAbstract $ AbsLitMatrix (intDomain 1 3) [ConstantInt 2     , ConstantInt 3     , ConstantInt 4     ])
=======
                  , ( "x_1_1_2", DomainMatrix (intDomain 1 3) (intDomain 1 3), ConstantAbstract $ AbsLitMatrix (intDomain 1 3) [(ConstantInt NoTag) 2     , (ConstantInt NoTag) 3     , (ConstantInt NoTag) 4     ])
>>>>>>> taggedints
                  , ( "x_1_2"  , DomainMatrix (intDomain 1 3) DomainBool     , ConstantAbstract $ AbsLitMatrix (intDomain 1 3) [ConstantBool True , ConstantBool False, ConstantBool False])
<<<<<<< HEAD
                  , ( "x_2"    , DomainMatrix (intDomain 1 3) (intDomain 2 5), ConstantAbstract $ AbsLitMatrix (intDomain 1 3) [ConstantInt Nothing 4     , ConstantInt Nothing 6     , ConstantInt Nothing 8     ])
||||||| merged common ancestors
                  , ( "x_2"    , DomainMatrix (intDomain 1 3) (intDomain 2 5), ConstantAbstract $ AbsLitMatrix (intDomain 1 3) [ConstantInt 4     , ConstantInt 6     , ConstantInt 8     ])
=======
                  , ( "x_2"    , DomainMatrix (intDomain 1 3) (intDomain 2 5), ConstantAbstract $ AbsLitMatrix (intDomain 1 3) [(ConstantInt NoTag) 4     , (ConstantInt NoTag) 6     , (ConstantInt NoTag) 8     ])
>>>>>>> taggedints
                  ]
        in  testCases "x" highDomain highConstant Just mid low

    , testCase "matrix 2d of (((bool, int), bool), int)" $
        let
            highDomain =
                DomainMatrix (intDomain 1 2)
                    (DomainMatrix (intDomain 1 3)
                        (DomainTuple [DomainTuple [DomainTuple [DomainBool, intDomain 1 3], DomainBool], intDomain 2 5]))
            highConstant =
                ConstantAbstract $ AbsLitMatrix (intDomain 1 2)
                    [ ConstantAbstract $ AbsLitMatrix (intDomain 1 3)
<<<<<<< HEAD
                        [ ConstantAbstract $ AbsLitTuple [ConstantAbstract $ AbsLitTuple [ConstantAbstract $ AbsLitTuple [ConstantBool False, ConstantInt Nothing 2], ConstantBool True ], ConstantInt Nothing 4]
                        , ConstantAbstract $ AbsLitTuple [ConstantAbstract $ AbsLitTuple [ConstantAbstract $ AbsLitTuple [ConstantBool False, ConstantInt Nothing 3], ConstantBool False], ConstantInt Nothing 6]
                        , ConstantAbstract $ AbsLitTuple [ConstantAbstract $ AbsLitTuple [ConstantAbstract $ AbsLitTuple [ConstantBool True , ConstantInt Nothing 4], ConstantBool False], ConstantInt Nothing 8]
||||||| merged common ancestors
                        [ ConstantAbstract $ AbsLitTuple [ConstantAbstract $ AbsLitTuple [ConstantAbstract $ AbsLitTuple [ConstantBool False, ConstantInt 2], ConstantBool True ], ConstantInt 4]
                        , ConstantAbstract $ AbsLitTuple [ConstantAbstract $ AbsLitTuple [ConstantAbstract $ AbsLitTuple [ConstantBool False, ConstantInt 3], ConstantBool False], ConstantInt 6]
                        , ConstantAbstract $ AbsLitTuple [ConstantAbstract $ AbsLitTuple [ConstantAbstract $ AbsLitTuple [ConstantBool True , ConstantInt 4], ConstantBool False], ConstantInt 8]
=======
                        [ ConstantAbstract $ AbsLitTuple [ConstantAbstract $ AbsLitTuple [ConstantAbstract $ AbsLitTuple [ConstantBool False, (ConstantInt NoTag) 2], ConstantBool True ], (ConstantInt NoTag) 4]
                        , ConstantAbstract $ AbsLitTuple [ConstantAbstract $ AbsLitTuple [ConstantAbstract $ AbsLitTuple [ConstantBool False, (ConstantInt NoTag) 3], ConstantBool False], (ConstantInt NoTag) 6]
                        , ConstantAbstract $ AbsLitTuple [ConstantAbstract $ AbsLitTuple [ConstantAbstract $ AbsLitTuple [ConstantBool True , (ConstantInt NoTag) 4], ConstantBool False], (ConstantInt NoTag) 8]
>>>>>>> taggedints
                        ]
                    , ConstantAbstract $ AbsLitMatrix (intDomain 1 3)
<<<<<<< HEAD
                        [ ConstantAbstract $ AbsLitTuple [ConstantAbstract $ AbsLitTuple [ConstantAbstract $ AbsLitTuple [ConstantBool False, ConstantInt Nothing 4], ConstantBool True ], ConstantInt Nothing 4]
                        , ConstantAbstract $ AbsLitTuple [ConstantAbstract $ AbsLitTuple [ConstantAbstract $ AbsLitTuple [ConstantBool True , ConstantInt Nothing 5], ConstantBool False], ConstantInt Nothing 7]
                        , ConstantAbstract $ AbsLitTuple [ConstantAbstract $ AbsLitTuple [ConstantAbstract $ AbsLitTuple [ConstantBool True , ConstantInt Nothing 6], ConstantBool False], ConstantInt Nothing 9]
||||||| merged common ancestors
                        [ ConstantAbstract $ AbsLitTuple [ConstantAbstract $ AbsLitTuple [ConstantAbstract $ AbsLitTuple [ConstantBool False, ConstantInt 4], ConstantBool True ], ConstantInt 4]
                        , ConstantAbstract $ AbsLitTuple [ConstantAbstract $ AbsLitTuple [ConstantAbstract $ AbsLitTuple [ConstantBool True , ConstantInt 5], ConstantBool False], ConstantInt 7]
                        , ConstantAbstract $ AbsLitTuple [ConstantAbstract $ AbsLitTuple [ConstantAbstract $ AbsLitTuple [ConstantBool True , ConstantInt 6], ConstantBool False], ConstantInt 9]
=======
                        [ ConstantAbstract $ AbsLitTuple [ConstantAbstract $ AbsLitTuple [ConstantAbstract $ AbsLitTuple [ConstantBool False, (ConstantInt NoTag) 4], ConstantBool True ], (ConstantInt NoTag) 4]
                        , ConstantAbstract $ AbsLitTuple [ConstantAbstract $ AbsLitTuple [ConstantAbstract $ AbsLitTuple [ConstantBool True , (ConstantInt NoTag) 5], ConstantBool False], (ConstantInt NoTag) 7]
                        , ConstantAbstract $ AbsLitTuple [ConstantAbstract $ AbsLitTuple [ConstantAbstract $ AbsLitTuple [ConstantBool True , (ConstantInt NoTag) 6], ConstantBool False], (ConstantInt NoTag) 9]
>>>>>>> taggedints
                        ]
                    ]
            mid =
                [ ( "x_1" , DomainMatrix (intDomain 1 2)
                              (DomainMatrix (intDomain 1 3)
                                  (DomainTuple [DomainTuple [DomainBool, intDomain 1 3], DomainBool]))
                          , ConstantAbstract $ AbsLitMatrix (intDomain 1 2)
                              [ ConstantAbstract $ AbsLitMatrix (intDomain 1 3)
<<<<<<< HEAD
                                  [ ConstantAbstract $ AbsLitTuple [ConstantAbstract $ AbsLitTuple [ConstantBool False,ConstantInt Nothing 2],ConstantBool True]
                                  , ConstantAbstract $ AbsLitTuple [ConstantAbstract $ AbsLitTuple [ConstantBool False,ConstantInt Nothing 3],ConstantBool False]
                                  , ConstantAbstract $ AbsLitTuple [ConstantAbstract $ AbsLitTuple [ConstantBool True,ConstantInt Nothing 4],ConstantBool False]
||||||| merged common ancestors
                                  [ ConstantAbstract $ AbsLitTuple [ConstantAbstract $ AbsLitTuple [ConstantBool False,ConstantInt 2],ConstantBool True]
                                  , ConstantAbstract $ AbsLitTuple [ConstantAbstract $ AbsLitTuple [ConstantBool False,ConstantInt 3],ConstantBool False]
                                  , ConstantAbstract $ AbsLitTuple [ConstantAbstract $ AbsLitTuple [ConstantBool True,ConstantInt 4],ConstantBool False]
=======
                                  [ ConstantAbstract $ AbsLitTuple [ConstantAbstract $ AbsLitTuple [ConstantBool False,(ConstantInt NoTag) 2],ConstantBool True]
                                  , ConstantAbstract $ AbsLitTuple [ConstantAbstract $ AbsLitTuple [ConstantBool False,(ConstantInt NoTag) 3],ConstantBool False]
                                  , ConstantAbstract $ AbsLitTuple [ConstantAbstract $ AbsLitTuple [ConstantBool True,(ConstantInt NoTag) 4],ConstantBool False]
>>>>>>> taggedints
                                  ]
                              , ConstantAbstract $ AbsLitMatrix (intDomain 1 3)
<<<<<<< HEAD
                                  [ ConstantAbstract $ AbsLitTuple [ConstantAbstract $ AbsLitTuple [ConstantBool False,ConstantInt Nothing 4],ConstantBool True]
                                  , ConstantAbstract $ AbsLitTuple [ConstantAbstract $ AbsLitTuple [ConstantBool True,ConstantInt Nothing 5],ConstantBool False]
                                  , ConstantAbstract $ AbsLitTuple [ConstantAbstract $ AbsLitTuple [ConstantBool True,ConstantInt Nothing 6],ConstantBool False]
||||||| merged common ancestors
                                  [ ConstantAbstract $ AbsLitTuple [ConstantAbstract $ AbsLitTuple [ConstantBool False,ConstantInt 4],ConstantBool True]
                                  , ConstantAbstract $ AbsLitTuple [ConstantAbstract $ AbsLitTuple [ConstantBool True,ConstantInt 5],ConstantBool False]
                                  , ConstantAbstract $ AbsLitTuple [ConstantAbstract $ AbsLitTuple [ConstantBool True,ConstantInt 6],ConstantBool False]
=======
                                  [ ConstantAbstract $ AbsLitTuple [ConstantAbstract $ AbsLitTuple [ConstantBool False,(ConstantInt NoTag) 4],ConstantBool True]
                                  , ConstantAbstract $ AbsLitTuple [ConstantAbstract $ AbsLitTuple [ConstantBool True,(ConstantInt NoTag) 5],ConstantBool False]
                                  , ConstantAbstract $ AbsLitTuple [ConstantAbstract $ AbsLitTuple [ConstantBool True,(ConstantInt NoTag) 6],ConstantBool False]
>>>>>>> taggedints
                                  ]
                              ] )
                , ( "x_2" , DomainMatrix (intDomain 1 2)
                                  (DomainMatrix (intDomain 1 3)
                                      (intDomain 2 5))
                          , ConstantAbstract $ AbsLitMatrix (intDomain 1 2)
<<<<<<< HEAD
                                [ ConstantAbstract $ AbsLitMatrix (intDomain 1 3) [ConstantInt Nothing 4,ConstantInt Nothing 6,ConstantInt Nothing 8]
                                , ConstantAbstract $ AbsLitMatrix (intDomain 1 3) [ConstantInt Nothing 4,ConstantInt Nothing 7,ConstantInt Nothing 9]
||||||| merged common ancestors
                                [ ConstantAbstract $ AbsLitMatrix (intDomain 1 3) [ConstantInt 4,ConstantInt 6,ConstantInt 8]
                                , ConstantAbstract $ AbsLitMatrix (intDomain 1 3) [ConstantInt 4,ConstantInt 7,ConstantInt 9]
=======
                                [ ConstantAbstract $ AbsLitMatrix (intDomain 1 3) [(ConstantInt NoTag) 4,(ConstantInt NoTag) 6,(ConstantInt NoTag) 8]
                                , ConstantAbstract $ AbsLitMatrix (intDomain 1 3) [(ConstantInt NoTag) 4,(ConstantInt NoTag) 7,(ConstantInt NoTag) 9]
>>>>>>> taggedints
                                ] )
                ]
            low =
                [ ( "x_1_1_1" , DomainMatrix   (intDomain 1 2) (DomainMatrix (intDomain 1 3) DomainBool)
                              , ConstantAbstract $ AbsLitMatrix (intDomain 1 2)
                                  [ ConstantAbstract $ AbsLitMatrix (intDomain 1 3) [ConstantBool False,ConstantBool False,ConstantBool True]
                                  , ConstantAbstract $ AbsLitMatrix (intDomain 1 3) [ConstantBool False,ConstantBool True,ConstantBool True]
                                  ] )
                , ( "x_1_1_2" , DomainMatrix   (intDomain 1 2) (DomainMatrix (intDomain 1 3) (intDomain 1 3))
                              , ConstantAbstract $ AbsLitMatrix (intDomain 1 2)
<<<<<<< HEAD
                                  [ ConstantAbstract $ AbsLitMatrix (intDomain 1 3) [ConstantInt Nothing 2,ConstantInt Nothing 3,ConstantInt Nothing 4]
                                  , ConstantAbstract $ AbsLitMatrix (intDomain 1 3) [ConstantInt Nothing 4,ConstantInt Nothing 5,ConstantInt Nothing 6]
||||||| merged common ancestors
                                  [ ConstantAbstract $ AbsLitMatrix (intDomain 1 3) [ConstantInt 2,ConstantInt 3,ConstantInt 4]
                                  , ConstantAbstract $ AbsLitMatrix (intDomain 1 3) [ConstantInt 4,ConstantInt 5,ConstantInt 6]
=======
                                  [ ConstantAbstract $ AbsLitMatrix (intDomain 1 3) [(ConstantInt NoTag) 2,(ConstantInt NoTag) 3,(ConstantInt NoTag) 4]
                                  , ConstantAbstract $ AbsLitMatrix (intDomain 1 3) [(ConstantInt NoTag) 4,(ConstantInt NoTag) 5,(ConstantInt NoTag) 6]
>>>>>>> taggedints
                                  ] )
                , ( "x_1_2"   , DomainMatrix   (intDomain 1 2) (DomainMatrix (intDomain 1 3) DomainBool)
                              , ConstantAbstract $ AbsLitMatrix (intDomain 1 2)
                                  [ ConstantAbstract $ AbsLitMatrix (intDomain 1 3) [ConstantBool True,ConstantBool False,ConstantBool False]
                                  , ConstantAbstract $ AbsLitMatrix (intDomain 1 3) [ConstantBool True,ConstantBool False,ConstantBool False]
                                  ] )
                , ( "x_2"     , DomainMatrix   (intDomain 1 2) (DomainMatrix (intDomain 1 3) (intDomain 2 5))
                              , ConstantAbstract $ AbsLitMatrix (intDomain 1 2)
<<<<<<< HEAD
                                  [ ConstantAbstract $ AbsLitMatrix (intDomain 1 3) [ConstantInt Nothing 4,ConstantInt Nothing 6,ConstantInt Nothing 8]
                                  , ConstantAbstract $ AbsLitMatrix (intDomain 1 3) [ConstantInt Nothing 4,ConstantInt Nothing 7,ConstantInt Nothing 9]
||||||| merged common ancestors
                                  [ ConstantAbstract $ AbsLitMatrix (intDomain 1 3) [ConstantInt 4,ConstantInt 6,ConstantInt 8]
                                  , ConstantAbstract $ AbsLitMatrix (intDomain 1 3) [ConstantInt 4,ConstantInt 7,ConstantInt 9]
=======
                                  [ ConstantAbstract $ AbsLitMatrix (intDomain 1 3) [(ConstantInt NoTag) 4,(ConstantInt NoTag) 6,(ConstantInt NoTag) 8]
                                  , ConstantAbstract $ AbsLitMatrix (intDomain 1 3) [(ConstantInt NoTag) 4,(ConstantInt NoTag) 7,(ConstantInt NoTag) 9]
>>>>>>> taggedints
                                  ] )
                ]
        in  testCases "x" highDomain highConstant Just mid low

    , testCase "(bool, bool, bool)" $ testCasesAuto "x"
        ( DomainTuple [DomainBool, DomainBool, DomainBool] )
        ( ConstantAbstract $ AbsLitTuple [ConstantBool False, ConstantBool False, ConstantBool True] )

    , testCase "(bool, matrix of int) {auto}" $ testCasesAuto "x"
        ( DomainTuple
            [ DomainBool
            , DomainMatrix (intDomain 1 3) (intDomain 0 9)
            ] )
        ( ConstantAbstract $ AbsLitTuple
            [ ConstantBool False
<<<<<<< HEAD
            , ConstantAbstract $ AbsLitMatrix (intDomain 1 3) [ConstantInt Nothing 2, ConstantInt Nothing 4, ConstantInt Nothing 5]
||||||| merged common ancestors
            , ConstantAbstract $ AbsLitMatrix (intDomain 1 3) [ConstantInt 2, ConstantInt 4, ConstantInt 5]
=======
            , ConstantAbstract $ AbsLitMatrix (intDomain 1 3) [(ConstantInt NoTag) 2, (ConstantInt NoTag) 4, (ConstantInt NoTag) 5]
>>>>>>> taggedints
            ] )

    , testCase "(bool, matrix of int)" $
        let
            highDomain =
                DomainTuple
                    [ DomainBool
                    , DomainMatrix (intDomain 1 3) (intDomain 0 9)
                    ]
            highConstant =
                ConstantAbstract $ AbsLitTuple
                    [ ConstantBool False
<<<<<<< HEAD
                    , ConstantAbstract $ AbsLitMatrix (intDomain 1 3) [ConstantInt Nothing 2, ConstantInt Nothing 4, ConstantInt Nothing 5]
||||||| merged common ancestors
                    , ConstantAbstract $ AbsLitMatrix (intDomain 1 3) [ConstantInt 2, ConstantInt 4, ConstantInt 5]
=======
                    , ConstantAbstract $ AbsLitMatrix (intDomain 1 3) [(ConstantInt NoTag) 2, (ConstantInt NoTag) 4, (ConstantInt NoTag) 5]
>>>>>>> taggedints
                    ]
            low =
                [ ( "x_1", DomainBool,ConstantBool False)
                , ( "x_2", DomainMatrix (intDomain 1 3) (intDomain 0 9)
<<<<<<< HEAD
                         , ConstantAbstract $ AbsLitMatrix (intDomain 1 3) [ConstantInt Nothing 2,ConstantInt Nothing 4,ConstantInt Nothing 5] )
||||||| merged common ancestors
                         , ConstantAbstract $ AbsLitMatrix (intDomain 1 3) [ConstantInt 2,ConstantInt 4,ConstantInt 5] )
=======
                         , ConstantAbstract $ AbsLitMatrix (intDomain 1 3) [(ConstantInt NoTag) 2,(ConstantInt NoTag) 4,(ConstantInt NoTag) 5] )
>>>>>>> taggedints
                ]
        in  testCases "x" highDomain highConstant Just low low

    , testCase "(bool, matrix of (int, bool)) {auto}" $ testCasesAuto "x"
        ( DomainTuple
            [ DomainBool
            , DomainMatrix (intDomain 1 3) (DomainTuple [intDomain 0 9, DomainBool])
            ] )
        ( ConstantAbstract $ AbsLitTuple
            [ ConstantBool False
            , ConstantAbstract $ AbsLitMatrix (intDomain 1 3)
<<<<<<< HEAD
                [ ConstantAbstract $ AbsLitTuple [ConstantInt Nothing 2, ConstantBool False]
                , ConstantAbstract $ AbsLitTuple [ConstantInt Nothing 4, ConstantBool True]
                , ConstantAbstract $ AbsLitTuple [ConstantInt Nothing 5, ConstantBool False]
||||||| merged common ancestors
                [ ConstantAbstract $ AbsLitTuple [ConstantInt 2, ConstantBool False]
                , ConstantAbstract $ AbsLitTuple [ConstantInt 4, ConstantBool True]
                , ConstantAbstract $ AbsLitTuple [ConstantInt 5, ConstantBool False]
=======
                [ ConstantAbstract $ AbsLitTuple [(ConstantInt NoTag) 2, ConstantBool False]
                , ConstantAbstract $ AbsLitTuple [(ConstantInt NoTag) 4, ConstantBool True]
                , ConstantAbstract $ AbsLitTuple [(ConstantInt NoTag) 5, ConstantBool False]
>>>>>>> taggedints
                ]
            ] )

    , testCase "(bool, matrix of (int, bool))" $
        let
            highDomain =
                DomainTuple
                    [ DomainBool
                    , DomainMatrix (intDomain 1 3) (DomainTuple [intDomain 0 9, DomainBool])
                    ]
            highConstant =
                ConstantAbstract $ AbsLitTuple
                    [ ConstantBool False
                    , ConstantAbstract $ AbsLitMatrix (intDomain 1 3)
<<<<<<< HEAD
                        [ ConstantAbstract $ AbsLitTuple [ConstantInt Nothing 2, ConstantBool False]
                        , ConstantAbstract $ AbsLitTuple [ConstantInt Nothing 4, ConstantBool True]
                        , ConstantAbstract $ AbsLitTuple [ConstantInt Nothing 5, ConstantBool False]
||||||| merged common ancestors
                        [ ConstantAbstract $ AbsLitTuple [ConstantInt 2, ConstantBool False]
                        , ConstantAbstract $ AbsLitTuple [ConstantInt 4, ConstantBool True]
                        , ConstantAbstract $ AbsLitTuple [ConstantInt 5, ConstantBool False]
=======
                        [ ConstantAbstract $ AbsLitTuple [(ConstantInt NoTag) 2, ConstantBool False]
                        , ConstantAbstract $ AbsLitTuple [(ConstantInt NoTag) 4, ConstantBool True]
                        , ConstantAbstract $ AbsLitTuple [(ConstantInt NoTag) 5, ConstantBool False]
>>>>>>> taggedints
                        ]
                    ]
            mid =
                [ ( "x_1" , DomainBool , ConstantBool False )
                , ( "x_2" , DomainMatrix (intDomain 1 3) (DomainTuple [intDomain 0 9,DomainBool])
                          , ConstantAbstract $ AbsLitMatrix (intDomain 1 3)
<<<<<<< HEAD
                              [ ConstantAbstract $ AbsLitTuple [ConstantInt Nothing 2,ConstantBool False]
                              , ConstantAbstract $ AbsLitTuple [ConstantInt Nothing 4,ConstantBool True]
                              , ConstantAbstract $ AbsLitTuple [ConstantInt Nothing 5,ConstantBool False]
||||||| merged common ancestors
                              [ ConstantAbstract $ AbsLitTuple [ConstantInt 2,ConstantBool False]
                              , ConstantAbstract $ AbsLitTuple [ConstantInt 4,ConstantBool True]
                              , ConstantAbstract $ AbsLitTuple [ConstantInt 5,ConstantBool False]
=======
                              [ ConstantAbstract $ AbsLitTuple [(ConstantInt NoTag) 2,ConstantBool False]
                              , ConstantAbstract $ AbsLitTuple [(ConstantInt NoTag) 4,ConstantBool True]
                              , ConstantAbstract $ AbsLitTuple [(ConstantInt NoTag) 5,ConstantBool False]
>>>>>>> taggedints
                              ] )
                ]
            low =
                [ ( "x_1"   , DomainBool , ConstantBool False )
<<<<<<< HEAD
                , ( "x_2_1" , DomainMatrix (intDomain 1 3) (intDomain 0 9) , ConstantAbstract $ AbsLitMatrix (intDomain 1 3) [ConstantInt Nothing 2,ConstantInt Nothing 4,ConstantInt Nothing 5] )
||||||| merged common ancestors
                , ( "x_2_1" , DomainMatrix (intDomain 1 3) (intDomain 0 9) , ConstantAbstract $ AbsLitMatrix (intDomain 1 3) [ConstantInt 2,ConstantInt 4,ConstantInt 5] )
=======
                , ( "x_2_1" , DomainMatrix (intDomain 1 3) (intDomain 0 9) , ConstantAbstract $ AbsLitMatrix (intDomain 1 3) [(ConstantInt NoTag) 2,(ConstantInt NoTag) 4,(ConstantInt NoTag) 5] )
>>>>>>> taggedints
                , ( "x_2_2" , DomainMatrix (intDomain 1 3) DomainBool      , ConstantAbstract $ AbsLitMatrix (intDomain 1 3) [ConstantBool False,ConstantBool True,ConstantBool False] )
                ]
        in  testCases "x" highDomain highConstant Just mid low

    , testCase "(bool, matrix of (int, matrix of int)) {auto}" $ testCasesAuto "x"
        ( DomainTuple
            [ DomainBool
            , DomainMatrix (intDomain 1 3) (DomainTuple
                [ intDomain 0 9
                , DomainMatrix (intDomain 1 2) (intDomain 0 9)
                ])
            ] )
        ( ConstantAbstract $ AbsLitTuple
            [ ConstantBool False
            , ConstantAbstract $ AbsLitMatrix (intDomain 1 3)
<<<<<<< HEAD
                [ ConstantAbstract $ AbsLitTuple [ConstantInt Nothing 2, ConstantAbstract $ AbsLitMatrix (intDomain 1 2) [ConstantInt Nothing 1, ConstantInt Nothing 3]]
                , ConstantAbstract $ AbsLitTuple [ConstantInt Nothing 4, ConstantAbstract $ AbsLitMatrix (intDomain 1 2) [ConstantInt Nothing 3, ConstantInt Nothing 5]]
                , ConstantAbstract $ AbsLitTuple [ConstantInt Nothing 5, ConstantAbstract $ AbsLitMatrix (intDomain 1 2) [ConstantInt Nothing 5, ConstantInt Nothing 6]]
||||||| merged common ancestors
                [ ConstantAbstract $ AbsLitTuple [ConstantInt 2, ConstantAbstract $ AbsLitMatrix (intDomain 1 2) [ConstantInt 1, ConstantInt 3]]
                , ConstantAbstract $ AbsLitTuple [ConstantInt 4, ConstantAbstract $ AbsLitMatrix (intDomain 1 2) [ConstantInt 3, ConstantInt 5]]
                , ConstantAbstract $ AbsLitTuple [ConstantInt 5, ConstantAbstract $ AbsLitMatrix (intDomain 1 2) [ConstantInt 5, ConstantInt 6]]
=======
                [ ConstantAbstract $ AbsLitTuple [(ConstantInt NoTag) 2, ConstantAbstract $ AbsLitMatrix (intDomain 1 2) [(ConstantInt NoTag) 1, (ConstantInt NoTag) 3]]
                , ConstantAbstract $ AbsLitTuple [(ConstantInt NoTag) 4, ConstantAbstract $ AbsLitMatrix (intDomain 1 2) [(ConstantInt NoTag) 3, (ConstantInt NoTag) 5]]
                , ConstantAbstract $ AbsLitTuple [(ConstantInt NoTag) 5, ConstantAbstract $ AbsLitMatrix (intDomain 1 2) [(ConstantInt NoTag) 5, (ConstantInt NoTag) 6]]
>>>>>>> taggedints
                ]
            ] )

    , testCase "(bool, matrix of (int, matrix of int))" $
        let
            highDomain =
                DomainTuple
                    [ DomainBool
                    , DomainMatrix (intDomain 1 3) (DomainTuple
                        [ intDomain 0 9
                        , DomainMatrix (intDomain 1 2) (intDomain 0 9)
                        ])
                    ]
            highConstant =
                ConstantAbstract $ AbsLitTuple
                    [ ConstantBool False
                    , ConstantAbstract $ AbsLitMatrix (intDomain 1 3)
<<<<<<< HEAD
                        [ ConstantAbstract $ AbsLitTuple [ConstantInt Nothing 2, ConstantAbstract $ AbsLitMatrix (intDomain 1 2) [ConstantInt Nothing 1, ConstantInt Nothing 3]]
                        , ConstantAbstract $ AbsLitTuple [ConstantInt Nothing 4, ConstantAbstract $ AbsLitMatrix (intDomain 1 2) [ConstantInt Nothing 3, ConstantInt Nothing 5]]
                        , ConstantAbstract $ AbsLitTuple [ConstantInt Nothing 5, ConstantAbstract $ AbsLitMatrix (intDomain 1 2) [ConstantInt Nothing 5, ConstantInt Nothing 6]]
||||||| merged common ancestors
                        [ ConstantAbstract $ AbsLitTuple [ConstantInt 2, ConstantAbstract $ AbsLitMatrix (intDomain 1 2) [ConstantInt 1, ConstantInt 3]]
                        , ConstantAbstract $ AbsLitTuple [ConstantInt 4, ConstantAbstract $ AbsLitMatrix (intDomain 1 2) [ConstantInt 3, ConstantInt 5]]
                        , ConstantAbstract $ AbsLitTuple [ConstantInt 5, ConstantAbstract $ AbsLitMatrix (intDomain 1 2) [ConstantInt 5, ConstantInt 6]]
=======
                        [ ConstantAbstract $ AbsLitTuple [(ConstantInt NoTag) 2, ConstantAbstract $ AbsLitMatrix (intDomain 1 2) [(ConstantInt NoTag) 1, (ConstantInt NoTag) 3]]
                        , ConstantAbstract $ AbsLitTuple [(ConstantInt NoTag) 4, ConstantAbstract $ AbsLitMatrix (intDomain 1 2) [(ConstantInt NoTag) 3, (ConstantInt NoTag) 5]]
                        , ConstantAbstract $ AbsLitTuple [(ConstantInt NoTag) 5, ConstantAbstract $ AbsLitMatrix (intDomain 1 2) [(ConstantInt NoTag) 5, (ConstantInt NoTag) 6]]
>>>>>>> taggedints
                        ]
                    ]
            mid =
                [ ( "x_1" , DomainBool,ConstantBool False )
                , ( "x_2" , DomainMatrix   (intDomain 1 3) (DomainTuple [intDomain 0 9,DomainMatrix (intDomain 1 2) (intDomain 0 9)])
                          , ConstantAbstract $ AbsLitMatrix (intDomain 1 3)
<<<<<<< HEAD
                              [ ConstantAbstract $ AbsLitTuple [ConstantInt Nothing 2,ConstantAbstract $ AbsLitMatrix (intDomain 1 2) [ConstantInt Nothing 1,ConstantInt Nothing 3]]
                              , ConstantAbstract $ AbsLitTuple [ConstantInt Nothing 4,ConstantAbstract $ AbsLitMatrix (intDomain 1 2) [ConstantInt Nothing 3,ConstantInt Nothing 5]]
                              , ConstantAbstract $ AbsLitTuple [ConstantInt Nothing 5,ConstantAbstract $ AbsLitMatrix (intDomain 1 2) [ConstantInt Nothing 5,ConstantInt Nothing 6]]
||||||| merged common ancestors
                              [ ConstantAbstract $ AbsLitTuple [ConstantInt 2,ConstantAbstract $ AbsLitMatrix (intDomain 1 2) [ConstantInt 1,ConstantInt 3]]
                              , ConstantAbstract $ AbsLitTuple [ConstantInt 4,ConstantAbstract $ AbsLitMatrix (intDomain 1 2) [ConstantInt 3,ConstantInt 5]]
                              , ConstantAbstract $ AbsLitTuple [ConstantInt 5,ConstantAbstract $ AbsLitMatrix (intDomain 1 2) [ConstantInt 5,ConstantInt 6]]
=======
                              [ ConstantAbstract $ AbsLitTuple [(ConstantInt NoTag) 2,ConstantAbstract $ AbsLitMatrix (intDomain 1 2) [(ConstantInt NoTag) 1,(ConstantInt NoTag) 3]]
                              , ConstantAbstract $ AbsLitTuple [(ConstantInt NoTag) 4,ConstantAbstract $ AbsLitMatrix (intDomain 1 2) [(ConstantInt NoTag) 3,(ConstantInt NoTag) 5]]
                              , ConstantAbstract $ AbsLitTuple [(ConstantInt NoTag) 5,ConstantAbstract $ AbsLitMatrix (intDomain 1 2) [(ConstantInt NoTag) 5,(ConstantInt NoTag) 6]]
>>>>>>> taggedints
                              ] )
                ]
            low =
                [ ( "x_1"   , DomainBool,ConstantBool False )
                , ( "x_2_1" , DomainMatrix   (intDomain 1 3) (intDomain 0 9)
<<<<<<< HEAD
                            , ConstantAbstract $ AbsLitMatrix (intDomain 1 3) [ConstantInt Nothing 2,ConstantInt Nothing 4,ConstantInt Nothing 5])
||||||| merged common ancestors
                            , ConstantAbstract $ AbsLitMatrix (intDomain 1 3) [ConstantInt 2,ConstantInt 4,ConstantInt 5])
=======
                            , ConstantAbstract $ AbsLitMatrix (intDomain 1 3) [(ConstantInt NoTag) 2,(ConstantInt NoTag) 4,(ConstantInt NoTag) 5])
>>>>>>> taggedints
                , ( "x_2_2" , DomainMatrix   (intDomain 1 3) (DomainMatrix (intDomain 1 2) (intDomain 0 9))
                            , ConstantAbstract $ AbsLitMatrix (intDomain 1 3)
<<<<<<< HEAD
                                [ ConstantAbstract $ AbsLitMatrix (intDomain 1 2) [ConstantInt Nothing 1,ConstantInt Nothing 3]
                                , ConstantAbstract $ AbsLitMatrix (intDomain 1 2) [ConstantInt Nothing 3,ConstantInt Nothing 5]
                                , ConstantAbstract $ AbsLitMatrix (intDomain 1 2) [ConstantInt Nothing 5,ConstantInt Nothing 6]
||||||| merged common ancestors
                                [ ConstantAbstract $ AbsLitMatrix (intDomain 1 2) [ConstantInt 1,ConstantInt 3]
                                , ConstantAbstract $ AbsLitMatrix (intDomain 1 2) [ConstantInt 3,ConstantInt 5]
                                , ConstantAbstract $ AbsLitMatrix (intDomain 1 2) [ConstantInt 5,ConstantInt 6]
=======
                                [ ConstantAbstract $ AbsLitMatrix (intDomain 1 2) [(ConstantInt NoTag) 1,(ConstantInt NoTag) 3]
                                , ConstantAbstract $ AbsLitMatrix (intDomain 1 2) [(ConstantInt NoTag) 3,(ConstantInt NoTag) 5]
                                , ConstantAbstract $ AbsLitMatrix (intDomain 1 2) [(ConstantInt NoTag) 5,(ConstantInt NoTag) 6]
>>>>>>> taggedints
                                ] )
                ]
        in  testCases "x" highDomain highConstant Just mid low

-- Explicit
    , testCase "Explicit: set (size 4) of int {auto}" $ testCasesAuto "x"
        ( DomainSet
            Set_Explicit
<<<<<<< HEAD
            (SetAttr (SizeAttr_Size (ConstantInt Nothing 4)))
||||||| merged common ancestors
            (SetAttr (SizeAttr_Size (ConstantInt 4)))
=======
            (SetAttr (SizeAttr_Size ((ConstantInt NoTag) 4)))
>>>>>>> taggedints
            (intDomain 0 9) )
        ( ConstantAbstract $ AbsLitSet
<<<<<<< HEAD
            [ConstantInt Nothing 2, ConstantInt Nothing 3, ConstantInt Nothing 5, ConstantInt Nothing 6] )
||||||| merged common ancestors
            [ConstantInt 2, ConstantInt 3, ConstantInt 5, ConstantInt 6] )
=======
            [(ConstantInt NoTag) 2, (ConstantInt NoTag) 3, (ConstantInt NoTag) 5, (ConstantInt NoTag) 6] )
>>>>>>> taggedints

    , testCase "Explicit: set (size 4) of int" $
        let
            highDomain =
                DomainSet
                    Set_Explicit
<<<<<<< HEAD
                    (SetAttr (SizeAttr_Size (ConstantInt Nothing 4)))
||||||| merged common ancestors
                    (SetAttr (SizeAttr_Size (ConstantInt 4)))
=======
                    (SetAttr (SizeAttr_Size ((ConstantInt NoTag) 4)))
>>>>>>> taggedints
                    (intDomain 0 9)
            highConstant =
                ConstantAbstract $ AbsLitSet
<<<<<<< HEAD
                    [ConstantInt Nothing 2, ConstantInt Nothing 3, ConstantInt Nothing 5, ConstantInt Nothing 6]
||||||| merged common ancestors
                    [ConstantInt 2, ConstantInt 3, ConstantInt 5, ConstantInt 6]
=======
                    [(ConstantInt NoTag) 2, (ConstantInt NoTag) 3, (ConstantInt NoTag) 5, (ConstantInt NoTag) 6]
>>>>>>> taggedints
            low =
                [ ( "x_Explicit"
                  , DomainMatrix   (intDomain 1 4) (intDomain 0 9)
                  , ConstantAbstract $ AbsLitMatrix (intDomain 1 4)
<<<<<<< HEAD
                        [ConstantInt Nothing 2,ConstantInt Nothing 3,ConstantInt Nothing 5,ConstantInt Nothing 6]
||||||| merged common ancestors
                        [ConstantInt 2,ConstantInt 3,ConstantInt 5,ConstantInt 6]
=======
                        [(ConstantInt NoTag) 2,(ConstantInt NoTag) 3,(ConstantInt NoTag) 5,(ConstantInt NoTag) 6]
>>>>>>> taggedints
                  ) ]
        in  testCases "x" highDomain highConstant Just low low

    , testCase "Explicit: set (size 4) of set (size 2) of int {auto}" $ testCasesAuto "x"
<<<<<<< HEAD
        ( DomainSet Set_Explicit (SetAttr (SizeAttr_Size (ConstantInt Nothing 4)))
            ( DomainSet Set_Explicit (SetAttr (SizeAttr_Size (ConstantInt Nothing 2)))
||||||| merged common ancestors
        ( DomainSet Set_Explicit (SetAttr (SizeAttr_Size (ConstantInt 4)))
            ( DomainSet Set_Explicit (SetAttr (SizeAttr_Size (ConstantInt 2)))
=======
        ( DomainSet Set_Explicit (SetAttr (SizeAttr_Size ((ConstantInt NoTag) 4)))
            ( DomainSet Set_Explicit (SetAttr (SizeAttr_Size ((ConstantInt NoTag) 2)))
>>>>>>> taggedints
                (intDomain 0 9)
            )
        )
        ( ConstantAbstract $ AbsLitSet
<<<<<<< HEAD
            [ ConstantAbstract $ AbsLitSet [ConstantInt Nothing 2, ConstantInt Nothing 3]
            , ConstantAbstract $ AbsLitSet [ConstantInt Nothing 5, ConstantInt Nothing 6]
            , ConstantAbstract $ AbsLitSet [ConstantInt Nothing 5, ConstantInt Nothing 7]
            , ConstantAbstract $ AbsLitSet [ConstantInt Nothing 5, ConstantInt Nothing 8]
||||||| merged common ancestors
            [ ConstantAbstract $ AbsLitSet [ConstantInt 2, ConstantInt 3]
            , ConstantAbstract $ AbsLitSet [ConstantInt 5, ConstantInt 6]
            , ConstantAbstract $ AbsLitSet [ConstantInt 5, ConstantInt 7]
            , ConstantAbstract $ AbsLitSet [ConstantInt 5, ConstantInt 8]
=======
            [ ConstantAbstract $ AbsLitSet [(ConstantInt NoTag) 2, (ConstantInt NoTag) 3]
            , ConstantAbstract $ AbsLitSet [(ConstantInt NoTag) 5, (ConstantInt NoTag) 6]
            , ConstantAbstract $ AbsLitSet [(ConstantInt NoTag) 5, (ConstantInt NoTag) 7]
            , ConstantAbstract $ AbsLitSet [(ConstantInt NoTag) 5, (ConstantInt NoTag) 8]
>>>>>>> taggedints
            ] )

    , testCase "Explicit: set (size 4) of set (size 2) of int" $
        let
            highDomain =
<<<<<<< HEAD
                DomainSet Set_Explicit (SetAttr (SizeAttr_Size (ConstantInt Nothing 4)))
                    (DomainSet Set_Explicit (SetAttr (SizeAttr_Size (ConstantInt Nothing 2)))
||||||| merged common ancestors
                DomainSet Set_Explicit (SetAttr (SizeAttr_Size (ConstantInt 4)))
                    (DomainSet Set_Explicit (SetAttr (SizeAttr_Size (ConstantInt 2)))
=======
                DomainSet Set_Explicit (SetAttr (SizeAttr_Size ((ConstantInt NoTag) 4)))
                    (DomainSet Set_Explicit (SetAttr (SizeAttr_Size ((ConstantInt NoTag) 2)))
>>>>>>> taggedints
                        (intDomain 0 9))
            highConstant =
                ConstantAbstract $ AbsLitSet
<<<<<<< HEAD
                    [ ConstantAbstract $ AbsLitSet [ConstantInt Nothing 2, ConstantInt Nothing 3]
                    , ConstantAbstract $ AbsLitSet [ConstantInt Nothing 5, ConstantInt Nothing 6]
                    , ConstantAbstract $ AbsLitSet [ConstantInt Nothing 5, ConstantInt Nothing 7]
                    , ConstantAbstract $ AbsLitSet [ConstantInt Nothing 5, ConstantInt Nothing 8]
||||||| merged common ancestors
                    [ ConstantAbstract $ AbsLitSet [ConstantInt 2, ConstantInt 3]
                    , ConstantAbstract $ AbsLitSet [ConstantInt 5, ConstantInt 6]
                    , ConstantAbstract $ AbsLitSet [ConstantInt 5, ConstantInt 7]
                    , ConstantAbstract $ AbsLitSet [ConstantInt 5, ConstantInt 8]
=======
                    [ ConstantAbstract $ AbsLitSet [(ConstantInt NoTag) 2, (ConstantInt NoTag) 3]
                    , ConstantAbstract $ AbsLitSet [(ConstantInt NoTag) 5, (ConstantInt NoTag) 6]
                    , ConstantAbstract $ AbsLitSet [(ConstantInt NoTag) 5, (ConstantInt NoTag) 7]
                    , ConstantAbstract $ AbsLitSet [(ConstantInt NoTag) 5, (ConstantInt NoTag) 8]
>>>>>>> taggedints
                    ]
            mid =
                [ ( "x_ExplicitR3"
<<<<<<< HEAD
                  , DomainMatrix   (intDomain 1 4) (DomainSet Set_Explicit (SetAttr (SizeAttr_Size (ConstantInt Nothing 2))) (intDomain 0 9))
||||||| merged common ancestors
                  , DomainMatrix   (intDomain 1 4) (DomainSet Set_Explicit (SetAttr (SizeAttr_Size (ConstantInt 2))) (intDomain 0 9))
=======
                  , DomainMatrix   (intDomain 1 4) (DomainSet Set_Explicit (SetAttr (SizeAttr_Size ((ConstantInt NoTag) 2))) (intDomain 0 9))
>>>>>>> taggedints
                  , ConstantAbstract $ AbsLitMatrix (intDomain 1 4)
<<<<<<< HEAD
                        [ ConstantAbstract $ AbsLitSet [ConstantInt Nothing 2, ConstantInt Nothing 3]
                        , ConstantAbstract $ AbsLitSet [ConstantInt Nothing 5, ConstantInt Nothing 6]
                        , ConstantAbstract $ AbsLitSet [ConstantInt Nothing 5, ConstantInt Nothing 7]
                        , ConstantAbstract $ AbsLitSet [ConstantInt Nothing 5, ConstantInt Nothing 8]
||||||| merged common ancestors
                        [ ConstantAbstract $ AbsLitSet [ConstantInt 2, ConstantInt 3]
                        , ConstantAbstract $ AbsLitSet [ConstantInt 5, ConstantInt 6]
                        , ConstantAbstract $ AbsLitSet [ConstantInt 5, ConstantInt 7]
                        , ConstantAbstract $ AbsLitSet [ConstantInt 5, ConstantInt 8]
=======
                        [ ConstantAbstract $ AbsLitSet [(ConstantInt NoTag) 2, (ConstantInt NoTag) 3]
                        , ConstantAbstract $ AbsLitSet [(ConstantInt NoTag) 5, (ConstantInt NoTag) 6]
                        , ConstantAbstract $ AbsLitSet [(ConstantInt NoTag) 5, (ConstantInt NoTag) 7]
                        , ConstantAbstract $ AbsLitSet [(ConstantInt NoTag) 5, (ConstantInt NoTag) 8]
>>>>>>> taggedints
                        ]
                  ) ]
            low =
                [ ( "x_ExplicitR3_Explicit"
                  , DomainMatrix   (intDomain 1 4) (DomainMatrix (intDomain 1 2) (intDomain 0 9))
                  , ConstantAbstract $ AbsLitMatrix (intDomain 1 4)
<<<<<<< HEAD
                        [ ConstantAbstract $ AbsLitMatrix (intDomain 1 2) [ConstantInt Nothing 2, ConstantInt Nothing 3]
                        , ConstantAbstract $ AbsLitMatrix (intDomain 1 2) [ConstantInt Nothing 5, ConstantInt Nothing 6]
                        , ConstantAbstract $ AbsLitMatrix (intDomain 1 2) [ConstantInt Nothing 5, ConstantInt Nothing 7]
                        , ConstantAbstract $ AbsLitMatrix (intDomain 1 2) [ConstantInt Nothing 5, ConstantInt Nothing 8]
||||||| merged common ancestors
                        [ ConstantAbstract $ AbsLitMatrix (intDomain 1 2) [ConstantInt 2, ConstantInt 3]
                        , ConstantAbstract $ AbsLitMatrix (intDomain 1 2) [ConstantInt 5, ConstantInt 6]
                        , ConstantAbstract $ AbsLitMatrix (intDomain 1 2) [ConstantInt 5, ConstantInt 7]
                        , ConstantAbstract $ AbsLitMatrix (intDomain 1 2) [ConstantInt 5, ConstantInt 8]
=======
                        [ ConstantAbstract $ AbsLitMatrix (intDomain 1 2) [(ConstantInt NoTag) 2, (ConstantInt NoTag) 3]
                        , ConstantAbstract $ AbsLitMatrix (intDomain 1 2) [(ConstantInt NoTag) 5, (ConstantInt NoTag) 6]
                        , ConstantAbstract $ AbsLitMatrix (intDomain 1 2) [(ConstantInt NoTag) 5, (ConstantInt NoTag) 7]
                        , ConstantAbstract $ AbsLitMatrix (intDomain 1 2) [(ConstantInt NoTag) 5, (ConstantInt NoTag) 8]
>>>>>>> taggedints
                        ]
                  ) ]
        in  testCases "x" highDomain highConstant Just mid low

    , testCase "Explicit: set (size 4) of set (size 2) of (int, bool) {auto}" $ testCasesAuto "x"
<<<<<<< HEAD
        ( DomainSet Set_Explicit (SetAttr (SizeAttr_Size (ConstantInt Nothing 4)))
            ( DomainSet Set_Explicit (SetAttr (SizeAttr_Size (ConstantInt Nothing 2)))
||||||| merged common ancestors
        ( DomainSet Set_Explicit (SetAttr (SizeAttr_Size (ConstantInt 4)))
            ( DomainSet Set_Explicit (SetAttr (SizeAttr_Size (ConstantInt 2)))
=======
        ( DomainSet Set_Explicit (SetAttr (SizeAttr_Size ((ConstantInt NoTag) 4)))
            ( DomainSet Set_Explicit (SetAttr (SizeAttr_Size ((ConstantInt NoTag) 2)))
>>>>>>> taggedints
                (DomainTuple [intDomain 0 9, DomainBool])
            )
        )
        ( ConstantAbstract $ AbsLitSet
<<<<<<< HEAD
            [ ConstantAbstract $ AbsLitSet [ ConstantAbstract $ AbsLitTuple [ConstantInt Nothing 2, ConstantBool False]
                          , ConstantAbstract $ AbsLitTuple [ConstantInt Nothing 3, ConstantBool True ]
||||||| merged common ancestors
            [ ConstantAbstract $ AbsLitSet [ ConstantAbstract $ AbsLitTuple [ConstantInt 2, ConstantBool False]
                          , ConstantAbstract $ AbsLitTuple [ConstantInt 3, ConstantBool True ]
=======
            [ ConstantAbstract $ AbsLitSet [ ConstantAbstract $ AbsLitTuple [(ConstantInt NoTag) 2, ConstantBool False]
                          , ConstantAbstract $ AbsLitTuple [(ConstantInt NoTag) 3, ConstantBool True ]
>>>>>>> taggedints
                          ]
<<<<<<< HEAD
            , ConstantAbstract $ AbsLitSet [ ConstantAbstract $ AbsLitTuple [ConstantInt Nothing 5, ConstantBool True ]
                          , ConstantAbstract $ AbsLitTuple [ConstantInt Nothing 6, ConstantBool True ]
||||||| merged common ancestors
            , ConstantAbstract $ AbsLitSet [ ConstantAbstract $ AbsLitTuple [ConstantInt 5, ConstantBool True ]
                          , ConstantAbstract $ AbsLitTuple [ConstantInt 6, ConstantBool True ]
=======
            , ConstantAbstract $ AbsLitSet [ ConstantAbstract $ AbsLitTuple [(ConstantInt NoTag) 5, ConstantBool True ]
                          , ConstantAbstract $ AbsLitTuple [(ConstantInt NoTag) 6, ConstantBool True ]
>>>>>>> taggedints
                          ]
<<<<<<< HEAD
            , ConstantAbstract $ AbsLitSet [ ConstantAbstract $ AbsLitTuple [ConstantInt Nothing 5, ConstantBool True ]
                          , ConstantAbstract $ AbsLitTuple [ConstantInt Nothing 7, ConstantBool False]
||||||| merged common ancestors
            , ConstantAbstract $ AbsLitSet [ ConstantAbstract $ AbsLitTuple [ConstantInt 5, ConstantBool True ]
                          , ConstantAbstract $ AbsLitTuple [ConstantInt 7, ConstantBool False]
=======
            , ConstantAbstract $ AbsLitSet [ ConstantAbstract $ AbsLitTuple [(ConstantInt NoTag) 5, ConstantBool True ]
                          , ConstantAbstract $ AbsLitTuple [(ConstantInt NoTag) 7, ConstantBool False]
>>>>>>> taggedints
                          ]
<<<<<<< HEAD
            , ConstantAbstract $ AbsLitSet [ ConstantAbstract $ AbsLitTuple [ConstantInt Nothing 5, ConstantBool False]
                          , ConstantAbstract $ AbsLitTuple [ConstantInt Nothing 8, ConstantBool False]
||||||| merged common ancestors
            , ConstantAbstract $ AbsLitSet [ ConstantAbstract $ AbsLitTuple [ConstantInt 5, ConstantBool False]
                          , ConstantAbstract $ AbsLitTuple [ConstantInt 8, ConstantBool False]
=======
            , ConstantAbstract $ AbsLitSet [ ConstantAbstract $ AbsLitTuple [(ConstantInt NoTag) 5, ConstantBool False]
                          , ConstantAbstract $ AbsLitTuple [(ConstantInt NoTag) 8, ConstantBool False]
>>>>>>> taggedints
                          ]
            ] )

    , testCase "Explicit: set (size 4) of (int, set (size 2) of (int, bool)) {auto}" $ testCasesAuto "x"
<<<<<<< HEAD
        ( DomainSet Set_Explicit (SetAttr (SizeAttr_Size (ConstantInt Nothing 4)))
||||||| merged common ancestors
        ( DomainSet Set_Explicit (SetAttr (SizeAttr_Size (ConstantInt 4)))
=======
        ( DomainSet Set_Explicit (SetAttr (SizeAttr_Size ((ConstantInt NoTag) 4)))
>>>>>>> taggedints
            ( DomainTuple
                [ intDomain 0 8
<<<<<<< HEAD
                , DomainSet Set_Explicit (SetAttr (SizeAttr_Size (ConstantInt Nothing 2)))
||||||| merged common ancestors
                , DomainSet Set_Explicit (SetAttr (SizeAttr_Size (ConstantInt 2)))
=======
                , DomainSet Set_Explicit (SetAttr (SizeAttr_Size ((ConstantInt NoTag) 2)))
>>>>>>> taggedints
                    (DomainTuple [intDomain 0 9, DomainBool])
                ]
            )
        )
        ( ConstantAbstract $ AbsLitSet
            [ ConstantAbstract $ AbsLitTuple
<<<<<<< HEAD
                [ ConstantInt Nothing 1
||||||| merged common ancestors
                [ ConstantInt 1
=======
                [ (ConstantInt NoTag) 1
>>>>>>> taggedints
                , ConstantAbstract $ AbsLitSet
<<<<<<< HEAD
                    [ ConstantAbstract $ AbsLitTuple [ConstantInt Nothing 2, ConstantBool False]
                    , ConstantAbstract $ AbsLitTuple [ConstantInt Nothing 3, ConstantBool True ]
||||||| merged common ancestors
                    [ ConstantAbstract $ AbsLitTuple [ConstantInt 2, ConstantBool False]
                    , ConstantAbstract $ AbsLitTuple [ConstantInt 3, ConstantBool True ]
=======
                    [ ConstantAbstract $ AbsLitTuple [(ConstantInt NoTag) 2, ConstantBool False]
                    , ConstantAbstract $ AbsLitTuple [(ConstantInt NoTag) 3, ConstantBool True ]
>>>>>>> taggedints
                    ]
                ]
            , ConstantAbstract $ AbsLitTuple
<<<<<<< HEAD
                [ ConstantInt Nothing 2
||||||| merged common ancestors
                [ ConstantInt 2
=======
                [ (ConstantInt NoTag) 2
>>>>>>> taggedints
                , ConstantAbstract $ AbsLitSet
<<<<<<< HEAD
                    [ ConstantAbstract $ AbsLitTuple [ConstantInt Nothing 5, ConstantBool True ]
                    , ConstantAbstract $ AbsLitTuple [ConstantInt Nothing 6, ConstantBool True ]
||||||| merged common ancestors
                    [ ConstantAbstract $ AbsLitTuple [ConstantInt 5, ConstantBool True ]
                    , ConstantAbstract $ AbsLitTuple [ConstantInt 6, ConstantBool True ]
=======
                    [ ConstantAbstract $ AbsLitTuple [(ConstantInt NoTag) 5, ConstantBool True ]
                    , ConstantAbstract $ AbsLitTuple [(ConstantInt NoTag) 6, ConstantBool True ]
>>>>>>> taggedints
                    ]
                ]
            , ConstantAbstract $ AbsLitTuple
<<<<<<< HEAD
                [ ConstantInt Nothing 3
||||||| merged common ancestors
                [ ConstantInt 3
=======
                [ (ConstantInt NoTag) 3
>>>>>>> taggedints
                , ConstantAbstract $ AbsLitSet
<<<<<<< HEAD
                    [ ConstantAbstract $ AbsLitTuple [ConstantInt Nothing 5, ConstantBool True ]
                    , ConstantAbstract $ AbsLitTuple [ConstantInt Nothing 7, ConstantBool False]
||||||| merged common ancestors
                    [ ConstantAbstract $ AbsLitTuple [ConstantInt 5, ConstantBool True ]
                    , ConstantAbstract $ AbsLitTuple [ConstantInt 7, ConstantBool False]
=======
                    [ ConstantAbstract $ AbsLitTuple [(ConstantInt NoTag) 5, ConstantBool True ]
                    , ConstantAbstract $ AbsLitTuple [(ConstantInt NoTag) 7, ConstantBool False]
>>>>>>> taggedints
                    ]
                ]
            , ConstantAbstract $ AbsLitTuple
<<<<<<< HEAD
                [ ConstantInt Nothing 4
||||||| merged common ancestors
                [ ConstantInt 4
=======
                [ (ConstantInt NoTag) 4
>>>>>>> taggedints
                , ConstantAbstract $ AbsLitSet
<<<<<<< HEAD
                    [ ConstantAbstract $ AbsLitTuple [ConstantInt Nothing 5, ConstantBool False]
                    , ConstantAbstract $ AbsLitTuple [ConstantInt Nothing 8, ConstantBool False]
||||||| merged common ancestors
                    [ ConstantAbstract $ AbsLitTuple [ConstantInt 5, ConstantBool False]
                    , ConstantAbstract $ AbsLitTuple [ConstantInt 8, ConstantBool False]
=======
                    [ ConstantAbstract $ AbsLitTuple [(ConstantInt NoTag) 5, ConstantBool False]
                    , ConstantAbstract $ AbsLitTuple [(ConstantInt NoTag) 8, ConstantBool False]
>>>>>>> taggedints
                    ]
                ]
            ] )

-- ExplicitVarSizeWithMarker
    , testCase "ExplicitVarSizeWithMarker: set (maxSize 4) of int {auto}" $ testCasesAuto "x"
        ( DomainSet
            Set_ExplicitVarSizeWithMarker
<<<<<<< HEAD
            (SetAttr (SizeAttr_MaxSize (ConstantInt Nothing 4)))
||||||| merged common ancestors
            (SetAttr (SizeAttr_MaxSize (ConstantInt 4)))
=======
            (SetAttr (SizeAttr_MaxSize ((ConstantInt NoTag) 4)))
>>>>>>> taggedints
            (intDomain 0 9) )
<<<<<<< HEAD
        ( ConstantAbstract $ AbsLitSet [ConstantInt Nothing 2, ConstantInt Nothing 5] )
||||||| merged common ancestors
        ( ConstantAbstract $ AbsLitSet [ConstantInt 2, ConstantInt 5] )
=======
        ( ConstantAbstract $ AbsLitSet [(ConstantInt NoTag) 2, (ConstantInt NoTag) 5] )
>>>>>>> taggedints

    , testCase "ExplicitVarSizeWithMarker: set (maxSize 4) of int" $
        let
            highDomain =
<<<<<<< HEAD
                DomainSet Set_ExplicitVarSizeWithMarker (SetAttr (SizeAttr_MaxSize (ConstantInt Nothing 4))) (intDomain 0 9)
||||||| merged common ancestors
                DomainSet Set_ExplicitVarSizeWithMarker (SetAttr (SizeAttr_MaxSize (ConstantInt 4))) (intDomain 0 9)
=======
                DomainSet Set_ExplicitVarSizeWithMarker (SetAttr (SizeAttr_MaxSize ((ConstantInt NoTag) 4))) (intDomain 0 9)
>>>>>>> taggedints
            highConstant =
<<<<<<< HEAD
                ConstantAbstract $ AbsLitSet [ConstantInt Nothing 2, ConstantInt Nothing 5]
||||||| merged common ancestors
                ConstantAbstract $ AbsLitSet [ConstantInt 2, ConstantInt 5]
=======
                ConstantAbstract $ AbsLitSet [(ConstantInt NoTag) 2, (ConstantInt NoTag) 5]
>>>>>>> taggedints
            low =
                [ ( "x_ExplicitVarSizeWithMarker_Marker"
                  , intDomain 0 4
<<<<<<< HEAD
                  , ConstantInt Nothing 2
||||||| merged common ancestors
                  , ConstantInt 2
=======
                  , (ConstantInt NoTag) 2
>>>>>>> taggedints
                  )
                , ( "x_ExplicitVarSizeWithMarker_Values"
                  , DomainMatrix (intDomain 1 4) (intDomain 0 9)
<<<<<<< HEAD
                  , ConstantAbstract $ AbsLitMatrix (intDomain 1 4) [ConstantInt Nothing 2,ConstantInt Nothing 5,ConstantInt Nothing 0,ConstantInt Nothing 0]
||||||| merged common ancestors
                  , ConstantAbstract $ AbsLitMatrix (intDomain 1 4) [ConstantInt 2,ConstantInt 5,ConstantInt 0,ConstantInt 0]
=======
                  , ConstantAbstract $ AbsLitMatrix (intDomain 1 4) [(ConstantInt NoTag) 2,(ConstantInt NoTag) 5,(ConstantInt NoTag) 0,(ConstantInt NoTag) 0]
>>>>>>> taggedints
                  )
                ]
        in  testCases "x" highDomain highConstant Just low low

    , testCase "ExplicitVarSizeWithMarker: set (maxSize 4) of set (maxSize 3) int {auto}" $ testCasesAuto "x"
<<<<<<< HEAD
        ( DomainSet Set_ExplicitVarSizeWithMarker (SetAttr (SizeAttr_MaxSize (ConstantInt Nothing 4)))
            ( DomainSet Set_ExplicitVarSizeWithMarker (SetAttr (SizeAttr_MaxSize (ConstantInt Nothing 3)))
||||||| merged common ancestors
        ( DomainSet Set_ExplicitVarSizeWithMarker (SetAttr (SizeAttr_MaxSize (ConstantInt 4)))
            ( DomainSet Set_ExplicitVarSizeWithMarker (SetAttr (SizeAttr_MaxSize (ConstantInt 3)))
=======
        ( DomainSet Set_ExplicitVarSizeWithMarker (SetAttr (SizeAttr_MaxSize ((ConstantInt NoTag) 4)))
            ( DomainSet Set_ExplicitVarSizeWithMarker (SetAttr (SizeAttr_MaxSize ((ConstantInt NoTag) 3)))
>>>>>>> taggedints
                (intDomain 0 9)
            )
        )
        ( ConstantAbstract $ AbsLitSet
<<<<<<< HEAD
            [ ConstantAbstract $ AbsLitSet [ConstantInt Nothing 2]
            , ConstantAbstract $ AbsLitSet [ConstantInt Nothing 2, ConstantInt Nothing 5]
            , ConstantAbstract $ AbsLitSet [ConstantInt Nothing 3, ConstantInt Nothing 4, ConstantInt Nothing 6]
||||||| merged common ancestors
            [ ConstantAbstract $ AbsLitSet [ConstantInt 2]
            , ConstantAbstract $ AbsLitSet [ConstantInt 2, ConstantInt 5]
            , ConstantAbstract $ AbsLitSet [ConstantInt 3, ConstantInt 4, ConstantInt 6]
=======
            [ ConstantAbstract $ AbsLitSet [(ConstantInt NoTag) 2]
            , ConstantAbstract $ AbsLitSet [(ConstantInt NoTag) 2, (ConstantInt NoTag) 5]
            , ConstantAbstract $ AbsLitSet [(ConstantInt NoTag) 3, (ConstantInt NoTag) 4, (ConstantInt NoTag) 6]
>>>>>>> taggedints
            ]
        )

    , testCase "ExplicitVarSizeWithMarker: set (maxSize 4) of set (maxSize 3) int" $
        let
            highDomain =
<<<<<<< HEAD
                DomainSet Set_ExplicitVarSizeWithMarker (SetAttr (SizeAttr_MaxSize (ConstantInt Nothing 4)))
                    ( DomainSet Set_ExplicitVarSizeWithMarker (SetAttr (SizeAttr_MaxSize (ConstantInt Nothing 3)))
||||||| merged common ancestors
                DomainSet Set_ExplicitVarSizeWithMarker (SetAttr (SizeAttr_MaxSize (ConstantInt 4)))
                    ( DomainSet Set_ExplicitVarSizeWithMarker (SetAttr (SizeAttr_MaxSize (ConstantInt 3)))
=======
                DomainSet Set_ExplicitVarSizeWithMarker (SetAttr (SizeAttr_MaxSize ((ConstantInt NoTag) 4)))
                    ( DomainSet Set_ExplicitVarSizeWithMarker (SetAttr (SizeAttr_MaxSize ((ConstantInt NoTag) 3)))
>>>>>>> taggedints
                        (intDomain 0 9) )
            highConstant =
                ConstantAbstract $ AbsLitSet
<<<<<<< HEAD
                    [ ConstantAbstract $ AbsLitSet [ConstantInt Nothing 2]
                    , ConstantAbstract $ AbsLitSet [ConstantInt Nothing 2, ConstantInt Nothing 5]
                    , ConstantAbstract $ AbsLitSet [ConstantInt Nothing 3, ConstantInt Nothing 4, ConstantInt Nothing 6]
||||||| merged common ancestors
                    [ ConstantAbstract $ AbsLitSet [ConstantInt 2]
                    , ConstantAbstract $ AbsLitSet [ConstantInt 2, ConstantInt 5]
                    , ConstantAbstract $ AbsLitSet [ConstantInt 3, ConstantInt 4, ConstantInt 6]
=======
                    [ ConstantAbstract $ AbsLitSet [(ConstantInt NoTag) 2]
                    , ConstantAbstract $ AbsLitSet [(ConstantInt NoTag) 2, (ConstantInt NoTag) 5]
                    , ConstantAbstract $ AbsLitSet [(ConstantInt NoTag) 3, (ConstantInt NoTag) 4, (ConstantInt NoTag) 6]
>>>>>>> taggedints
                    ]
            mid =
                [ ( "x_ExplicitVarSizeWithMarkerR5_Marker"
                  , intDomain 0 4
<<<<<<< HEAD
                  , ConstantInt Nothing 3
||||||| merged common ancestors
                  , ConstantInt 3
=======
                  , (ConstantInt NoTag) 3
>>>>>>> taggedints
                  )
                , ( "x_ExplicitVarSizeWithMarkerR5_Values"
<<<<<<< HEAD
                  , DomainMatrix   (intDomain 1 4) (DomainSet Set_ExplicitVarSizeWithMarker (SetAttr (SizeAttr_MaxSize (ConstantInt Nothing 3))) (intDomain 0 9))
||||||| merged common ancestors
                  , DomainMatrix   (intDomain 1 4) (DomainSet Set_ExplicitVarSizeWithMarker (SetAttr (SizeAttr_MaxSize (ConstantInt 3))) (intDomain 0 9))
=======
                  , DomainMatrix   (intDomain 1 4) (DomainSet Set_ExplicitVarSizeWithMarker (SetAttr (SizeAttr_MaxSize ((ConstantInt NoTag) 3))) (intDomain 0 9))
>>>>>>> taggedints
                  , ConstantAbstract $ AbsLitMatrix (intDomain 1 4)
<<<<<<< HEAD
                      [ ConstantAbstract $ AbsLitSet [ConstantInt Nothing 2]
                      , ConstantAbstract $ AbsLitSet [ConstantInt Nothing 2,ConstantInt Nothing 5]
                      , ConstantAbstract $ AbsLitSet [ConstantInt Nothing 3,ConstantInt Nothing 4,ConstantInt Nothing 6]
||||||| merged common ancestors
                      [ ConstantAbstract $ AbsLitSet [ConstantInt 2]
                      , ConstantAbstract $ AbsLitSet [ConstantInt 2,ConstantInt 5]
                      , ConstantAbstract $ AbsLitSet [ConstantInt 3,ConstantInt 4,ConstantInt 6]
=======
                      [ ConstantAbstract $ AbsLitSet [(ConstantInt NoTag) 2]
                      , ConstantAbstract $ AbsLitSet [(ConstantInt NoTag) 2,(ConstantInt NoTag) 5]
                      , ConstantAbstract $ AbsLitSet [(ConstantInt NoTag) 3,(ConstantInt NoTag) 4,(ConstantInt NoTag) 6]
>>>>>>> taggedints
                      , ConstantAbstract $ AbsLitSet []
                      ]
                  )
                ]
            low =
                [ ( "x_ExplicitVarSizeWithMarkerR5_Marker"
                  , intDomain 0 4
<<<<<<< HEAD
                  , ConstantInt Nothing 3
||||||| merged common ancestors
                  , ConstantInt 3
=======
                  , (ConstantInt NoTag) 3
>>>>>>> taggedints
                  )
                , ( "x_ExplicitVarSizeWithMarkerR5_Values_ExplicitVarSizeWithMarker_Marker"
                  , DomainMatrix   (intDomain 1 4) (intDomain 0 3)
<<<<<<< HEAD
                  , ConstantAbstract $ AbsLitMatrix (intDomain 1 4) [ConstantInt Nothing 1,ConstantInt Nothing 2,ConstantInt Nothing 3,ConstantInt Nothing 0]
||||||| merged common ancestors
                  , ConstantAbstract $ AbsLitMatrix (intDomain 1 4) [ConstantInt 1,ConstantInt 2,ConstantInt 3,ConstantInt 0]
=======
                  , ConstantAbstract $ AbsLitMatrix (intDomain 1 4) [(ConstantInt NoTag) 1,(ConstantInt NoTag) 2,(ConstantInt NoTag) 3,(ConstantInt NoTag) 0]
>>>>>>> taggedints
                  )
                , ( "x_ExplicitVarSizeWithMarkerR5_Values_ExplicitVarSizeWithMarker_Values"
                  , DomainMatrix   (intDomain 1 4) (DomainMatrix (intDomain 1 3) (intDomain 0 9))
                  , ConstantAbstract $ AbsLitMatrix (intDomain 1 4)
<<<<<<< HEAD
                      [ ConstantAbstract $ AbsLitMatrix (intDomain 1 3) [ConstantInt Nothing 2,ConstantInt Nothing 0,ConstantInt Nothing 0]
                      , ConstantAbstract $ AbsLitMatrix (intDomain 1 3) [ConstantInt Nothing 2,ConstantInt Nothing 5,ConstantInt Nothing 0]
                      , ConstantAbstract $ AbsLitMatrix (intDomain 1 3) [ConstantInt Nothing 3,ConstantInt Nothing 4,ConstantInt Nothing 6]
                      , ConstantAbstract $ AbsLitMatrix (intDomain 1 3) [ConstantInt Nothing 0,ConstantInt Nothing 0,ConstantInt Nothing 0]
||||||| merged common ancestors
                      [ ConstantAbstract $ AbsLitMatrix (intDomain 1 3) [ConstantInt 2,ConstantInt 0,ConstantInt 0]
                      , ConstantAbstract $ AbsLitMatrix (intDomain 1 3) [ConstantInt 2,ConstantInt 5,ConstantInt 0]
                      , ConstantAbstract $ AbsLitMatrix (intDomain 1 3) [ConstantInt 3,ConstantInt 4,ConstantInt 6]
                      , ConstantAbstract $ AbsLitMatrix (intDomain 1 3) [ConstantInt 0,ConstantInt 0,ConstantInt 0]
=======
                      [ ConstantAbstract $ AbsLitMatrix (intDomain 1 3) [(ConstantInt NoTag) 2,(ConstantInt NoTag) 0,(ConstantInt NoTag) 0]
                      , ConstantAbstract $ AbsLitMatrix (intDomain 1 3) [(ConstantInt NoTag) 2,(ConstantInt NoTag) 5,(ConstantInt NoTag) 0]
                      , ConstantAbstract $ AbsLitMatrix (intDomain 1 3) [(ConstantInt NoTag) 3,(ConstantInt NoTag) 4,(ConstantInt NoTag) 6]
                      , ConstantAbstract $ AbsLitMatrix (intDomain 1 3) [(ConstantInt NoTag) 0,(ConstantInt NoTag) 0,(ConstantInt NoTag) 0]
>>>>>>> taggedints
                      ]
                  )
                ]
        in  testCases "x" highDomain highConstant Just mid low

-- ExplicitVarSizeWithFlags
    , testCase "ExplicitVarSizeWithFlags: set (maxSize 4) of int {auto}" $ testCasesAuto "x"
        ( DomainSet
            Set_ExplicitVarSizeWithFlags
<<<<<<< HEAD
            (SetAttr (SizeAttr_MaxSize (ConstantInt Nothing 4)))
||||||| merged common ancestors
            (SetAttr (SizeAttr_MaxSize (ConstantInt 4)))
=======
            (SetAttr (SizeAttr_MaxSize ((ConstantInt NoTag) 4)))
>>>>>>> taggedints
            (intDomain 0 9) )
<<<<<<< HEAD
        ( ConstantAbstract $ AbsLitSet [ConstantInt Nothing 2, ConstantInt Nothing 5] )
||||||| merged common ancestors
        ( ConstantAbstract $ AbsLitSet [ConstantInt 2, ConstantInt 5] )
=======
        ( ConstantAbstract $ AbsLitSet [(ConstantInt NoTag) 2, (ConstantInt NoTag) 5] )
>>>>>>> taggedints

    , testCase "ExplicitVarSizeWithFlags: set (maxSize 4) of int" $
        let
            highDomain =
<<<<<<< HEAD
                DomainSet Set_ExplicitVarSizeWithFlags (SetAttr (SizeAttr_MaxSize (ConstantInt Nothing 4))) (intDomain 0 9)
||||||| merged common ancestors
                DomainSet Set_ExplicitVarSizeWithFlags (SetAttr (SizeAttr_MaxSize (ConstantInt 4))) (intDomain 0 9)
=======
                DomainSet Set_ExplicitVarSizeWithFlags (SetAttr (SizeAttr_MaxSize ((ConstantInt NoTag) 4))) (intDomain 0 9)
>>>>>>> taggedints
            highConstant =
<<<<<<< HEAD
                ConstantAbstract $ AbsLitSet [ConstantInt Nothing 2, ConstantInt Nothing 5]
||||||| merged common ancestors
                ConstantAbstract $ AbsLitSet [ConstantInt 2, ConstantInt 5]
=======
                ConstantAbstract $ AbsLitSet [(ConstantInt NoTag) 2, (ConstantInt NoTag) 5]
>>>>>>> taggedints
            low =
                [ ( "x_ExplicitVarSizeWithFlags_Flags"
                  , DomainMatrix   (intDomain 1 4) DomainBool
                  , ConstantAbstract $ AbsLitMatrix (intDomain 1 4) [ConstantBool True,ConstantBool True,ConstantBool False,ConstantBool False]
                  )
                , ( "x_ExplicitVarSizeWithFlags_Values"
                  , DomainMatrix   (intDomain 1 4) (intDomain 0 9)
<<<<<<< HEAD
                  , ConstantAbstract $ AbsLitMatrix (intDomain 1 4) [ConstantInt Nothing 2,ConstantInt Nothing 5,ConstantInt Nothing 0,ConstantInt Nothing 0]
||||||| merged common ancestors
                  , ConstantAbstract $ AbsLitMatrix (intDomain 1 4) [ConstantInt 2,ConstantInt 5,ConstantInt 0,ConstantInt 0]
=======
                  , ConstantAbstract $ AbsLitMatrix (intDomain 1 4) [(ConstantInt NoTag) 2,(ConstantInt NoTag) 5,(ConstantInt NoTag) 0,(ConstantInt NoTag) 0]
>>>>>>> taggedints
                  )
                ]
        in  testCases "x" highDomain highConstant Just low low

    , testCase "ExplicitVarSizeWithFlags: set (maxSize 4) of set (maxSize 3) int {auto}" $ testCasesAuto "x"
<<<<<<< HEAD
        ( DomainSet Set_ExplicitVarSizeWithFlags (SetAttr (SizeAttr_MaxSize (ConstantInt Nothing 4)))
            ( DomainSet Set_ExplicitVarSizeWithFlags (SetAttr (SizeAttr_MaxSize (ConstantInt Nothing 3)))
||||||| merged common ancestors
        ( DomainSet Set_ExplicitVarSizeWithFlags (SetAttr (SizeAttr_MaxSize (ConstantInt 4)))
            ( DomainSet Set_ExplicitVarSizeWithFlags (SetAttr (SizeAttr_MaxSize (ConstantInt 3)))
=======
        ( DomainSet Set_ExplicitVarSizeWithFlags (SetAttr (SizeAttr_MaxSize ((ConstantInt NoTag) 4)))
            ( DomainSet Set_ExplicitVarSizeWithFlags (SetAttr (SizeAttr_MaxSize ((ConstantInt NoTag) 3)))
>>>>>>> taggedints
                (intDomain 0 9)
            )
        )
        ( ConstantAbstract $ AbsLitSet
<<<<<<< HEAD
            [ ConstantAbstract $ AbsLitSet [ConstantInt Nothing 2]
            , ConstantAbstract $ AbsLitSet [ConstantInt Nothing 2, ConstantInt Nothing 5]
            , ConstantAbstract $ AbsLitSet [ConstantInt Nothing 3, ConstantInt Nothing 4, ConstantInt Nothing 6]
||||||| merged common ancestors
            [ ConstantAbstract $ AbsLitSet [ConstantInt 2]
            , ConstantAbstract $ AbsLitSet [ConstantInt 2, ConstantInt 5]
            , ConstantAbstract $ AbsLitSet [ConstantInt 3, ConstantInt 4, ConstantInt 6]
=======
            [ ConstantAbstract $ AbsLitSet [(ConstantInt NoTag) 2]
            , ConstantAbstract $ AbsLitSet [(ConstantInt NoTag) 2, (ConstantInt NoTag) 5]
            , ConstantAbstract $ AbsLitSet [(ConstantInt NoTag) 3, (ConstantInt NoTag) 4, (ConstantInt NoTag) 6]
>>>>>>> taggedints
            ]
        )

    , testCase "ExplicitVarSizeWithFlags: set (maxSize 4) of set (maxSize 3) int" $
        let
            highDomain =
<<<<<<< HEAD
                DomainSet Set_ExplicitVarSizeWithFlags (SetAttr (SizeAttr_MaxSize (ConstantInt Nothing 4)))
                    ( DomainSet Set_ExplicitVarSizeWithFlags (SetAttr (SizeAttr_MaxSize (ConstantInt Nothing 3)))
||||||| merged common ancestors
                DomainSet Set_ExplicitVarSizeWithFlags (SetAttr (SizeAttr_MaxSize (ConstantInt 4)))
                    ( DomainSet Set_ExplicitVarSizeWithFlags (SetAttr (SizeAttr_MaxSize (ConstantInt 3)))
=======
                DomainSet Set_ExplicitVarSizeWithFlags (SetAttr (SizeAttr_MaxSize ((ConstantInt NoTag) 4)))
                    ( DomainSet Set_ExplicitVarSizeWithFlags (SetAttr (SizeAttr_MaxSize ((ConstantInt NoTag) 3)))
>>>>>>> taggedints
                        (intDomain 0 9) )
            highConstant =
                ConstantAbstract $ AbsLitSet
<<<<<<< HEAD
                    [ ConstantAbstract $ AbsLitSet [ConstantInt Nothing 2]
                    , ConstantAbstract $ AbsLitSet [ConstantInt Nothing 2, ConstantInt Nothing 5]
                    , ConstantAbstract $ AbsLitSet [ConstantInt Nothing 3, ConstantInt Nothing 4, ConstantInt Nothing 6]
||||||| merged common ancestors
                    [ ConstantAbstract $ AbsLitSet [ConstantInt 2]
                    , ConstantAbstract $ AbsLitSet [ConstantInt 2, ConstantInt 5]
                    , ConstantAbstract $ AbsLitSet [ConstantInt 3, ConstantInt 4, ConstantInt 6]
=======
                    [ ConstantAbstract $ AbsLitSet [(ConstantInt NoTag) 2]
                    , ConstantAbstract $ AbsLitSet [(ConstantInt NoTag) 2, (ConstantInt NoTag) 5]
                    , ConstantAbstract $ AbsLitSet [(ConstantInt NoTag) 3, (ConstantInt NoTag) 4, (ConstantInt NoTag) 6]
>>>>>>> taggedints
                    ]
            mid =
                [ ( "x_ExplicitVarSizeWithFlagsR4_Flags"
                  , DomainMatrix   (intDomain 1 4) DomainBool
                  , ConstantAbstract $ AbsLitMatrix (intDomain 1 4) [ConstantBool True,ConstantBool True,ConstantBool True,ConstantBool False]
                  )
                , ( "x_ExplicitVarSizeWithFlagsR4_Values"
<<<<<<< HEAD
                  , DomainMatrix   (intDomain 1 4) (DomainSet Set_ExplicitVarSizeWithFlags (SetAttr (SizeAttr_MaxSize (ConstantInt Nothing 3))) (intDomain 0 9))
||||||| merged common ancestors
                  , DomainMatrix   (intDomain 1 4) (DomainSet Set_ExplicitVarSizeWithFlags (SetAttr (SizeAttr_MaxSize (ConstantInt 3))) (intDomain 0 9))
=======
                  , DomainMatrix   (intDomain 1 4) (DomainSet Set_ExplicitVarSizeWithFlags (SetAttr (SizeAttr_MaxSize ((ConstantInt NoTag) 3))) (intDomain 0 9))
>>>>>>> taggedints
                  , ConstantAbstract $ AbsLitMatrix (intDomain 1 4)
<<<<<<< HEAD
                      [ ConstantAbstract $ AbsLitSet [ConstantInt Nothing 2]
                      , ConstantAbstract $ AbsLitSet [ConstantInt Nothing 2,ConstantInt Nothing 5]
                      , ConstantAbstract $ AbsLitSet [ConstantInt Nothing 3,ConstantInt Nothing 4,ConstantInt Nothing 6]
||||||| merged common ancestors
                      [ ConstantAbstract $ AbsLitSet [ConstantInt 2]
                      , ConstantAbstract $ AbsLitSet [ConstantInt 2,ConstantInt 5]
                      , ConstantAbstract $ AbsLitSet [ConstantInt 3,ConstantInt 4,ConstantInt 6]
=======
                      [ ConstantAbstract $ AbsLitSet [(ConstantInt NoTag) 2]
                      , ConstantAbstract $ AbsLitSet [(ConstantInt NoTag) 2,(ConstantInt NoTag) 5]
                      , ConstantAbstract $ AbsLitSet [(ConstantInt NoTag) 3,(ConstantInt NoTag) 4,(ConstantInt NoTag) 6]
>>>>>>> taggedints
                      , ConstantAbstract $ AbsLitSet []
                      ]
                  )
                ]
            low =
                [ ( "x_ExplicitVarSizeWithFlagsR4_Flags"
                  , DomainMatrix   (intDomain 1 4) DomainBool
                  , ConstantAbstract $ AbsLitMatrix (intDomain 1 4) [ConstantBool True,ConstantBool True,ConstantBool True,ConstantBool False]
                  )
                , ( "x_ExplicitVarSizeWithFlagsR4_Values_ExplicitVarSizeWithFlags_Flags"
                  , DomainMatrix   (intDomain 1 4) (DomainMatrix (intDomain 1 3) DomainBool)
                  , ConstantAbstract $ AbsLitMatrix (intDomain 1 4)
                      [ ConstantAbstract $ AbsLitMatrix (intDomain 1 3) [ConstantBool True,ConstantBool False,ConstantBool False]
                      , ConstantAbstract $ AbsLitMatrix (intDomain 1 3) [ConstantBool True,ConstantBool True,ConstantBool False]
                      , ConstantAbstract $ AbsLitMatrix (intDomain 1 3) [ConstantBool True,ConstantBool True,ConstantBool True]
                      , ConstantAbstract $ AbsLitMatrix (intDomain 1 3) [ConstantBool False,ConstantBool False,ConstantBool False]
                      ]
                  )
                , ( "x_ExplicitVarSizeWithFlagsR4_Values_ExplicitVarSizeWithFlags_Values"
                  , DomainMatrix   (intDomain 1 4) (DomainMatrix (intDomain 1 3) (intDomain 0 9))
                  , ConstantAbstract $ AbsLitMatrix (intDomain 1 4)
<<<<<<< HEAD
                      [ ConstantAbstract $ AbsLitMatrix (intDomain 1 3) [ConstantInt Nothing 2,ConstantInt Nothing 0,ConstantInt Nothing 0]
                      , ConstantAbstract $ AbsLitMatrix (intDomain 1 3) [ConstantInt Nothing 2,ConstantInt Nothing 5,ConstantInt Nothing 0]
                      , ConstantAbstract $ AbsLitMatrix (intDomain 1 3) [ConstantInt Nothing 3,ConstantInt Nothing 4,ConstantInt Nothing 6]
                      , ConstantAbstract $ AbsLitMatrix (intDomain 1 3) [ConstantInt Nothing 0,ConstantInt Nothing 0,ConstantInt Nothing 0]
||||||| merged common ancestors
                      [ ConstantAbstract $ AbsLitMatrix (intDomain 1 3) [ConstantInt 2,ConstantInt 0,ConstantInt 0]
                      , ConstantAbstract $ AbsLitMatrix (intDomain 1 3) [ConstantInt 2,ConstantInt 5,ConstantInt 0]
                      , ConstantAbstract $ AbsLitMatrix (intDomain 1 3) [ConstantInt 3,ConstantInt 4,ConstantInt 6]
                      , ConstantAbstract $ AbsLitMatrix (intDomain 1 3) [ConstantInt 0,ConstantInt 0,ConstantInt 0]
=======
                      [ ConstantAbstract $ AbsLitMatrix (intDomain 1 3) [(ConstantInt NoTag) 2,(ConstantInt NoTag) 0,(ConstantInt NoTag) 0]
                      , ConstantAbstract $ AbsLitMatrix (intDomain 1 3) [(ConstantInt NoTag) 2,(ConstantInt NoTag) 5,(ConstantInt NoTag) 0]
                      , ConstantAbstract $ AbsLitMatrix (intDomain 1 3) [(ConstantInt NoTag) 3,(ConstantInt NoTag) 4,(ConstantInt NoTag) 6]
                      , ConstantAbstract $ AbsLitMatrix (intDomain 1 3) [(ConstantInt NoTag) 0,(ConstantInt NoTag) 0,(ConstantInt NoTag) 0]
>>>>>>> taggedints
                      ]
                  ) ]
        in  testCases "x" highDomain highConstant Just mid low

-- Occurrence
    , testCase "Occurrence: set (maxSize 4) of int {auto}" $ testCasesAuto "x"
        ( DomainSet
            Set_Occurrence
<<<<<<< HEAD
            (SetAttr (SizeAttr_MaxSize (ConstantInt Nothing 4)))
||||||| merged common ancestors
            (SetAttr (SizeAttr_MaxSize (ConstantInt 4)))
=======
            (SetAttr (SizeAttr_MaxSize ((ConstantInt NoTag) 4)))
>>>>>>> taggedints
            (intDomain 0 9) )
<<<<<<< HEAD
        ( ConstantAbstract $ AbsLitSet [ConstantInt Nothing 2, ConstantInt Nothing 5] )
||||||| merged common ancestors
        ( ConstantAbstract $ AbsLitSet [ConstantInt 2, ConstantInt 5] )
=======
        ( ConstantAbstract $ AbsLitSet [(ConstantInt NoTag) 2, (ConstantInt NoTag) 5] )
>>>>>>> taggedints

    , testCase "Occurrence: set (maxSize 4) of int" $
        let
            highDomain =
<<<<<<< HEAD
                DomainSet Set_Occurrence (SetAttr (SizeAttr_MaxSize (ConstantInt Nothing 4))) (intDomain 0 9)
||||||| merged common ancestors
                DomainSet Set_Occurrence (SetAttr (SizeAttr_MaxSize (ConstantInt 4))) (intDomain 0 9)
=======
                DomainSet Set_Occurrence (SetAttr (SizeAttr_MaxSize ((ConstantInt NoTag) 4))) (intDomain 0 9)
>>>>>>> taggedints
            highConstant =
<<<<<<< HEAD
                ConstantAbstract $ AbsLitSet [ConstantInt Nothing 2, ConstantInt Nothing 5]
||||||| merged common ancestors
                ConstantAbstract $ AbsLitSet [ConstantInt 2, ConstantInt 5]
=======
                ConstantAbstract $ AbsLitSet [(ConstantInt NoTag) 2, (ConstantInt NoTag) 5]
>>>>>>> taggedints
            low =
                [ ( "x_Occurrence"
                  , DomainMatrix   (intDomain 0 9) DomainBool
                  , ConstantAbstract $ AbsLitMatrix (intDomain 0 9)
                      [ ConstantBool False
                      , ConstantBool False
                      , ConstantBool True -- 2
                      , ConstantBool False
                      , ConstantBool False
                      , ConstantBool True -- 5
                      , ConstantBool False
                      , ConstantBool False
                      , ConstantBool False
                      , ConstantBool False
                      ]
                  )
                ]
        in  testCases "x" highDomain highConstant Just low low

    , testCase "ExplicitVarSizeWithMarker & Occurrence: set (maxSize 4) of set (maxSize 3) int {auto}" $ testCasesAuto "x"
<<<<<<< HEAD
        ( DomainSet Set_ExplicitVarSizeWithMarker (SetAttr (SizeAttr_MaxSize (ConstantInt Nothing 4)))
            ( DomainSet Set_Occurrence (SetAttr (SizeAttr_MaxSize (ConstantInt Nothing 3)))
||||||| merged common ancestors
        ( DomainSet Set_ExplicitVarSizeWithMarker (SetAttr (SizeAttr_MaxSize (ConstantInt 4)))
            ( DomainSet Set_Occurrence (SetAttr (SizeAttr_MaxSize (ConstantInt 3)))
=======
        ( DomainSet Set_ExplicitVarSizeWithMarker (SetAttr (SizeAttr_MaxSize ((ConstantInt NoTag) 4)))
            ( DomainSet Set_Occurrence (SetAttr (SizeAttr_MaxSize ((ConstantInt NoTag) 3)))
>>>>>>> taggedints
                (intDomain 0 9)
            )
        )
        ( ConstantAbstract $ AbsLitSet
<<<<<<< HEAD
            [ ConstantAbstract $ AbsLitSet [ConstantInt Nothing 2]
            , ConstantAbstract $ AbsLitSet [ConstantInt Nothing 2, ConstantInt Nothing 5]
            , ConstantAbstract $ AbsLitSet [ConstantInt Nothing 3, ConstantInt Nothing 4, ConstantInt Nothing 6]
||||||| merged common ancestors
            [ ConstantAbstract $ AbsLitSet [ConstantInt 2]
            , ConstantAbstract $ AbsLitSet [ConstantInt 2, ConstantInt 5]
            , ConstantAbstract $ AbsLitSet [ConstantInt 3, ConstantInt 4, ConstantInt 6]
=======
            [ ConstantAbstract $ AbsLitSet [(ConstantInt NoTag) 2]
            , ConstantAbstract $ AbsLitSet [(ConstantInt NoTag) 2, (ConstantInt NoTag) 5]
            , ConstantAbstract $ AbsLitSet [(ConstantInt NoTag) 3, (ConstantInt NoTag) 4, (ConstantInt NoTag) 6]
>>>>>>> taggedints
            ]
        )

    , testCase "ExplicitVarSizeWithMarker & Occurrence: set (maxSize 4) of set (maxSize 3) int" $
        let
            highDomain =
<<<<<<< HEAD
                DomainSet Set_ExplicitVarSizeWithMarker (SetAttr (SizeAttr_MaxSize (ConstantInt Nothing 4)))
                    ( DomainSet Set_Occurrence (SetAttr (SizeAttr_MaxSize (ConstantInt Nothing 3)))
||||||| merged common ancestors
                DomainSet Set_ExplicitVarSizeWithMarker (SetAttr (SizeAttr_MaxSize (ConstantInt 4)))
                    ( DomainSet Set_Occurrence (SetAttr (SizeAttr_MaxSize (ConstantInt 3)))
=======
                DomainSet Set_ExplicitVarSizeWithMarker (SetAttr (SizeAttr_MaxSize ((ConstantInt NoTag) 4)))
                    ( DomainSet Set_Occurrence (SetAttr (SizeAttr_MaxSize ((ConstantInt NoTag) 3)))
>>>>>>> taggedints
                        (intDomain 0 9) )
            highConstant =
                ConstantAbstract $ AbsLitSet
<<<<<<< HEAD
                    [ ConstantAbstract $ AbsLitSet [ConstantInt Nothing 2]
                    , ConstantAbstract $ AbsLitSet [ConstantInt Nothing 2, ConstantInt Nothing 5]
                    , ConstantAbstract $ AbsLitSet [ConstantInt Nothing 3, ConstantInt Nothing 4, ConstantInt Nothing 6]
||||||| merged common ancestors
                    [ ConstantAbstract $ AbsLitSet [ConstantInt 2]
                    , ConstantAbstract $ AbsLitSet [ConstantInt 2, ConstantInt 5]
                    , ConstantAbstract $ AbsLitSet [ConstantInt 3, ConstantInt 4, ConstantInt 6]
=======
                    [ ConstantAbstract $ AbsLitSet [(ConstantInt NoTag) 2]
                    , ConstantAbstract $ AbsLitSet [(ConstantInt NoTag) 2, (ConstantInt NoTag) 5]
                    , ConstantAbstract $ AbsLitSet [(ConstantInt NoTag) 3, (ConstantInt NoTag) 4, (ConstantInt NoTag) 6]
>>>>>>> taggedints
                    ]
            mid =
                [ ( "x_ExplicitVarSizeWithMarkerR2_Marker"
                  , intDomain 0 4
<<<<<<< HEAD
                  , ConstantInt Nothing 3
||||||| merged common ancestors
                  , ConstantInt 3
=======
                  , (ConstantInt NoTag) 3
>>>>>>> taggedints
                  )
                , ( "x_ExplicitVarSizeWithMarkerR2_Values"
<<<<<<< HEAD
                  , DomainMatrix   (intDomain 1 4) (DomainSet Set_Occurrence (SetAttr (SizeAttr_MaxSize (ConstantInt Nothing 3))) (intDomain 0 9))
||||||| merged common ancestors
                  , DomainMatrix   (intDomain 1 4) (DomainSet Set_Occurrence (SetAttr (SizeAttr_MaxSize (ConstantInt 3))) (intDomain 0 9))
=======
                  , DomainMatrix   (intDomain 1 4) (DomainSet Set_Occurrence (SetAttr (SizeAttr_MaxSize ((ConstantInt NoTag) 3))) (intDomain 0 9))
>>>>>>> taggedints
                  , ConstantAbstract $ AbsLitMatrix (intDomain 1 4)
<<<<<<< HEAD
                      [ ConstantAbstract $ AbsLitSet [ConstantInt Nothing 2]
                      , ConstantAbstract $ AbsLitSet [ConstantInt Nothing 2,ConstantInt Nothing 5]
                      , ConstantAbstract $ AbsLitSet [ConstantInt Nothing 3,ConstantInt Nothing 4,ConstantInt Nothing 6]
||||||| merged common ancestors
                      [ ConstantAbstract $ AbsLitSet [ConstantInt 2]
                      , ConstantAbstract $ AbsLitSet [ConstantInt 2,ConstantInt 5]
                      , ConstantAbstract $ AbsLitSet [ConstantInt 3,ConstantInt 4,ConstantInt 6]
=======
                      [ ConstantAbstract $ AbsLitSet [(ConstantInt NoTag) 2]
                      , ConstantAbstract $ AbsLitSet [(ConstantInt NoTag) 2,(ConstantInt NoTag) 5]
                      , ConstantAbstract $ AbsLitSet [(ConstantInt NoTag) 3,(ConstantInt NoTag) 4,(ConstantInt NoTag) 6]
>>>>>>> taggedints
                      , ConstantAbstract $ AbsLitSet []
                      ]
                  )
                ]
            low =
                [ ( "x_ExplicitVarSizeWithMarkerR2_Marker"
                  , intDomain 0 4
<<<<<<< HEAD
                  , ConstantInt Nothing 3
||||||| merged common ancestors
                  , ConstantInt 3
=======
                  , (ConstantInt NoTag) 3
>>>>>>> taggedints
                  )
                , ( "x_ExplicitVarSizeWithMarkerR2_Values_Occurrence"
                  , DomainMatrix   (intDomain 1 4) (DomainMatrix (intDomain 0 9) DomainBool)
                  , ConstantAbstract $ AbsLitMatrix (intDomain 1 4)
                      [ ConstantAbstract $ AbsLitMatrix (intDomain 0 9) -- 2
                          [ ConstantBool False, ConstantBool False, ConstantBool True , ConstantBool False, ConstantBool False
                          , ConstantBool False, ConstantBool False, ConstantBool False, ConstantBool False, ConstantBool False ]
                      , ConstantAbstract $ AbsLitMatrix (intDomain 0 9) -- 2,5
                          [ ConstantBool False, ConstantBool False, ConstantBool True , ConstantBool False, ConstantBool False
                          , ConstantBool True , ConstantBool False, ConstantBool False, ConstantBool False, ConstantBool False ]
                      , ConstantAbstract $ AbsLitMatrix (intDomain 0 9) -- 3,4,6
                          [ ConstantBool False, ConstantBool False, ConstantBool False, ConstantBool True , ConstantBool True
                          , ConstantBool False, ConstantBool True , ConstantBool False, ConstantBool False, ConstantBool False ]
                      , ConstantAbstract $ AbsLitMatrix (intDomain 0 9) -- {}
                          [ ConstantBool False, ConstantBool False, ConstantBool False, ConstantBool False, ConstantBool False
                          , ConstantBool False, ConstantBool False, ConstantBool False, ConstantBool False, ConstantBool False ]
                      ]
                  )
                ]
        in  testCases "x" highDomain highConstant Just mid low

    , testCase "ExplicitVarSizeWithFlags & Occurrence: set (maxSize 4) of set (maxSize 3) int {auto}" $ testCasesAuto "x"
<<<<<<< HEAD
        ( DomainSet Set_ExplicitVarSizeWithFlags (SetAttr (SizeAttr_MaxSize (ConstantInt Nothing 4)))
            ( DomainSet Set_Occurrence (SetAttr (SizeAttr_MaxSize (ConstantInt Nothing 3)))
||||||| merged common ancestors
        ( DomainSet Set_ExplicitVarSizeWithFlags (SetAttr (SizeAttr_MaxSize (ConstantInt 4)))
            ( DomainSet Set_Occurrence (SetAttr (SizeAttr_MaxSize (ConstantInt 3)))
=======
        ( DomainSet Set_ExplicitVarSizeWithFlags (SetAttr (SizeAttr_MaxSize ((ConstantInt NoTag) 4)))
            ( DomainSet Set_Occurrence (SetAttr (SizeAttr_MaxSize ((ConstantInt NoTag) 3)))
>>>>>>> taggedints
                (intDomain 0 9)
            )
        )
        ( ConstantAbstract $ AbsLitSet
<<<<<<< HEAD
            [ ConstantAbstract $ AbsLitSet [ConstantInt Nothing 2]
            , ConstantAbstract $ AbsLitSet [ConstantInt Nothing 2, ConstantInt Nothing 5]
            , ConstantAbstract $ AbsLitSet [ConstantInt Nothing 3, ConstantInt Nothing 4, ConstantInt Nothing 6]
||||||| merged common ancestors
            [ ConstantAbstract $ AbsLitSet [ConstantInt 2]
            , ConstantAbstract $ AbsLitSet [ConstantInt 2, ConstantInt 5]
            , ConstantAbstract $ AbsLitSet [ConstantInt 3, ConstantInt 4, ConstantInt 6]
=======
            [ ConstantAbstract $ AbsLitSet [(ConstantInt NoTag) 2]
            , ConstantAbstract $ AbsLitSet [(ConstantInt NoTag) 2, (ConstantInt NoTag) 5]
            , ConstantAbstract $ AbsLitSet [(ConstantInt NoTag) 3, (ConstantInt NoTag) 4, (ConstantInt NoTag) 6]
>>>>>>> taggedints
            ]
        )

    , testCase "ExplicitVarSizeWithFlags & Occurrence: set (maxSize 4) of set (maxSize 3) int" $
        let
            highDomain =
<<<<<<< HEAD
                DomainSet Set_ExplicitVarSizeWithFlags (SetAttr (SizeAttr_MaxSize (ConstantInt Nothing 4)))
                    ( DomainSet Set_Occurrence (SetAttr (SizeAttr_MaxSize (ConstantInt Nothing 3)))
||||||| merged common ancestors
                DomainSet Set_ExplicitVarSizeWithFlags (SetAttr (SizeAttr_MaxSize (ConstantInt 4)))
                    ( DomainSet Set_Occurrence (SetAttr (SizeAttr_MaxSize (ConstantInt 3)))
=======
                DomainSet Set_ExplicitVarSizeWithFlags (SetAttr (SizeAttr_MaxSize ((ConstantInt NoTag) 4)))
                    ( DomainSet Set_Occurrence (SetAttr (SizeAttr_MaxSize ((ConstantInt NoTag) 3)))
>>>>>>> taggedints
                        (intDomain 0 9) )
            highConstant =
                ConstantAbstract $ AbsLitSet
<<<<<<< HEAD
                    [ ConstantAbstract $ AbsLitSet [ConstantInt Nothing 2]
                    , ConstantAbstract $ AbsLitSet [ConstantInt Nothing 2, ConstantInt Nothing 5]
                    , ConstantAbstract $ AbsLitSet [ConstantInt Nothing 3, ConstantInt Nothing 4, ConstantInt Nothing 6]
||||||| merged common ancestors
                    [ ConstantAbstract $ AbsLitSet [ConstantInt 2]
                    , ConstantAbstract $ AbsLitSet [ConstantInt 2, ConstantInt 5]
                    , ConstantAbstract $ AbsLitSet [ConstantInt 3, ConstantInt 4, ConstantInt 6]
=======
                    [ ConstantAbstract $ AbsLitSet [(ConstantInt NoTag) 2]
                    , ConstantAbstract $ AbsLitSet [(ConstantInt NoTag) 2, (ConstantInt NoTag) 5]
                    , ConstantAbstract $ AbsLitSet [(ConstantInt NoTag) 3, (ConstantInt NoTag) 4, (ConstantInt NoTag) 6]
>>>>>>> taggedints
                    ]
            mid =
                [ ( "x_ExplicitVarSizeWithFlagsR2_Flags"
                  , DomainMatrix   (intDomain 1 4) DomainBool
                  , ConstantAbstract $ AbsLitMatrix (intDomain 1 4) [ConstantBool True,ConstantBool True,ConstantBool True,ConstantBool False]
                  )
                , ( "x_ExplicitVarSizeWithFlagsR2_Values"
<<<<<<< HEAD
                  , DomainMatrix   (intDomain 1 4) (DomainSet Set_Occurrence (SetAttr (SizeAttr_MaxSize (ConstantInt Nothing 3))) (intDomain 0 9))
||||||| merged common ancestors
                  , DomainMatrix   (intDomain 1 4) (DomainSet Set_Occurrence (SetAttr (SizeAttr_MaxSize (ConstantInt 3))) (intDomain 0 9))
=======
                  , DomainMatrix   (intDomain 1 4) (DomainSet Set_Occurrence (SetAttr (SizeAttr_MaxSize ((ConstantInt NoTag) 3))) (intDomain 0 9))
>>>>>>> taggedints
                  , ConstantAbstract $ AbsLitMatrix (intDomain 1 4)
<<<<<<< HEAD
                      [ ConstantAbstract $ AbsLitSet [ConstantInt Nothing 2]
                      , ConstantAbstract $ AbsLitSet [ConstantInt Nothing 2,ConstantInt Nothing 5]
                      , ConstantAbstract $ AbsLitSet [ConstantInt Nothing 3,ConstantInt Nothing 4,ConstantInt Nothing 6]
||||||| merged common ancestors
                      [ ConstantAbstract $ AbsLitSet [ConstantInt 2]
                      , ConstantAbstract $ AbsLitSet [ConstantInt 2,ConstantInt 5]
                      , ConstantAbstract $ AbsLitSet [ConstantInt 3,ConstantInt 4,ConstantInt 6]
=======
                      [ ConstantAbstract $ AbsLitSet [(ConstantInt NoTag) 2]
                      , ConstantAbstract $ AbsLitSet [(ConstantInt NoTag) 2,(ConstantInt NoTag) 5]
                      , ConstantAbstract $ AbsLitSet [(ConstantInt NoTag) 3,(ConstantInt NoTag) 4,(ConstantInt NoTag) 6]
>>>>>>> taggedints
                      , ConstantAbstract $ AbsLitSet []
                      ]
                  )
                ]
            low =
                [ ( "x_ExplicitVarSizeWithFlagsR2_Flags"
                  , DomainMatrix   (intDomain 1 4) DomainBool
                  , ConstantAbstract $ AbsLitMatrix (intDomain 1 4) [ConstantBool True,ConstantBool True,ConstantBool True,ConstantBool False]
                  )
                , ( "x_ExplicitVarSizeWithFlagsR2_Values_Occurrence"
                  , DomainMatrix   (intDomain 1 4) (DomainMatrix (intDomain 0 9) DomainBool)
                  , ConstantAbstract $ AbsLitMatrix (intDomain 1 4)
                      [ ConstantAbstract $ AbsLitMatrix (intDomain 0 9) -- 2
                          [ ConstantBool False, ConstantBool False, ConstantBool True , ConstantBool False, ConstantBool False
                          , ConstantBool False, ConstantBool False, ConstantBool False, ConstantBool False, ConstantBool False ]
                      , ConstantAbstract $ AbsLitMatrix (intDomain 0 9) -- 2,5
                          [ ConstantBool False, ConstantBool False, ConstantBool True , ConstantBool False, ConstantBool False
                          , ConstantBool True , ConstantBool False, ConstantBool False, ConstantBool False, ConstantBool False ]
                      , ConstantAbstract $ AbsLitMatrix (intDomain 0 9) -- 3,4,6
                          [ ConstantBool False, ConstantBool False, ConstantBool False, ConstantBool True , ConstantBool True
                          , ConstantBool False, ConstantBool True , ConstantBool False, ConstantBool False, ConstantBool False ]
                      , ConstantAbstract $ AbsLitMatrix (intDomain 0 9) -- {}
                          [ ConstantBool False, ConstantBool False, ConstantBool False, ConstantBool False, ConstantBool False
                          , ConstantBool False, ConstantBool False, ConstantBool False, ConstantBool False, ConstantBool False ]
                      ]
                  )
                ]
        in  testCases "x" highDomain highConstant Just mid low

    ]


testCases
    :: Name                                                      -- high level variable name
    -> Domain HasRepresentation Constant                         -- high level domain
    -> Constant                                                  -- high level value (constant)
    -> (forall a . a -> Maybe a)                                 -- `const Nothing` -- if going one level downC produces Nothing
                                                                 -- `Just`          -- if going one level downC produces (Just mid)
    -> [(Name, Domain HasRepresentation Constant, Constant)]     -- "mid" result, if we go one level down
    -> [(Name, Domain HasRepresentation Constant, Constant)]     -- "low" result, if we go all the way down
    -> Assertion
testCases highName highDomain highConstant mkMid mid low = do
    downC1Test  (highName, highDomain, highConstant) (mkMid mid)
    downTest    (highName, highDomain, highConstant) low
    up1Test     (highName, highDomain) (map dropDomain mid) (highName, highConstant)
    upTest      (highName, highDomain) (map dropDomain low) (highName, highConstant)
    downUp1Test (highName, highDomain, highConstant)
    downUpTest  (highName, highDomain, highConstant)

downC1Test
    :: (Name, Domain HasRepresentation Constant, Constant)
    -> Maybe [(Name, Domain HasRepresentation Constant, Constant)]
    -> Assertion
downC1Test high low' =
    case downC1 high of
        TriedIO -> assertFailure "TriedIO"
        Failed err -> assertFailure (show err)
        Done low -> Pr low @?= Pr low'

downTest
    :: (Name, Domain HasRepresentation Constant, Constant)
    -> [(Name, Domain HasRepresentation Constant, Constant)]
    -> Assertion
downTest high lows' =
    case downC high of
        TriedIO -> assertFailure "TriedIO"
        Failed err -> assertFailure (show err)
        Done lows -> Pr lows @?= Pr lows'

up1Test
    :: (Name, Domain HasRepresentation Constant)
    -> [(Name, Constant)]
    -> (Name, Constant)
    -> Assertion
up1Test info lows high' =
    case up1 info lows of
        TriedIO -> assertFailure "TriedIO"
        Failed err -> assertFailure (show err)
        Done high -> Pr high @?= Pr high'

upTest
    :: (Name, Domain HasRepresentation Constant)
    -> [(Name, Constant)]
    -> (Name, Constant)
    -> Assertion
upTest info lows high' =
    case up lows info of
        TriedIO -> assertFailure "TriedIO"
        Failed err -> assertFailure (show err)
        Done high -> Pr high @?= Pr high'


testCasesAuto
    :: Name                                                      -- high level variable name
    -> Domain HasRepresentation Constant                         -- high level domain
    -> Constant                                                  -- high level value (constant)
    -> Assertion
testCasesAuto highName highDomain highConstant = do
    downUp1Test (highName, highDomain, highConstant)
    downUpTest  (highName, highDomain, highConstant)


downUp1Test
    :: (Name, Domain HasRepresentation Constant, Constant)
    -> Assertion
downUp1Test high =
    case downC1 high of
        TriedIO -> assertFailure "TriedIO"
        Failed err -> assertFailure (show err)
        Done mlows -> do
            let lows = maybe [dropDomain high] (map dropDomain) mlows   -- use high if we cannot go downC1
            case up1 (dropConstant high) lows of
                TriedIO -> assertFailure "TriedIO"
                Failed err -> assertFailure (show err)
                Done high' -> Pr high' @?= Pr (dropDomain high)

downUpTest
    :: (Name, Domain HasRepresentation Constant, Constant)
    -> Assertion
downUpTest high =
    case downC high of
        TriedIO -> assertFailure "TriedIO"
        Failed err -> assertFailure (show err)
        Done lows ->
            case up (map dropDomain lows) (dropConstant high) of
                TriedIO -> assertFailure "TriedIO"
                Failed err -> assertFailure (show err)
                Done high' -> Pr high' @?= Pr (dropDomain high)


intDomain :: Default r => Integer -> Integer -> Domain r Constant
<<<<<<< HEAD
intDomain lb ub = defRepr $ mkDomainIntB (ConstantInt Nothing lb) (ConstantInt Nothing ub)
||||||| merged common ancestors
intDomain lb ub = defRepr $ mkDomainIntB (ConstantInt lb) (ConstantInt ub)
=======
intDomain lb ub = defRepr $ mkDomainIntB ((ConstantInt NoTag) lb) ((ConstantInt NoTag) ub)
>>>>>>> taggedints

dropConstant :: (a,b,c) -> (a,b)
dropConstant (a,b,_) = (a,b)

dropDomain :: (a,b,c) -> (a,c)
dropDomain (a,_,c) = (a,c)


data Pr a = Pr a
    deriving Eq

instance Show (Pr [(Name, Domain HasRepresentation Constant, Constant)]) where
    show (Pr xs) = show $ vcat $ concatMap show' xs
        where
            show' (name, dom, cons) = [ hang (pretty name) 4 $ vcat
                                        [ ":" <+> pretty dom
                                        , "=" <+> pretty cons
                                        ] ]

instance Show (Pr (Maybe [(Name, Domain HasRepresentation Constant, Constant)])) where
    show (Pr Nothing) = "Nothing"
    show (Pr (Just xs)) = show (Pr xs)

instance Show (Pr (Name, Constant)) where
    show (Pr (name, cons)) = show $ pretty name <+> "=" <+> pretty cons

instance Show (Pr [(Name, Constant)]) where
    show (Pr xs) = intercalate "\n" $ map (show . Pr) xs


